size=50;
data = 0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.8 ;

/ITL/scene/*  del;
/ITL/scene/signal/*  del;

<?javascript
	function sinusvalues (size, step) 
	{
		var j=1;
		var out = new String;
		var v = 0.0001;			// js casts 0 to an integer, that triggers an error since float are expected
								// I'll implement a more relaxed handling of signal values
    	for (i=0; i < size; i++) {
    		out += Math.sin(v) * 0.65 + " ";
    		v += step;
		}
		return out;
	}
	function sinus (dest, size, step) 
	{
		return "/ITL/scene/signal/" + dest + " " + sinusvalues(size, step) + ";";
	}
?>

/ITL/scene/title  set  txt "These scripts illustrate signals and data projections.";
/ITL/scene/title  y -0.92;
/ITL/scene/title scale 1.7;

# create a set of signals
/ITL/scene/signal/y  size $size;
/ITL/scene/signal/t  size $size;
/ITL/scene/signal/h  size $size;
/ITL/scene/signal/s  size $size;
/ITL/scene/signal/b  size $size;
/ITL/scene/signal/a  size $size;

# set their default values
/ITL/scene/signal/y  default 0.;
/ITL/scene/signal/t  default 0.02;
/ITL/scene/signal/h  default 0.;
/ITL/scene/signal/s  default 1.;
/ITL/scene/signal/b  default 1.;
/ITL/scene/signal/a  default 1.;

# put the signals in parallel
/ITL/scene/signal/sig  set y t h s b a;

# and create the corresponding graphic signal
/ITL/scene/graphsig  set graph sig;


/ITL/scene/comment  set  txt "Drop any of the accompanying script to the scene.";
/ITL/scene/comment scale 1.3;
/ITL/scene/comment y 0.9;
