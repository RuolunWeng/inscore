system := $(shell uname -s)
MAKE = make
CMAKE ?= cmake
BUILD =
### NOTE: really going pro means to take a look at this:
## https://github.com/facebook/xctool
XBUILD = xcodebuild


DO_BUILD = " && $(MAKE)"
DO_CLEAN= " && $(MAKE) clean"
XCODE_BUILD= " && xcodebuild"

#GUIDO_REPO ?= /Users/admin2/Git.gitSCM/other/GuidoLib.gitSCM
ifdef GUIDO_REPO
guido_repo_option = -DGUIDO_REPO=$(GUIDO_REPO)
endif

### NOTE: Code signing for online device debugging only works well with XCode5.1.1 and the iPAD.
######### Online debugging on iPad only works with all cydia SpringBoard extensions off (aka SafeMode)!
############## iphone fails complaining twice with popups saying: "No code signature found."
## As debugging only works with the XCode UI, this build scheme here still compiles without signing.
## This is the case, because when xcodebuild is called, the defaults of the shell environment apply
## which shall be set to:
# # # Build settings from configuration file '/Users/admin2/.NoCodeSign.xcconfig':
# # # CODE_SIGN_IDENTITY = Don't Code Sign
# # # CODE_SIGNING_REQUIRED = NO

############### User variables
# ios specific variables
CODE_SIGN_IDENTITY ?= "iPhone Developer: Guillaume Gouilloux"
DEVICE_SDK ?= "iphoneos8.0"
SIMULATOR_SDK ?= "iphonesimulator8.0"
DEPLOYMENT_TARGET ?= "7.1" # device min ios version
DEVICE_FAMILY ?= "1,2" # 1 for iphone, 2 for ipad
# Qt installation
QT_MAIN_PATH ?= /Users/gouilloux/Qt/5.3

%-ios : CODE_SIGN_ID = -DCODE_SIGN_IDENTITY=$(CODE_SIGN_IDENTITY)

# TODO GGX Ã  supprimer ??
IOS_DEVICE_IP ?= 192.168.1.93
IOS_DEVICE_PORT ?= 22 # 50022
%-ios : device_ip = -DIOS_DEVICE_IP=$(IOS_DEVICE_IP)
%-ios : device_port = -DIOS_DEVICE_PORT=$(IOS_DEVICE_PORT)


qt_main_path_varname = CMAKE_PREFIX_PATH
# /Users/admin2/Qt5.3.2/5.3

xcode_dirs = macos ios

macos_dir = build/MacOS
ios_dir = build/iOS

%-macos : plattform_dir = build/MacOS
%-ios : plattform_dir = build/iOS-device
%-ios-simulator : plattform_dir = build/iOS-simulator

%-macos-debug : plattform_dir = build/MacOS
%-macos-release : plattform_dir = build/MacOS
%-device-debug : plattform_dir = build/iOS-device
%-device-release : plattform_dir = build/iOS-device
%-simulator-debug : plattform_dir = build/iOS-simulator
%-simulator-release : plattform_dir = build/iOS-simulator


macos_cmake_options = "-D$(qt_main_path_varname)=$(QT_MAIN_PATH)/clang_64" ## no trailing slash here!
ios_cmake_options = "-D$(qt_main_path_varname)=$(QT_MAIN_PATH)/ios"        ## no trailing slash here!

cmake_mac_flags = macos ios ios-simulator

# cmake_plattform =
# %-macos : cmake_plattform =
%-ios : cmake_plattform = -DIOS=yes
%-ios-simulator : cmake_plattform = -DIOS=yes -DIOS_SIMUL=yes


%-debug : xbuild_config = -configuration Debug
%-release : xbuild_config = -configuration Release

# %-macos-debug : xbuild_sdk =
# %-macos-release : xbuild_sdk =
%-device-debug : xbuild_sdk = SDKROOT=$(DEVICE_SDK) IPHONEOS_DEPLOYMENT_TARGET=$(DEPLOYMENT_TARGET) TARGETED_DEVICE_FAMILY=$(DEVICE_FAMILY)
%-device-release : xbuild_sdk = SDKROOT=$(DEVICE_SDK) IPHONEOS_DEPLOYMENT_TARGET=$(DEPLOYMENT_TARGET) TARGETED_DEVICE_FAMILY=$(DEVICE_FAMILY)
%-simulator-debug : xbuild_sdk = SDKROOT=$(SIMULATOR_SDK) IPHONEOS_DEPLOYMENT_TARGET=$(DEPLOYMENT_TARGET) TARGETED_DEVICE_FAMILY=$(DEVICE_FAMILY)
%-simulator-release : xbuild_sdk = SDKROOT=$(SIMULATOR_SDK) IPHONEOS_DEPLOYMENT_TARGET=$(DEPLOYMENT_TARGET) TARGETED_DEVICE_FAMILY=$(DEVICE_FAMILY)


unset_cmake_done_flag_for = $(shell file=.$(1)_cmake_done; \
	if [ -e $$file ]; \
		then res="-- removing flag file: $$file"; rm $$file; \
		else res=""; \
	fi; echo $$res)
set_cmake_done_flag_for = $(shell file=.$(1)_cmake_done; \
	if [ ! -e $$file ]; \
		then res="-- writing flag file: $$file"; touch $$file; \
		else res=""; \
	fi; echo $$res)

extract_plattform = $(shell res=$(1); \
	front=`expr "$$res" : '\(.[a-z]*-\)'`; end=`expr "$$res" : '.*\(-.[a-z]*\)'`; \
	echo $$front $$end; \
	res=$${res/$$front}; res=$${res/$$end}; echo $$res)

extract_plattform_unflexible = $(shell res=$(1); \
	front=`expr "$$res" : '\(.[a-z]*-\)'`; end=`expr "$$res" : '.*\(-.[a-z]*\)'`; \
	echo $$front $$end; \
	res=$${res/$$front}; res=$${res/$$end}; echo $$res)

# 	while IFS=" " read -r target; do echo $$target; done <<< "hello\n he hi no\n noo"
extract_plattform = $(shell IFS=- read front platt rest <<< $(1); echo $$platt)
extract_cmake_done_flag_token = $(shell IFS=- read front platt rest <<< $(1); echo $$front-$$platt)

extract_plattform_dir = $($(call extract_plattform,$(1))_dir)
get_cmake_options = $($(call extract_plattform,$(1))_cmake_options)


nothing:
	@ echo "build via xcode projects generated by cmake:"
## these may become 'clean' build versions:
#	@ echo " 'macos-all' :              "
#	@ echo " 'ios-all' :                "
	@ echo ""
	@ echo " 'inscore-all' :      "
	@ echo " '-----------------------------------------'"
	@ echo " 'inscore-macos-all' :      "
	@ echo " 'inscore-macos-debug' :    "
	@ echo " 'inscore-macos-release' :  "

	@ echo " 'inscore-ios-all' :      "
	@ echo " 'inscore-ios-device-all' : "
	@ echo " 'inscore-ios-device-debug' : "
	@ echo " 'inscore-ios-device-release' : "
	@ echo " 'inscore-ios-simulator-all' : "
	@ echo " 'inscore-ios-simulator-debug' : "
	@ echo " 'inscore-ios-simulator-release' : "
	@ echo " '========================================='"
	@ echo ""
	@ echo " 'oscpack-all' :      "
	@ echo " '-----------------------------------------'"
	@ echo " 'oscpack-macos-all' :      "
	@ echo " 'oscpack-macos-debug' :    "
	@ echo " 'oscpack-macos-release' :  "

	@ echo " 'oscpack-ios-all' :      "
	@ echo " 'oscpack-ios-device-all' : "
	@ echo " 'oscpack-ios-device-debug' : "
	@ echo " 'oscpack-ios-device-release' : "
	@ echo " 'oscpack-ios-simulator-all' : "
	@ echo " 'oscpack-ios-simulator-debug' : "
	@ echo " 'oscpack-ios-simulator-release' : "

################################################################################
## http://stackoverflow.com/questions/4219255/how-do-you-get-the-list-of-targets-in-a-makefile
.PHONY: no_targets__ list
no_targets__:
list:
	sh -c "$(MAKE) -p no_targets__ | awk -F':' '/^[a-zA-Z0-9][^\$$#\/\\t=]*:([^=]|$$)/ {split(\$$1,A,/ /);for(i in A)print A[i]}' | grep -v '__\$$' | sort"

################################################################################
### inscore

inscore-all = inscore-macos-all inscore-ios-all
inscore-macos-all = inscore-macos-debug inscore-macos-release
inscore-ios-all = inscore-ios-device-all inscore-ios-simulator-all
inscore-ios-device-all = inscore-ios-device-debug inscore-ios-device-release
inscore-ios-simulator-all = inscore-ios-simulator-debug inscore-ios-simulator-release

# all:
## --> all may have a 'clean' as order-only-prerequisite

inscore-all: $(inscore-all)

### iterates over sub_makes as normal-prerequesits:
inscore-macos-all: $(inscore-macos-all)
### the bulky manual way -- discarded
# inscore-macos-all:
# 	@ echo $(call extract_plattform,$(@))
# 	@ echo $(call extract_cmake_done_flag_token,$(@))
# 	@ echo $(call unset_cmake_done_flag_for,$(call extract_cmake_done_flag_token,$(@)))
# 	@ for t in $(inscore-macos-all); do $(MAKE) $$t; done

### defining the sub_make targets with order-only-prerequisites:
# export dirmk="default"
# $(inscore-macos-all): dirmk="$(@)_caller_$(%)_$(<)"
# $(inscore-macos-all): dirmk="$(call extract_plattform,$(@))_dir"
# $(inscore-macos-all): dirmk=$($(call extract_plattform,$(@))_dir) ## works but not necessary
# $(inscore-macos-all): | makedir-macos # must write -macos, b/c $@ not defined when calling prerequisits
$(inscore-macos-all): oscpack-macos-all | inscore-macos
#	@ pwd
#	cd $(call extract_plattform_dir,$(@)) && $(XBUILD) $(xbuild_config) $(xbuild_sdk)
	cd $(plattform_dir) && $(XBUILD) $(xbuild_config) $(xbuild_sdk)

## for debug inscoreXcodeOnly variants:
$(subst inscore,inscoreXcodeOnly,$(inscore-macos-all)): inscore-macos

### works as a order-only-prerequisite
##  but incomplete --> integrating it below...
# makedir-$(xcode_dirs):
# #	@ echo "dirmk: $(dirmk)" ###very cool but unnecessary
# #	@ echo $($(call extract_plattform,$(@))_dir)
# #	@ echo $(call extract_plattform_dir,$(@))
# 	mkdir -p $(call extract_plattform_dir,$(@))

$(addprefix inscore-,$(cmake_mac_flags)):
# dir=$(call extract_plattform_dir,$(@)) 
	dir=$(plattform_dir) \
	&& mkdir -p $$dir && cd $$dir \
	&& options=$(call get_cmake_options,$(@)) \
	&& $(CMAKE) ../ -GXcode $$options $(cmake_plattform) $(guido_repo_option) \
	$(CODE_SIGN_ID) $(device_ip) $(device_port)


inscore-ios-all: $(inscore-ios-all)

inscore-ios-device-all: $(inscore-ios-device-all)
inscore-ios-simulator-all: $(inscore-ios-simulator-all)

$(inscore-ios-device-all): oscpack-ios-device-all | inscore-ios
	cd $(plattform_dir) && $(XBUILD) $(xbuild_config) $(xbuild_sdk)

$(inscore-ios-simulator-all): oscpack-ios-simulator-all | inscore-ios-simulator
	cd $(plattform_dir) && $(XBUILD) $(xbuild_config) $(xbuild_sdk)

## for debug inscoreXcodeOnly variants:
$(subst inscore,inscoreXcodeOnly,$(inscore-ios-device-all)): | inscore-ios
$(subst inscore,inscoreXcodeOnly,$(inscore-ios-simulator-all)): | inscore-ios-simulator



################################################################################
### oscpack

oscpack-all = oscpack-macos-all oscpack-ios-all
oscpack-macos-all = oscpack-macos-debug oscpack-macos-release
oscpack-ios-all = oscpack-ios-device-all oscpack-ios-simulator-all
oscpack-ios-device-all = oscpack-ios-device-debug oscpack-ios-device-release
oscpack-ios-simulator-all = oscpack-ios-simulator-debug oscpack-ios-simulator-release

oscpack-all: $(oscpack-all)
oscpack-macos-all: $(oscpack-macos-all)
$(oscpack-macos-all): | oscpack-macos
	cd lib/oscpack && cd $(call extract_plattform_dir,$(@)) && $(XBUILD) $(xbuild_config) $(xbuild_sdk)
oscpack-ios-all: $(oscpack-ios-all)
oscpack-ios-device-all: $(oscpack-ios-device-all)
oscpack-ios-simulator-all: $(oscpack-ios-simulator-all)
$(oscpack-ios-device-all) $(oscpack-ios-simulator-all): | oscpack-ios
	cd lib/oscpack && cd $(call extract_plattform_dir,$(@)) && $(XBUILD) $(xbuild_config) $(xbuild_sdk)
$(addprefix oscpack-,$(xcode_dirs)):
	dir=$(call extract_plattform_dir,$(@)) \
	&& cd lib/oscpack && mkdir -p $$dir && cd $$dir \
	&& $(CMAKE) ../../cmake -GXcode $(cmake_plattform)





################################################################################
################################################################################
### part of the bulky manual way -- discard in favour of order-only-prerequesistes
# inscore-macos-common:
# 	@ echo $(plat_dir)
# 	@ echo $(call set_cmake_done_flag_for,inscore-macos)
# ifeq ($(inscore_common),"hey")
# 	cd lib/oscpack
# # && mkdir -p build/MacOS && cd build/MacOS
# # && cmake ../../cmake -GXcode
# endif



################################################################################
### tests of how vars can be communicated to sub_makes

export option="glob_val"

TARGETS=item1 item2 item3 item4 item5

test2: $(TARGETS)

$(TARGETS): option="$(@)_val"
$(TARGETS):
	@echo "start $@:option=$(option)"
	$(MAKE) -e generic_item
	@echo "done $@"

generic_item:
	@echo "do generic option=$(option)"


export hello := "hy"

test: hello := "1"
test:
	@ echo $(hello)
	$(MAKE) -e common ## will overwrite var hello in common
	$(MAKE) common
test: hello := "2"
# test:
# 	@ echo $(hello)

common: hello := "4"
common:
# note each line fires up a new shell!
# and a parents shell environment is obviously not accessible
# so there is no way keeping a "state" (aka modifying a global var from sub-makes)
	hello="done"
	export hello="done"
	printenv hello
	varia="vari"
	export varia="vari"
#	printenv varia ## posts an error -- since varia does not exist in envronment?
	export varia="vari" && echo $$varia && printenv varia ## works in same shell only 
#	set # posts all shell-local vars
	echo $$hello
	echo $$varia
	@echo "hello: $(hello)"
common: hello := "5"
