#ifndef DOC_H
#define DOC_H

#ifndef VERSION
#define VERSION "1.0"
#endif

const char* DOC=
"Use: INScoreListener [OPTIONS] \n"
"Print any OSC messages from a given port \n"
"Version: "
VERSION
"\n\n"
" -- OPTIONS --\n"
"  -p --port PORT          Set the listened port (default is 7001)\n"
"  -f --filter FILTER      Set a message filter,\n"
"                            read further for filter specification\n"
"  -o --outFormat FORMAT   Set a the output format where:\n"
"                            '%addr' will be replaced by the osc address,\n"
"                            '%args' by all the arguments separated with space\n"
"                            '%quotedArgs' by the arguments quoted if necessary\n"
"                            '%ID' by the argument with index=ID (starting at 0)\n"
"                            '%QID' by the argument with index=ID,\n"
"                                   the argument is quoted if necessary\n"
"                          by default outFormat = \"%addr %quotedArgs;\"\n"
"  -v --verbose            Print a welcome message and error logs\n"
"  -h  --help              Print this message and quit\n"
"      --help filter       Print the filter lexical specification and quit\n"
"\n"
" -- FILTER SPECIFICATION --\n"
"Filter can discard messages according to the filter condition.\n"
"Filter conditions can be about address or message parameters:\n"
"   '%addr == REGEX' test the message address accordingly to the REGEX\n"
"   '%ID LOGIC VALUE' test one message parameters\n"
"     with:  ID     the index of the tested parameters\n"
"            LOGIC  the logical operator: !=, ==, =,  number only: >, >=, <, <=\n"
"            VALUE  the tested value, can be float int or string\n"
"See INScoreListener --help filter for precise lexical definition\n"
"\n"
" -- EXAMPLES --\n"
"INScoreListener -p 7000\n"
"   will print any osc messages on port 7000\n"
"\n"
"INScoreListener --filter %addr == /ITL/*\n"
"   will print any osc messages on port 7001 with an address starting with /ITL\n"
"\n"
"INScoreListener -f \"%0=x && %1>0\" --outFormat %1\n"
"   will print the second arguments of message with parameters: 'x' number>0 \n"
"\n"
"INScoreListener -f \"(%0=x || %0=y) && ! %1==0\" --outFormat \"(%0) = %1\"\n"
"    could print:\n"
"(x) = 1.2\n"
"(y) = -3\n"
"    but couldn't print:\n"
"(z) = 1.2            (%0!=x && %0!=y)\n"
"(x) = 0              (%1 == 0)\n"
;

const char* FILTER_DOC=
"the filter option should be used: --filter \"filter\" with: \n"
"filter         : filterExpr\n"
"               | filterExpr LAND filter\n"
"               | filterExpr LOR filter\n"
"               ;\n"
"\n"
"filterExpr     : filterExprCore\n"
"               | LNOT filterExprCore\n"
"               ;\n"
"\n"
"LAND           : '&&' | 'AND' ;\n"
"LOR            : '||' | 'OR'  ;\n"
"LNOT           : '! ' | 'NOT' ;\n"
"\n"
"filterExprCore : '%ADDR' '==' oscaddress\n"
"               | '%'ID filterOp string\n"
"               | '%'ID filterOp number\n"
"               | '(' filter ')'\n"
"               ;\n"
"\n"
"filterOp       : '=='\n"
"               | '='\n"
"               | '!='\n"
"               | '<'\n"
"               | '<='\n"
"               | '>'\n"
"               | '>='\n"
"               ;\n"
;
#endif // DOC_H

