/*

  Interlude Prototype
  Copyright (C) 2009  Grame

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  Grame Research Laboratory, 9 rue du Garet, 69001 Lyon - France
  research@grame.fr

*/


#ifndef __QGraphicsGraphItem__
#define __QGraphicsGraphItem__

#include <QGraphicsRectItem>
#include "GraphicSignal.h"

namespace interlude
{

/*!
\addtogroup ITLView
@{
*/

/**
*	\brief A QGraphicsItem displaying data in a graph.
*
*/
class QGraphicsGraphItem : public QGraphicsRectItem
{

	public :
	
		enum Options {
			kNone			= 0x00,
		};
		
		typedef enum ThicknessMode {	THICKNESS_CENTERED = 0 ,	/// < The graph is centered around the 'y' value, the thickness is
															///	symmetrical.
								THICKNESS_UP ,				/// < The graph goes from 'y' to 'y+thickness' : the thickness goes up.
								THICKNESS_DOWN };			/// < The graph goes from 'y' to 'y-thickness' : the thickness goes down.

		QGraphicsGraphItem(QGraphicsItem * parent = 0);
		virtual ~QGraphicsGraphItem();

		/**
		*	\brief QGraphicsItem implementation.
		*/
		void paint( QPainter * painter, const QStyleOptionGraphicsItem *, QWidget * );

		void clear();
		void notifyConst( int signal , int dimension , bool isConst );
		QGraphicsGraphItem& operator <<  (const GraphicFrames& frame);

		const std::vector<GraphicFrames>& frames() const	{ return fFrames; }
		void setDefaultFrame(const GraphicFrames& f )		{ fDefaultFrame = f; }

		void setSize( int bufferSize );
		int size() const { return fBufferSize; }
		
		ThicknessMode thicknessMode() const		{ return fThicknessMode; }
		void setThicknessMode(const ThicknessMode& thicknessMode);

	protected :
	
		void paint( QPainter * painter , int startIndex , int endIndex );
		
		QVariant itemChange ( GraphicsItemChange change, const QVariant & value );

		QPointF getPoint( float value , int index , float yMin , float yMax ) const;
		QPointF getPoint( float value , int index ) const;
		float getX(int index) const;
		float getY( float value , float yMin , float yMax ) const;
		void	setPath( QPainterPath& path , int style , const QList<QPointF>& points , int index ) const;
		
		int computeBandWidth() const;
		int computeCacheWidth() const;
		int computeCacheHeight() const;
		int bandWidth() const	{ return fBandWidth; }
		int cacheWidth() const	{ return fCacheWidth; }
		int cacheHeight() const { return fCacheWidth; }
		void updateCacheSize();
		
		static float YMinusT( const GraphicFrame& frame ) 		{ return frame.getPos() - frame.getThickness(); }
		static float YPlusT( const GraphicFrame& frame ) 		{ return frame.getPos() + frame.getThickness(); }
		static float  Y( const GraphicFrame& frame ) 			{ return frame.getPos(); }
		static float YMinusHalfT( const GraphicFrame& frame ) 	{ return frame.getPos() - frame.getThickness()/2.0f; }
		static float YPlusHalfT( const GraphicFrame& frame ) 	{ return frame.getPos() + frame.getThickness()/2.0f; }
				
		void clearCache();
		void paintConst( QPainter * painter , const GraphicFrames& constFrames , int startIndex , int endIndex ) const;

		std::vector<GraphicFrames> fFrames;
		std::vector<std::vector<bool> > fConstSignals;
		float mMin, mMax;
		int fNewData;
		int fBufferSize;
		QPixmap * fCache;
		
		int fLineStyle;
		ThicknessMode fThicknessMode;
		
		GraphicFrames fDefaultFrame;
		int fCacheWidth, fCacheHeight, fBandWidth;
		
		typedef float (*FrameValueComputeFunction)( const interlude::GraphicFrame& frame );
		FrameValueComputeFunction fBottomLineComputeFunction, fTopLineComputeFunction;
};

} // end namespoace

#endif
