#line 2 "ITLlex.cpp"

#line 4 "ITLlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ITLrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ITLlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ITLrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void ITLrestart (FILE *input_file ,yyscan_t yyscanner );
void ITL_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void ITL_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITL_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ITLpop_buffer_state (yyscan_t yyscanner );

static void ITLensure_buffer_stack (yyscan_t yyscanner );
static void ITL_load_buffer_state (yyscan_t yyscanner );
static void ITL_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER ITL_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE ITL_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *ITLalloc (yy_size_t ,yyscan_t yyscanner );
void *ITLrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void ITLfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer ITL_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ITLwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (yy_size_t) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[206] =
    {   0,
        0,    0,   28,   28,   30,   30,   42,   42,   43,   43,
       49,   49,   52,   52,   60,   60,   76,   74,   72,   73,
       73,   72,   18,   40,   27,   66,   16,   41,   70,   71,
       15,    7,   68,   10,   69,   64,    1,   67,   65,   22,
       62,   20,   53,   74,   35,   74,   74,   37,   35,   74,
       28,   29,   28,   30,   30,   30,   30,   42,   44,   42,
       43,   45,   43,   49,   49,   75,   52,   52,   75,   60,
       58,   59,   56,   57,    0,    0,    0,   72,   27,    0,
        0,    0,    0,   14,   39,   38,   38,   33,   53,    0,
        0,    9,   53,    2,   53,    0,    0,   13,   35,    3,

       35,    0,    0,    4,    1,   35,   23,    0,   19,   21,
        0,   35,   37,    0,   37,   35,   35,    0,   28,   29,
       28,   30,   31,   32,   42,   42,   43,   43,   49,   49,
        0,   48,   52,   52,    0,   51,   60,   46,    8,   11,
       17,   38,   38,    0,    0,   53,    4,   53,   12,   35,
       35,   63,    0,    4,   53,   35,    6,    0,    0,    0,
        0,    0,   54,   37,   35,   35,   55,   54,   55,    4,
        6,    0,    0,   46,    0,    0,   25,   24,   54,   54,
       37,   26,   35,   55,   55,   46,    0,    5,    0,   47,
       37,   61,    0,    5,    0,   37,   36,    0,   34,    0,

        0,    0,    0,   50,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,    1,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   29,   30,   28,
       28,   28,   28,   28,   28,   28,   28,   31,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       32,   33,   34,   35,   36,    1,   37,   28,   38,   28,

       39,   28,   28,   28,   40,   41,   28,   42,   43,   44,
       28,   45,   28,   46,   47,   48,   49,   50,   28,   51,
       28,   28,   52,   53,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    2,    3,    1,    2,    1,    4,    1,    1,    1,
        5,    6,    6,    7,    8,    9,   10,    1,    1,   11,
        2,    2,    2,    2,    2,    7,    1,   11,   11,   11,
       11,   12,    2,    1,   13,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,    2,    1
    } ;

static yyconst flex_int16_t yy_base[225] =
    {   0,
        0,    0,   52,   54,   56,   59,   54,   57,   55,   56,
       71,   73,   75,   77,   93,  100,  684,   64,  112,   66,
       73,  113,   75, 1165,   77,  139,   90, 1165,  117,  104,
       94,  193,  115,  247,  142,  645,  298, 1165, 1165,  138,
      629,  621,  140,  286,  337,  391, 1165,  445,  164,  499,
        0,  213,  265, 1165,  267,  628,  625,  600, 1165,   65,
      580, 1165,  108,  304,  306,  581,  308,  316,  561,    0,
     1165, 1165, 1165, 1165,  303,  553,  305,  323, 1165,  553,
      549,  538,  148, 1165,  580,  631,  685, 1165,  166,    0,
        0,  180,  324,  597,  397,    0,    0, 1165,  736,  740,

      744,  533,  308,  512,  745,  765, 1165,  746, 1165, 1165,
      753,    0,  485,  476,   80,  467,  456,  444,    0,  355,
      357,  412, 1165, 1165,  445,  130,  437,  193,  740,  765,
      431, 1165,  770,  772,  422, 1165,    0,    0, 1165, 1165,
     1165,    0,    0,  410,  370,  777,  393,  505, 1165,  784,
      797,  448,  450,  540,  637,  803,  804,  798,  368,  353,
      689,  807,  851,  362,  354,  344,  905,    0,    0,  294,
      812,  351,  342,  813,  298,  299,  505,  556,    0,    0,
      477,    0,  305,    0,    0,  432,  558,  286,  265, 1165,
      244,  637,  252,  691,  211,  218,  226,  127,  108,   56,

       46,   24,   17, 1165, 1165,  959,  972,  985,  998, 1011,
     1024, 1037, 1050, 1057, 1069, 1082, 1095, 1108, 1121, 1134,
     1138, 1143, 1148, 1153
    } ;

static yyconst flex_int16_t yy_def[225] =
    {   0,
      205,    1,  206,  206,  207,  207,  208,  208,  209,  209,
      210,  210,  211,  211,  212,  212,  205,  213,  205,  213,
      213,  205,  213,  205,  213,  205,  213,  205,  213,  213,
      214,  205,  213,  205,  213,  213,   34,  205,  205,  205,
      205,  205,  214,  213,  205,  205,  205,  205,   45,  205,
      215,  205,  215,  205,  205,  205,  205,  216,  205,  216,
      217,  205,  217,  218,  218,  218,  219,  219,  219,  220,
      205,  205,  205,  205,  213,  205,  213,  205,  205,  205,
      205,  205,  205,  205,   26,  205,  205,  205,  214,  221,
      222,   32,   32,   32,   32,   46,   50,  205,   34,   34,

       34,   76,  213,   76,   34,   34,  205,  205,  205,  205,
      213,   45,   48,   46,   48,   45,   45,   50,  215,  205,
      215,  205,  205,  205,  216,  216,  217,  217,  218,  218,
      218,  205,  219,  219,  219,  205,  220,   76,  205,  205,
      205,   86,   87,  221,  222,   32,   76,   32,  205,   34,
       34,  213,   76,   76,   32,   34,   34,  205,  205,  205,
      213,  213,  205,   48,   45,   45,  205,  223,  224,   76,
       32,   76,   76,   76,  205,  205,  213,  213,  223,  163,
       48,   45,   45,  224,  167,   76,  213,   76,  205,  205,
       48,  213,   76,  213,  205,   48,   76,  205,   48,  205,

      205,  205,  205,  205,    0,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205
    } ;

static yyconst flex_int16_t yy_nxt[1220] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   45,   45,
       45,   46,   47,   18,   18,   48,   45,   45,   49,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   50,   47,   18,   52,   53,   52,   53,   55,   55,
       59,   55,   55,   59,  204,   62,   62,   56,  203,   57,
       56,  125,   57,   65,   65,   65,   65,   68,   68,   68,
       68,   76,   77,   76,   77,  202,   60,   63,   63,   60,
       76,   77,   76,   77,   76,   77,   66,  126,   66,   71,

       69,  201,   69,   72,   73,   74,   71,   76,   77,  164,
       72,   73,   74,   78,   78,  113,   78,   78,  127,   79,
       79,   76,   77,   80,   80,   90,   81,   81,   82,   82,
       88,   84,   76,   77,   76,   77,  125,   83,   83,   75,
      128,   75,   75,  113,   75,   91,   75,   75,   75,  141,
       75,   75,  141,   75,   75,   85,   76,   77,   85,  102,
      103,  107,  126,  108,  200,   75,   86,   86,   86,   86,
       75,   90,   75,   75,   87,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       75,   91,   75,   75,   93,   75,   75,   90,   75,  146,

       75,   75,   75,  127,   75,   75,   89,   92,   75,   93,
       76,   77,   94,  116,  117,  120,  120,   91,   89,   75,
       95,   95,   95,   95,   96,  128,   75,   75,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   97,  197,   75,   75,   98,   75,
       75,   98,   75,  199,   75,   75,   75,  198,   75,   75,
       89,   93,   75,   99,   76,   77,  100,  120,  121,  122,
      122,  197,   89,   75,  101,  101,  101,  101,   96,  196,
       75,   75,   95,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,   97,  205,

       75,  195,  205,   76,   77,  188,  130,  130,  130,  130,
      134,  134,   95,  170,  101,  104,  192,  105,  134,  134,
       76,   77,   76,  205,   78,  153,  205,   78,  111,  131,
       79,  131,  174,  135,   80,  190,  106,   75,   93,   75,
       75,  135,   75,  146,   75,   75,   75,  189,   75,   75,
       89,   95,   75,  101,   76,   77,  112,  120,  120,  120,
      121,  186,   89,   75,  112,  112,  112,  112,   96,  103,
       75,   75,  113,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   97,  183,
       75,   75,  181,   75,   75,  182,   75,  113,   75,   75,

       75,  176,   75,   75,  175,   75,   75,  114,   76,   77,
      114,   95,  170,   95,  122,  122,   95,   75,  114,  114,
      114,  114,   75,  169,   75,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   75,  168,   75,   75,  205,   75,   75,  193,
       75,  186,   75,   75,   75,  205,   75,   75,   89,   95,
       75,   95,   76,   77,  113,  153,  205,  172,  103,  128,
       89,   75,  113,  113,  113,  113,   96,  126,   75,   75,
      115,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,   97,  167,   75,   75,

      166,   75,   75,  165,   75,  191,   75,   75,   75,  163,
       75,   75,  113,   75,  118,   75,   76,   77,  118,  155,
      113,  155,   76,   77,  171,   75,  118,  118,  118,  118,
       75,  154,   75,   75,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
       75,  152,   75,   75,  140,   75,   75,  173,   75,  154,
       75,   75,   75,  139,   75,   75,   88,   75,   75,   75,
       76,   77,  138,   76,   77,   76,   77,  194,  174,   75,
      138,  138,  138,  138,   75,  136,   75,   75,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,   75,  132,   75,   85,   85,   85,
       85,   95,  128,   95,  147,   75,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   75,  126,   75,   75,  148,   75,  124,   75,   75,
       75,  123,   75,   75,  110,   75,   75,   85,   76,   77,
      142,   95,  109,   95,   76,   77,  171,   75,  142,  142,
      142,  142,   75,  205,   75,   75,  143,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   75,  205,   75,   75,  205,   75,   75,  205,
       75,  205,   75,   75,   75,  205,   75,   75,  205,   75,

       75,   75,   76,   77,  143,  205,   76,   77,   76,   77,
      194,   75,  143,  143,  143,  143,   75,  205,   75,   75,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   75,  149,   75,  177,
      149,  205,  130,  130,  205,  205,  205,  158,  205,  205,
      158,  205,  150,  205,   95,  151,  101,  147,   95,   95,
      101,  101,  104,  101,  105,  131,  205,  130,  130,  205,
       76,   77,  134,  134,  134,  134,  205,  205,  106,  155,
      205,  156,  205,  106,  157,  205,  159,  160,  205,  161,
      131,   95,  162,   95,  147,  135,  146,  135,  205,  158,

      150,  205,  158,  151,  205,  205,  205,  205,  205,  205,
      205,   95,  205,  101,  147,  148,  151,   95,   95,  101,
      101,  205,  157,  157,   76,   77,   95,  187,   95,  187,
      205,  171,  188,  205,  205,  106,  205,  205,  159,  160,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      178,   75,  205,   75,   75,  205,   75,  205,   75,   75,
       75,  205,   75,   75,  179,  180,   75,  180,   76,   77,
      180,  205,  205,  205,  205,  205,  179,   75,  180,  180,
      180,  180,   75,  205,   75,   75,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,   75,  205,   75,   75,  205,   75,   75,  205,
       75,  205,   75,   75,   75,  205,   75,   75,  184,  185,
       75,  185,   76,   77,  185,  205,  205,  205,  205,  205,
      184,   75,  185,  185,  185,  185,   75,  205,   75,   75,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,   75,  205,   75,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       75,  205,   75,  205,  205,   75,  205,   75,   75,   75,
       75,   75,   75,   89,   89,  205,   89,   89,   89,  119,
      119,  205,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  125,  125,  125,  205,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  127,  127,  127,  127,  205,

      127,  127,  127,  127,  127,  127,  127,  127,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  137,  137,  137,  205,  205,  205,
      137,  137,  137,  137,  137,  137,  137,  144,  144,  205,
      144,  145,  205,  145,  179,  179,  205,  179,  179,  184,
      184,  205,  184,  184,   17,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205
    } ;

static yyconst flex_int16_t yy_chk[1220] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,    5,    5,
        7,    6,    6,    8,  203,    9,   10,    5,  202,    5,
        6,   60,    6,   11,   11,   12,   12,   13,   13,   14,
       14,   18,   18,   20,   20,  201,    7,    9,   10,    8,
       21,   21,   23,   23,   25,   25,   11,   60,   12,   15,

       13,  200,   14,   15,   15,   15,   16,   27,   27,  115,
       16,   16,   16,   19,   22,  115,   19,   22,   63,   19,
       22,   30,   30,   19,   22,   31,   19,   22,   19,   22,
       29,   22,   33,   33,   29,   29,  126,   19,   22,   26,
       63,   26,   26,  199,   26,   31,   26,   26,   26,   83,
       26,   26,   83,   26,   26,   26,   26,   26,   26,   35,
       35,   40,  126,   40,  198,   26,   26,   26,   26,   26,
       26,   43,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   43,   26,   32,   92,   32,   32,   89,   32,   92,

       32,   32,   32,  128,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   49,   49,   52,   52,   89,   32,   32,
       32,   32,   32,   32,   32,  128,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,  197,   32,   34,   34,   34,
       34,   34,   34,  196,   34,   34,   34,  195,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   53,   53,   55,
       55,  193,   34,   34,   34,   34,   34,   34,   34,  191,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   37,

       34,  189,   37,   44,   44,  188,   64,   64,   65,   65,
       67,   67,   37,  170,   37,   37,  183,   37,   68,   68,
       75,   75,   77,   77,   78,  103,  103,   78,   44,   64,
       78,   65,  170,   67,   78,  176,   37,   45,   93,   45,
       45,   68,   45,   93,   45,   45,   45,  175,   45,   45,
       45,   45,   45,   45,   45,   45,   45,  120,  120,  121,
      121,  173,   45,   45,   45,   45,   45,   45,   45,  172,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,  166,
       45,   46,  164,   46,   46,  165,   46,  164,   46,   46,

       46,  160,   46,   46,  159,   46,   46,   46,   46,   46,
       46,   95,  147,   95,  122,  122,   95,   46,   46,   46,
       46,   46,   46,  145,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,  144,   46,   48,  135,   48,   48,  186,
       48,  186,   48,   48,   48,  131,   48,   48,   48,   48,
       48,   48,   48,   48,   48,  152,  152,  153,  153,  127,
       48,   48,   48,   48,   48,   48,   48,  125,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,  118,   48,   50,

      117,   50,   50,  116,   50,  181,   50,   50,   50,  114,
       50,   50,  181,   50,   50,   50,   50,   50,   50,  148,
      113,  148,  177,  177,  148,   50,   50,   50,   50,   50,
       50,  104,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,  102,   50,   76,   82,   76,   76,  154,   76,  154,
       76,   76,   76,   81,   76,   76,   80,   76,   76,   76,
       76,   76,   76,  178,  178,  187,  187,  187,  154,   76,
       76,   76,   76,   76,   76,   69,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   66,   76,   85,   85,   85,
       85,   94,   61,   94,   94,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   86,   58,   86,   86,   94,   86,   57,   86,   86,
       86,   56,   86,   86,   42,   86,   86,   86,   86,   86,
       86,  155,   41,  155,  192,  192,  155,   86,   86,   86,
       86,   86,   86,   36,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   17,   86,   87,    0,   87,   87,    0,
       87,    0,   87,   87,   87,    0,   87,   87,    0,   87,

       87,   87,   87,   87,   87,    0,  161,  161,  194,  194,
      194,   87,   87,   87,   87,   87,   87,    0,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   99,   87,  161,
       99,  100,  129,  129,  100,  101,  105,  108,  101,  105,
      108,    0,   99,    0,  100,   99,  100,  100,  101,  105,
      101,  105,  105,  101,  105,  129,  106,  130,  130,  106,
      111,  111,  133,  133,  134,  134,    0,    0,  100,  106,
        0,  106,    0,  105,  106,  150,  108,  108,  150,  111,
      130,  146,  111,  146,  146,  133,  146,  134,  151,  158,

      150,  151,  158,  150,  156,  157,    0,  156,  157,    0,
        0,  151,    0,  151,  151,  146,  151,  156,  157,  156,
      157,    0,  156,  157,  162,  162,  171,  174,  171,  174,
        0,  171,  174,    0,    0,  151,    0,    0,  158,  158,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      162,  163,    0,  163,  163,    0,  163,    0,  163,  163,
      163,    0,  163,  163,  163,  163,  163,  163,  163,  163,
      163,    0,    0,    0,    0,    0,  163,  163,  163,  163,
      163,  163,  163,    0,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,    0,  163,  167,    0,  167,  167,    0,
      167,    0,  167,  167,  167,    0,  167,  167,  167,  167,
      167,  167,  167,  167,  167,    0,    0,    0,    0,    0,
      167,  167,  167,  167,  167,  167,  167,    0,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,    0,  167,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  209,

      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      213,    0,  213,    0,    0,  213,    0,  213,  213,  213,
      213,  213,  213,  214,  214,    0,  214,  214,  214,  215,
      215,    0,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  216,  216,  216,    0,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  217,  217,  217,  217,    0,

      217,  217,  217,  217,  217,  217,  217,  217,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  220,  220,  220,    0,    0,    0,
      220,  220,  220,  220,  220,  220,  220,  221,  221,    0,
      221,  222,    0,  222,  223,  223,    0,  223,  223,  224,
      224,    0,  224,  224,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[76] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ITL.l"
#line 10 "ITL.l"

#ifdef WIN32
#pragma warning (disable : 4267 4100)
#endif

//#include <stdio.h>
#include <iostream>
#include "IMessage.h"
#include "ITLparser.h"
#include "ITLparse.hpp"

using namespace std;

#define YY_NO_INPUT
#define YY_EXTRA_TYPE inscore::ITLparser*
#define YY_USER_ACTION yylloc->last_line = yylineno; yylloc->first_column += strlen(yytext);

#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

static int nested;
static int expressionNested=0;

#define YY_NO_UNISTD_H
// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------



/* for double quoted strings */

/* for quoted strings */

/* lua section */

/* javascript section */

/* evaluable expression section */

/* allowed character set for first identifier char */
/* allowed character set for first identifier char */
/* allowed character set for host names
see RFC952 and RFC1123
*/
/* allowed character for filename and path as defined for windows 7 with some specification for INScore compatibility: no = ; */
/* regular expression characters
as defined by the OSC specification */
#line 869 "ITLlex.cpp"

#define INITIAL 0
#define CMNTLN 1
#define COMMENT 2
#define DQSTR 3
#define QSTR 4
#define LUASECTION 5
#define JSECTION 6
#define EXPRSECTION 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int ITLlex_init (yyscan_t* scanner);

int ITLlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ITLlex_destroy (yyscan_t yyscanner );

int ITLget_debug (yyscan_t yyscanner );

void ITLset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ITLget_extra (yyscan_t yyscanner );

void ITLset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ITLget_in (yyscan_t yyscanner );

void ITLset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ITLget_out (yyscan_t yyscanner );

void ITLset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t ITLget_leng (yyscan_t yyscanner );

char *ITLget_text (yyscan_t yyscanner );

int ITLget_lineno (yyscan_t yyscanner );

void ITLset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * ITLget_lval (yyscan_t yyscanner );

void ITLset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *ITLget_lloc (yyscan_t yyscanner );
    
        void ITLset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ITLwrap (yyscan_t yyscanner );
#else
extern int ITLwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ITLlex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int ITLlex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 104 "ITL.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 1121 "ITLlex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ITLensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		ITL_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = yyg->yy_c_buf_p - yyg->yytext_ptr;
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 206 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 205 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = yyg->yy_more_len; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 109 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 110 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 111 "ITL.l"
yyextra->fInt = atoi(yytext); return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 113 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 114 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 115 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
/* ----------------------------------------- */
/*	math operators */
/* ----------------------------------------- */
case 7:
YY_RULE_SETUP
#line 121 "ITL.l"
return ADD;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 122 "ITL.l"
return PREINC;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 123 "ITL.l"
return POSTINC;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 124 "ITL.l"
return MINUS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 125 "ITL.l"
return PREDEC;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 126 "ITL.l"
return POSTDEC;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 127 "ITL.l"
return SUB;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 128 "ITL.l"
return DIV;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 129 "ITL.l"
return MULT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "ITL.l"
return MODULO;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 131 "ITL.l"
return QUEST;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 132 "ITL.l"
return NEG;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 133 "ITL.l"
return EQ;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 134 "ITL.l"
return GREATER;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 135 "ITL.l"
return GREATEREQ;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 136 "ITL.l"
return LESS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 137 "ITL.l"
return LESSEQ;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 138 "ITL.l"
return MIN;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 139 "ITL.l"
return MAX;
	YY_BREAK
/* ----------------------------------------- */
/*	method requiring messages as argument */
/* ----------------------------------------- */
case 26:
YY_RULE_SETUP
#line 144 "ITL.l"
yyextra->fText = yytext; return EVAL;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 27:
YY_RULE_SETUP
#line 150 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 151 "ITL.l"

	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 152 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 154 "ITL.l"

	YY_BREAK
case 31:
YY_RULE_SETUP
#line 155 "ITL.l"
nested++; 
	YY_BREAK
/* check the current context (EXPRSECTION or INITIAL) to close comment */
case 32:
YY_RULE_SETUP
#line 157 "ITL.l"
if (--nested==0) {if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 158 "ITL.l"
nested=1; BEGIN COMMENT;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 34:
YY_RULE_SETUP
#line 163 "ITL.l"
return ENDSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	hostname part */
/* ----------------------------------------- */
case 35:
YY_RULE_SETUP
#line 168 "ITL.l"
yyextra->fText = yytext; return HOSTNAME;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 169 "ITL.l"
yyextra->fText = yytext; return IPNUM;
	YY_BREAK
/* ----------------------------------------- */
/*	identifiers */
/* ----------------------------------------- */
case 37:
YY_RULE_SETUP
#line 174 "ITL.l"
yyextra->fText = yytext; return IDENTIFIER;
	YY_BREAK
/* ----------------------------------------- */
/*	variables */
case 38:
YY_RULE_SETUP
#line 178 "ITL.l"
yyextra->fText = yytext; return VARIABLE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 179 "ITL.l"
yyextra->fText = yytext; return VARIABLE;
	YY_BREAK
/* ----------------------------------------- */
/*	quoted strings */
/* ----------------------------------------- */
case 40:
YY_RULE_SETUP
#line 184 "ITL.l"
BEGIN DQSTR;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 185 "ITL.l"
BEGIN QSTR;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 187 "ITL.l"
if(!expressionNested){ yyextra->fText = unescape(yytext); return STRING;} else yyextra->fText += string("\"") + unescape(yytext) + "\"";
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 188 "ITL.l"
if(!expressionNested){ yyextra->fText = unescape(yytext); return STRING;} else yyextra->fText += string("'") + unescape(yytext) + "'";
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 189 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 190 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
/* ----------------------------------------- */
/*	non quoted file path */
/* ----------------------------------------- */
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 196 "ITL.l"
yyextra->fText = yytext; return STRING;	/*file path without space*/
	YY_BREAK
/* ----------------------------------------- */
/*	lang sections */
/* ----------------------------------------- */
case 47:
YY_RULE_SETUP
#line 201 "ITL.l"
BEGIN LUASECTION;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 202 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 203 "ITL.l"
yyextra->fText = unescape(yytext); return LUASCRIPT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 205 "ITL.l"
BEGIN JSECTION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 206 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 207 "ITL.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	regular expressions */
/* ----------------------------------------- */
case 53:
YY_RULE_SETUP
#line 212 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 213 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 214 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
/* ----------------------------------------- */
/*	evaluable expression section */
/* ----------------------------------------- */
case 56:
YY_RULE_SETUP
#line 221 "ITL.l"
expressionNested++; yyextra->fText += yytext;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 222 "ITL.l"
yyextra->fText += yytext; if(!--expressionNested){ BEGIN INITIAL; return EXPRESSION;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 223 "ITL.l"
BEGIN DQSTR;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 224 "ITL.l"
BEGIN QSTR;
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 225 "ITL.l"
yyextra->fText += yytext;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 226 "ITL.l"
expressionNested = 1; BEGIN EXPRSECTION; yyextra->fText = yytext; yyextra->fExprStartLine = yylloc->last_line;
	YY_BREAK
/* ----------------------------------------- */
/*	basic delimiters and markers */
/* ----------------------------------------- */
case 62:
YY_RULE_SETUP
#line 231 "ITL.l"
return EQUAL;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 232 "ITL.l"
return BACKPATH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 233 "ITL.l"
return PATHSEP;			/* OSC address and path separator */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 234 "ITL.l"
return ENDEXPR;			/* end of expression */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 235 "ITL.l"
return VARSTART;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 236 "ITL.l"
return COLON;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 237 "ITL.l"
return COMMA;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 238 "ITL.l"
return POINT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 239 "ITL.l"
return LEFTPAR;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 240 "ITL.l"
return RIGHTPAR;
	YY_BREAK
/*"["					return LEFTBRACKET; */
/*"]"					return RIGHTBRACKET; */
case 72:
YY_RULE_SETUP
#line 246 "ITL.l"
;   /* eat up space */
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 248 "ITL.l"
yylloc->first_column=0; /* ignore */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CMNTLN):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DQSTR):
case YY_STATE_EOF(QSTR):
case YY_STATE_EOF(LUASECTION):
case YY_STATE_EOF(JSECTION):
case YY_STATE_EOF(EXPRSECTION):
#line 250 "ITL.l"
return ENDSCRIPT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 252 "ITL.l"
yyextra->fText = yytext; return ERR;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 254 "ITL.l"
ECHO;
	YY_BREAK
#line 1658 "ITLlex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ITLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ITLwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ITLlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ITLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ITLrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ITLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 206 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 206 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 205);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ITLrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ITLwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ITLrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ITLensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	ITL_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	ITL_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void ITL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ITLpop_buffer_state();
	 *		ITLpush_buffer_state(new_buffer);
     */
	ITLensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ITL_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ITLwrap()) processing, but the only time this flag
	 * is looked at is after ITLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void ITL_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ITL_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ITLalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ITL_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ITL_create_buffer()
 * @param yyscanner The scanner object.
 */
    void ITL_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ITLfree((void *) b->yy_ch_buf ,yyscanner );

	ITLfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ITLrestart() or at EOF.
 */
    static void ITL_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	ITL_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ITL_init_buffer was _probably_
     * called from ITLrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void ITL_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ITL_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ITLensure_buffer_stack(yyscanner);

	/* This block is copied from ITL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ITL_switch_to_buffer. */
	ITL_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ITLpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		ITL_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ITLensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ITL_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ITL_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ITLlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ITL_scan_bytes() instead.
 */
YY_BUFFER_STATE ITL_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return ITL_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ITLlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ITL_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ITLalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ITL_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ITL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ITLget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ITLget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ITLget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t ITLget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ITLget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ITLset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ITLset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ITLset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ITL_switch_to_buffer
 */
void ITLset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ITLset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ITLget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ITLset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ITLget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ITLset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *ITLget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void ITLset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* ITLlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ITLlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ITLlex_init_extra has the same functionality as ITLlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ITLalloc in
 * the yyextra field.
 */

int ITLlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ITLset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ITLset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ITLlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ITLlex_init()
     */
    return 0;
}

/* ITLlex_destroy is for both reentrant and non-reentrant scanners. */
int ITLlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ITLpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ITLfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ITLfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ITLlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ITLfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ITLalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *ITLrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ITLfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see ITLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 254 "ITL.l"



namespace inscore 
{

void ITLparser::initScanner()
{
	ITLlex_init(&fScanner);
	ITLset_extra(this,fScanner);
}

void ITLparser::destroyScanner()
{
	ITLlex_destroy(fScanner);
}

} // end namespace


