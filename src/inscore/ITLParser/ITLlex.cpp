#line 2 "ITLlex.cpp"

#line 4 "ITLlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ITLrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ITLlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ITLrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void ITLrestart (FILE *input_file ,yyscan_t yyscanner );
void ITL_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void ITL_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITL_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ITLpop_buffer_state (yyscan_t yyscanner );

static void ITLensure_buffer_stack (yyscan_t yyscanner );
static void ITL_load_buffer_state (yyscan_t yyscanner );
static void ITL_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER ITL_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE ITL_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *ITLalloc (yy_size_t ,yyscan_t yyscanner );
void *ITLrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void ITLfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer ITL_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ITLwrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (size_t) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[243] =
    {   0,
        0,    0,   10,   10,   12,   12,   22,   22,   23,   23,
       29,   29,   32,   32,    0,    0,   56,   54,   52,   53,
       53,    9,   20,    8,   44,   50,   21,   48,   49,   33,
       33,   46,   17,   47,   42,    1,   45,   43,   54,   40,
       17,   54,   19,   17,   54,   51,   10,   11,   10,   12,
       12,   12,   12,   22,   24,   22,   23,   25,   23,   29,
       29,   55,   32,   32,   55,   54,   52,   53,   53,    9,
        8,   44,   50,   36,   38,   33,   46,   17,   47,   42,
        1,   40,   17,   54,   19,   17,   54,   51,   52,    9,
        8,    0,   15,   33,    0,    0,   33,    2,   17,    3,

       17,    0,    4,    1,   17,    0,   17,   19,    0,   19,
       17,   17,    0,   10,   11,   10,   12,   13,   14,   22,
       22,   23,   23,   29,   29,    0,   28,   32,   32,    0,
       31,    0,    0,    0,   52,    9,    8,    0,   33,    2,
       33,    0,    0,   17,    3,   17,    0,    0,    0,    4,
        1,   17,   17,   19,    0,   19,   17,   17,    0,   33,
        4,   33,   17,   41,    4,   33,   17,    6,    0,    0,
        0,   34,   19,   17,   17,   35,   26,   33,    4,   33,
       17,   41,    0,    0,    4,   33,   17,    6,   34,   19,
       17,   17,   35,    4,    6,    0,    0,    0,    0,   34,

       19,    7,   17,   35,    4,    6,    0,   26,   34,   19,
        7,   17,   35,    0,    0,    5,    0,   27,   19,   39,
       26,    0,    5,   19,   37,    0,    0,   19,    0,    5,
       19,   18,    0,   16,   18,   16,    0,    0,    0,    0,
       30,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   27,   27,   28,   29,   27,
       27,   27,   27,   27,   27,   27,   27,   30,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       31,   32,   33,   34,   35,    1,   36,   27,   37,   27,

       38,   27,   27,   27,   39,   40,   27,   41,   27,   27,
       27,   42,   27,   43,   44,   45,   46,   47,   27,   48,
       27,   27,   49,   50,   51,   52,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    1,
        5,    1,    1,    6,    7,    8,    9,    1,    1,   10,
        3,    3,    3,    1,    3,    6,   10,   10,   10,   10,
       11,    3,    1,   12,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   11,    3,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[263] =
    {   0,
        0,    0,   50,   52,   54,   57,   52,   55,   53,   54,
       69,   71,   73,   75,  101,    0,  889, 1000,   86, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  798, 1000,   32,
      139, 1000,  175,  785, 1000,  211, 1000, 1000,  770, 1000,
      147,    0,  183,  247,    0, 1000,    0,   79,   86, 1000,
      154,  764,  744,  721, 1000,  148,  719, 1000,  149,  165,
      168,  719,  173,  181,  701,  147,  215,  156,  168,  184,
      186,  193,  197,  221,  225,  296,  229,  332,  232,  234,
      239,  247,  366,  414,  450,  220,  498,  251,  278, 1000,
     1000,  705, 1000,  214,    0,    0,  685,  349,  536,  210,

      254,  674,  670,    0,  221,  316,  228,  544,  653,  647,
      352,  342,  610,    0,  284,  347,  350, 1000, 1000,  625,
      176,  621,  247,  479,  559,  613, 1000,  561,  563,  603,
     1000,  373,  578,  379,  578,  417,  421,  450,  580,  554,
      456,    0,    0,  571,  561,  504,  569,  456,  563,  557,
      612,  540,    0,  538,  535,  184,  516,  506,  479,  616,
      503,  620,  271, 1000,  621,  627,  625,  628,  647,  484,
      466,    0,  479,  554,  608,    0,    0,  647,  483,  653,
      654,  585,  591,  465,  640,  660,  664,  674,  694,  328,
      440,  429,  746,  265,  784,  426,  785,  390,  392,    0,

      397,  564,  759,    0,  281,  793,  365,  794,    0,   65,
        0,  370,    0,  401,  345,  335,  310, 1000,  293, 1000,
      681,  697,  297,  272,  664,  273,  237,  236,  235,  749,
      187,  173,  142,    0,  147,  128,   53,   41,   28,   22,
     1000, 1000,  814,  826,  838,  850,  862,  874,  881,  887,
      893,  896,  903,  907,  917,  929,  941,  953,  965,  977,
      984,  989
    } ;

static yyconst flex_int16_t yy_def[263] =
    {   0,
      242,    1,  243,  243,  244,  244,  245,  245,  246,  246,
      247,  247,  248,  248,  242,   15,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  249,
      249,  242,  250,  242,  242,  250,  242,  242,  242,  242,
      251,  252,  253,  251,  254,  242,  255,  242,  255,  242,
      242,  242,  242,  256,  242,  256,  257,  242,  257,  258,
      258,  258,  259,  259,  259,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  242,  260,   76,  260,  260,
       78,  260,   78,  242,   83,   83,  242,  260,  242,  242,
      242,  242,  242,  249,  252,  254,   31,   31,   36,   36,

       36,  242,  242,   36,   99,  242,   44,  253,  252,  108,
       44,   44,  254,  255,  242,  255,  242,  242,  242,  256,
      256,  257,  257,  258,  258,  258,  242,  259,  259,  259,
      242,  260,   87,  260,  260,  260,  260,  260,   76,   76,
       76,   84,   87,   78,   78,   78,  133,  260,  260,  133,
       78,   78,   83,   85,   84,   85,   83,   83,   87,   31,
      242,   31,   36,  242,  242,   31,   36,   36,  242,  242,
      242,  261,  108,   44,   44,  262,  133,   76,  133,   76,
       78,  260,  133,  133,  133,   76,   78,   78,  242,   85,
       83,   83,  242,  242,   31,  242,  242,  242,  242,  261,

      108,   44,   44,  262,  133,   76,  133,  133,  189,   85,
       83,   83,  193,  242,  242,  242,  242,  242,  108,  242,
      133,  260,  133,   85,  260,  242,  242,  108,  133,  260,
       85,  242,  242,  108,  133,   85,  242,  242,  242,  242,
      242,    0,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242
    } ;

static yyconst flex_int16_t yy_nxt[1053] =
    {   0,
       18,   19,   20,   21,   19,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   18,   30,   41,   41,   41,   41,
       42,   18,   18,   18,   43,   41,   41,   44,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   45,   18,
       18,   46,   48,   49,   48,   49,   51,   51,   55,   51,
       51,   55,   95,   58,   58,   52,  241,   53,   52,  240,
       53,   61,   61,   61,   61,   64,   64,   64,   64,  239,
       96,  115,  115,   56,   59,   59,   56,   89,  115,  116,
       89,   90,  224,   91,   62,  238,   62,   92,   65,  154,

       65,   66,   67,   68,   69,   19,   70,   23,   71,   72,
       73,   27,   74,   75,   30,   76,   77,   78,   79,   80,
       81,   37,   38,   39,   82,   18,   30,   83,   83,   83,
       83,   84,   18,   66,   66,   85,   83,   83,   86,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   87,
       18,   66,   88,   97,  120,   97,  117,  117,   98,  122,
       94,   94,  154,  101,  133,  134,  235,  125,  125,   95,
      125,  125,   94,  133,  134,  129,  129,   95,  237,  121,
      123,  108,  120,  129,  129,  133,  134,   96,   94,   97,
      126,   99,  232,  126,  100,   96,   94,   94,  130,   94,

       94,  133,  134,  133,  134,   95,  130,  121,   94,   94,
      133,  134,  190,   95,  133,  134,  135,  110,  154,   89,
      136,  236,  137,   96,   94,   94,  138,  161,  103,  100,
      104,   96,  133,  134,   93,  166,   94,  167,  133,  134,
      168,   95,  133,  134,   95,   94,  133,  134,  105,  147,
      148,  149,  242,  141,  235,  146,  150,  122,  151,   96,
       94,   94,   96,  101,  133,  134,  157,  158,  133,  134,
      234,  242,   94,  101,  107,  107,  152,   95,  123,   89,
      233,  108,   89,   90,  194,   91,  115,  115,  161,   92,
      163,  101,  232,  111,  112,   96,  132,  132,  132,  132,

      205,  132,  197,  132,  132,  132,  231,  132,  132,   94,
      139,  132,  139,  133,  134,  140,  223,  169,  208,  132,
      169,   94,  141,  141,  141,  141,  142,  228,  132,  132,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  143,  227,  132,  132,  144,  115,
      116,  145,  117,  117,  216,  170,  171,  210,  146,  146,
      146,  146,  154,   94,  216,   94,  161,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      141,  225,  146,  175,  221,  153,  162,  174,  107,  107,
      133,  134,  153,  153,  153,  153,  133,  242,  107,  107,

      154,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  132,  132,  132,  132,  226,  132,
      214,  132,  132,  132,  219,  132,  132,  218,  132,  132,
      155,  133,  134,  155,  133,  134,  217,  132,  133,  134,
      155,  155,  155,  155,  132,  214,  132,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  132,   93,  132,  132,  141,  133,  134,  154,
      141,  212,  141,  183,  242,  141,  154,  154,  154,  154,
      211,  125,  125,  148,  156,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  132,  132,

      132,  132,  205,  132,  126,  132,  132,  132,  201,  132,
      132,  199,  132,  159,  132,  133,  134,  159,  141,  198,
      146,  132,  194,  146,  159,  159,  159,  159,  132,  193,
      132,  132,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  132,  192,  132,  132,
       97,  191,   99,  242,  186,  163,  187,   94,   94,  188,
       94,  125,  125,  129,  129,  129,  129,  189,  141,   94,
      141,  179,  154,  101,   95,  141,  185,  146,  179,  135,
      184,  148,   89,  136,  126,  137,  130,  182,  130,  138,
      181,  180,   96,  132,  202,  133,  134,  177,  152,  178,

      107,  107,  183,  242,  177,  177,  177,  177,  184,  148,
      107,  107,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  141,  242,  146,  150,
       94,  151,   94,  161,  166,  160,  166,  242,  196,  195,
      165,   94,  242,   94,  168,  242,  195,  168,  169,  152,
      203,  169,  123,  162,  107,  107,  121,  207,  197,  185,
      176,  141,  101,  141,  179,  101,  178,  186,  141,  186,
      146,  179,  206,  181,  141,  173,  141,  208,  141,  206,
      146,  133,  134,  188,  180,  172,  170,  171,  141,  165,
      146,  152,  164,  188,  132,  132,  132,  132,  229,  132,

      221,  132,  132,  132,  160,  132,  132,  200,  209,  132,
      209,  133,  134,  209,  133,  134,  230,  132,   93,  200,
      209,  209,  209,  209,  132,  131,  132,  132,  209,  209,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
      209,  209,  132,  127,  132,  132,  132,  132,  132,  132,
      123,  132,  121,  132,  132,  132,  119,  132,  132,  204,
      213,  132,  213,  133,  134,  213,  133,  134,  230,  132,
      220,  204,  213,  213,  213,  213,  132,  118,  132,  132,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  132,  106,  132,  132,   94,  215,

       94,  215,  102,  195,  216,  107,  107,  141,  222,  141,
      222,   93,  206,  223,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   94,   94,  242,   94,
       94,   94,  101,  101,  242,  101,  101,  101,  107,  107,

      242,  107,  107,  107,  109,  109,  242,  109,  108,  108,
      242,  108,  108,  108,  113,  242,  113,  114,  242,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  120,
      120,  120,  242,  120,  120,  120,  120,  120,  120,  120,
      120,  122,  122,  122,  122,  242,  122,  122,  122,  122,
      122,  122,  122,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  132,  132,  242,
      242,  242,  242,  132,  132,  132,  132,  132,  132,  200,
      200,  242,  200,  200,  204,  204,  242,  204,  204,   17,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242
    } ;

static yyconst flex_int16_t yy_chk[1053] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,    7,    6,
        6,    8,   30,    9,   10,    5,  240,    5,    6,  239,
        6,   11,   11,   12,   12,   13,   13,   14,   14,  238,
       30,   48,   48,    7,    9,   10,    8,   19,   49,   49,
       19,   19,  210,   19,   11,  237,   12,   19,   13,  210,

       14,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   31,   56,   31,   51,   51,   31,   59,
       41,   41,  236,   41,   66,   66,  235,   60,   60,   31,
       61,   61,   41,   68,   68,   63,   63,   41,  233,   56,
       59,   41,  121,   64,   64,   69,   69,   31,   33,   33,
       60,   33,  232,   61,   33,   41,   43,   43,   63,   43,

       33,   70,   70,   71,   71,   33,   64,  121,   43,   33,
       72,   72,  156,   43,   73,   73,   67,   43,  156,   67,
       67,  231,   67,   33,   36,   36,   67,  100,   36,  100,
       36,   43,   67,   67,   74,  105,   36,  105,   74,   74,
      105,   36,   75,   75,   94,   36,   77,   77,   36,   79,
       79,   80,   80,   81,  229,   81,   81,  123,   81,   36,
       44,   44,   94,   44,   82,   82,   86,   86,   88,   88,
      228,  101,   44,  101,  107,  107,   81,   44,  123,   89,
      227,   44,   89,   89,  194,   89,  115,  115,  163,   89,
      163,  101,  226,   44,   44,   44,   76,   76,   76,   76,

      205,   76,  194,   76,   76,   76,  224,   76,   76,   76,
       76,   76,   76,   76,   76,   76,  223,  106,  205,   76,
      106,   76,   76,   76,   76,   76,   76,  219,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,  217,   76,   76,   78,  116,
      116,   78,  117,  117,  216,  106,  106,  190,   78,   78,
       78,   78,  190,   98,  215,   98,   98,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       83,  212,   83,  112,  207,   83,   98,  111,  112,  112,
      132,  132,   83,   83,   83,   83,  134,  134,  111,  111,

       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   84,   84,   84,   84,  214,   84,
      214,   84,   84,   84,  201,   84,   84,  199,   84,   84,
       84,   84,   84,   84,  136,  136,  198,   84,  137,  137,
       84,   84,   84,   84,   84,  196,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  138,   84,   84,   85,  138,  138,   85,
      141,  192,  141,  148,  148,  141,   85,   85,   85,   85,
      191,  124,  124,  184,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   87,   87,

       87,   87,  179,   87,  124,   87,   87,   87,  173,   87,
       87,  171,   87,   87,   87,   87,   87,   87,  146,  170,
      146,   87,  161,  146,   87,   87,   87,   87,   87,  159,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,  158,   87,   87,
       99,  157,   99,   99,  152,   99,  152,  108,  108,  152,
      108,  125,  125,  128,  128,  129,  129,  155,  140,  108,
      140,  140,  154,   99,  108,  145,  150,  145,  145,  135,
      149,  149,  135,  135,  125,  135,  128,  147,  129,  135,
      144,  140,  108,  133,  174,  135,  135,  133,  145,  139,

      174,  174,  182,  182,  133,  133,  133,  133,  183,  183,
      202,  202,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  151,  130,  151,  151,
      160,  151,  160,  160,  162,  160,  162,  126,  165,  162,
      165,  166,  167,  166,  167,  168,  166,  168,  169,  151,
      175,  169,  122,  160,  175,  175,  120,  185,  165,  185,
      113,  178,  167,  178,  178,  168,  178,  180,  181,  180,
      181,  181,  180,  181,  186,  110,  186,  185,  187,  186,
      187,  225,  225,  187,  178,  109,  169,  169,  188,  103,
      188,  181,  102,  188,  189,  189,  189,  189,  221,  189,

      221,  189,  189,  189,   97,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  222,  222,  222,  189,   92,  189,
      189,  189,  189,  189,  189,   65,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,   62,  189,  189,  193,  193,  193,  193,
       57,  193,   54,  193,  193,  193,   53,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  230,  230,  230,  193,
      203,  193,  193,  193,  193,  193,  193,   52,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,   39,  193,  193,  195,  197,

      195,  197,   34,  195,  197,  203,  203,  206,  208,  206,
      208,   28,  206,  208,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  249,  249,   17,  249,
      249,  249,  250,  250,    0,  250,  250,  250,  251,  251,

        0,  251,  251,  251,  252,  252,    0,  252,  253,  253,
        0,  253,  253,  253,  254,    0,  254,  255,    0,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  256,
      256,  256,    0,  256,  256,  256,  256,  256,  256,  256,
      256,  257,  257,  257,  257,    0,  257,  257,  257,  257,
      257,  257,  257,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  260,  260,    0,
        0,    0,    0,  260,  260,  260,  260,  260,  260,  261,
      261,    0,  261,  261,  262,  262,    0,  262,  262,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[56] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ITL.l"
#line 10 "ITL.l"

#ifdef WIN32
#pragma warning (disable : 4267 4100)
#endif

//#include <stdio.h>
#include <iostream>
#include "IMessage.h"
#include "ITLparser.h"
#include "ITLparse.hpp"

using namespace std;

#define YY_EXTRA_TYPE inscore::ITLparser*
#define YY_USER_ACTION yylloc->last_line = yylineno; yylloc->first_column += strlen(yytext);

#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

static int nested;
static int expressionNested=0;

#define YY_NO_UNISTD_H
// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------



/* for double quoted strings */

/* for quoted strings */

/* lua section */

/* javascript section */

/* evaluable expression section */

/* allowed character set for first identifier char */
/* allowed character set for first identifier char */
/* allowed character set for host names
see RFC952 and RFC1123
*/
/* allowed character for filename and path as defined for windows 7*/
/* regular expression characters
as defined by the OSC specification */
#line 843 "ITLlex.cpp"

#define INITIAL 0
#define CMNTLN 1
#define COMMENT 2
#define DQSTR 3
#define QSTR 4
#define LUASECTION 5
#define JSECTION 6
#define EXPRSECTION 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int ITLlex_init (yyscan_t* scanner);

int ITLlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ITLlex_destroy (yyscan_t yyscanner );

int ITLget_debug (yyscan_t yyscanner );

void ITLset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ITLget_extra (yyscan_t yyscanner );

void ITLset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ITLget_in (yyscan_t yyscanner );

void ITLset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ITLget_out (yyscan_t yyscanner );

void ITLset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t ITLget_leng (yyscan_t yyscanner );

char *ITLget_text (yyscan_t yyscanner );

int ITLget_lineno (yyscan_t yyscanner );

void ITLset_lineno (int line_number ,yyscan_t yyscanner );

int ITLget_column  (yyscan_t yyscanner );

void ITLset_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * ITLget_lval (yyscan_t yyscanner );

void ITLset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *ITLget_lloc (yyscan_t yyscanner );
    
        void ITLset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ITLwrap (yyscan_t yyscanner );
#else
extern int ITLwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ITLlex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int ITLlex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 103 "ITL.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 1099 "ITLlex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ITLensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		ITL_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = yyg->yy_c_buf_p - yyg->yytext_ptr;
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 243 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 242 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = yyg->yy_more_len; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 108 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 109 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 110 "ITL.l"
yyextra->fInt = atoi(yytext); return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 112 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 113 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 114 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
/* ----------------------------------------- */
/*	method requiring messages as argument */
/* ----------------------------------------- */
case 7:
YY_RULE_SETUP
#line 119 "ITL.l"
yyextra->fText = yytext; return EVAL;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 8:
YY_RULE_SETUP
#line 125 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 126 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 127 "ITL.l"

	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 128 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 130 "ITL.l"

	YY_BREAK
case 13:
YY_RULE_SETUP
#line 131 "ITL.l"
nested++; 
	YY_BREAK
/* check the current context (EXPRSECTION or INITIAL) to close comment */
case 14:
YY_RULE_SETUP
#line 133 "ITL.l"
if (--nested==0) {if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 134 "ITL.l"
nested=1; BEGIN COMMENT;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 16:
YY_RULE_SETUP
#line 139 "ITL.l"
return ENDSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	hostname part */
/* ----------------------------------------- */
case 17:
YY_RULE_SETUP
#line 144 "ITL.l"
yyextra->fText = yytext; return HOSTNAME;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 145 "ITL.l"
yyextra->fText = yytext; return IPNUM;
	YY_BREAK
/* ----------------------------------------- */
/*	identifiers */
/* ----------------------------------------- */
case 19:
YY_RULE_SETUP
#line 150 "ITL.l"
yyextra->fText = yytext; return IDENTIFIER;
	YY_BREAK
/* ----------------------------------------- */
/*	quoted strings */
/* ----------------------------------------- */
case 20:
YY_RULE_SETUP
#line 155 "ITL.l"
BEGIN DQSTR;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 156 "ITL.l"
BEGIN QSTR;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 158 "ITL.l"
yyextra->fText = unescape(yytext); return QUOTEDSTRING;
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 159 "ITL.l"
yyextra->fText = unescape(yytext); return QUOTEDSTRING;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
/* ----------------------------------------- */
/*	file path */
/* ----------------------------------------- */
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 167 "ITL.l"
yyextra->fText = unescape(yytext); return FILEPATH;	/*file path without space*/
	YY_BREAK
/* ----------------------------------------- */
/*	lang sections */
/* ----------------------------------------- */
case 27:
YY_RULE_SETUP
#line 172 "ITL.l"
BEGIN LUASECTION;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 173 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 174 "ITL.l"
yyextra->fText = unescape(yytext); return LUASCRIPT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 176 "ITL.l"
BEGIN JSECTION;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 177 "ITL.l"
if(expressionNested) BEGIN EXPRSECTION; else BEGIN INITIAL;
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 178 "ITL.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	regular expressions */
/* ----------------------------------------- */
case 33:
YY_RULE_SETUP
#line 183 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 184 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 185 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
/* ----------------------------------------- */
/*	evaluable expression section */
/* ----------------------------------------- */
/*"expr("					expressionNested = 1; BEGIN EXPRSECTION; return EXPRESSIONSTART;*/
case 36:
YY_RULE_SETUP
#line 193 "ITL.l"
expressionNested++; return EXPRESSIONSTART;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 194 "ITL.l"
expressionNested++; return EXPRESSIONSTART;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 195 "ITL.l"
if(!--expressionNested){ BEGIN INITIAL;} return EXPRESSIONEND;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 196 "ITL.l"
expressionNested = 1; BEGIN EXPRSECTION; return EXPRESSIONSTART;
	YY_BREAK
/* ----------------------------------------- */
/*	basic delimiters and markers */
/* ----------------------------------------- */
case 40:
YY_RULE_SETUP
#line 201 "ITL.l"
return EQUAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 202 "ITL.l"
return BACKPATH;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 203 "ITL.l"
return PATHSEP;			/* OSC address and path separator */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 204 "ITL.l"
return ENDEXPR;			/* end of expression */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 205 "ITL.l"
return VARSTART;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 206 "ITL.l"
return COLON;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 207 "ITL.l"
return COMMA;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 208 "ITL.l"
return POINT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 209 "ITL.l"
return LEFTPAR;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 210 "ITL.l"
return RIGHTPAR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 211 "ITL.l"
return AMPERSAND;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 212 "ITL.l"
return APPROX;
	YY_BREAK
/*"["					return LEFTBRACKET; */
/*"]"					return RIGHTBRACKET; */
case 52:
YY_RULE_SETUP
#line 217 "ITL.l"
;   /* eat up space */
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 219 "ITL.l"
yylloc->first_column=0; /* ignore */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 221 "ITL.l"
yyextra->fText = yytext; return ERR;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 223 "ITL.l"
ECHO;
	YY_BREAK
#line 1520 "ITLlex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CMNTLN):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DQSTR):
case YY_STATE_EOF(QSTR):
case YY_STATE_EOF(LUASECTION):
case YY_STATE_EOF(JSECTION):
case YY_STATE_EOF(EXPRSECTION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ITLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ITLwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ITLlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ITLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ITLrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ITLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 243 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 243 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 242);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ITLrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ITLwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ITLrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ITLensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	ITL_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	ITL_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void ITL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ITLpop_buffer_state();
	 *		ITLpush_buffer_state(new_buffer);
     */
	ITLensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ITL_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ITLwrap()) processing, but the only time this flag
	 * is looked at is after ITLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void ITL_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ITL_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ITLalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ITL_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ITL_create_buffer()
 * @param yyscanner The scanner object.
 */
    void ITL_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ITLfree((void *) b->yy_ch_buf ,yyscanner );

	ITLfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ITLrestart() or at EOF.
 */
    static void ITL_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	ITL_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ITL_init_buffer was _probably_
     * called from ITLrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void ITL_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ITL_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ITLensure_buffer_stack(yyscanner);

	/* This block is copied from ITL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ITL_switch_to_buffer. */
	ITL_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ITLpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		ITL_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ITLensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ITL_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ITL_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ITLlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ITL_scan_bytes() instead.
 */
YY_BUFFER_STATE ITL_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return ITL_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ITLlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ITL_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ITLalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ITL_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ITL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ITLget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ITLget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ITLget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t ITLget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ITLget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ITLset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "ITLset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "ITLset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ITL_switch_to_buffer
 */
void ITLset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ITLset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ITLget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ITLset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ITLget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ITLset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *ITLget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void ITLset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* ITLlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ITLlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ITLlex_init_extra has the same functionality as ITLlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ITLalloc in
 * the yyextra field.
 */

int ITLlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ITLset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ITLset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ITLlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ITLlex_init()
     */
    return 0;
}

/* ITLlex_destroy is for both reentrant and non-reentrant scanners. */
int ITLlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ITLpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ITLfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ITLfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ITLlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ITLfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ITLalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *ITLrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ITLfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see ITLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 223 "ITL.l"



namespace inscore 
{

void ITLparser::initScanner()
{
	ITLlex_init(&fScanner);
	ITLset_extra(this,fScanner);
}

void ITLparser::destroyScanner()
{
	ITLlex_destroy(fScanner);
}

} // end namespace


