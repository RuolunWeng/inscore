#line 2 "ITLlex.cpp"

#line 4 "ITLlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ITLrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ITLlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ITLrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void ITLrestart (FILE *input_file ,yyscan_t yyscanner );
void ITL_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void ITL_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITL_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ITLpop_buffer_state (yyscan_t yyscanner );

static void ITLensure_buffer_stack (yyscan_t yyscanner );
static void ITL_load_buffer_state (yyscan_t yyscanner );
static void ITL_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER ITL_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE ITL_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *ITLalloc (yy_size_t ,yyscan_t yyscanner );
void *ITLrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void ITLfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer ITL_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ITLwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (size_t) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 205
#define YY_END_OF_BUFFER 206
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[821] =
    {   0,
        0,    0,  179,  179,  181,  181,  189,  189,  190,  190,
      195,  195,  198,  198,  206,  204,  202,  203,  203,  178,
      187,  177,   13,  188,    8,    9,  114,  200,   10,  199,
        4,   11,    1,   12,  204,    7,  200,  185,  204,  204,
      185,  185,  185,  185,  185,  185,  185,  185,  163,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  164,
      185,   75,   76,   77,  179,  180,  179,  181,  181,  181,
      181,  189,  191,  189,  190,  192,  190,  195,  195,  205,
      198,  198,  205,  202,  178,  177,    0,  184,  200,  200,
        0,  200,  200,    4,    2,    0,  199,    3,  199,    4,

        0,    1,  199,    0,  185,    0,  185,  185,    0,    0,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,   82,   83,   84,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  165,  185,  146,  185,  185,  185,  185,  185,  185,
      185,   30,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  179,  180,  179,  181,  182,

      183,  189,  189,  190,  190,  195,  195,    0,  194,  198,
      198,    0,  197,  200,  200,    0,  199,    0,    5,    0,
      199,    6,    0,    0,    0,  185,  186,    0,  201,    0,
      185,   32,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,   49,  185,  185,  185,  185,  157,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   48,  130,  185,  185,  185,  185,
      185,  185,   62,  185,   63,  138,  185,  185,   35,  185,
      185,  185,  109,  185,  185,   31,  147,  185,  185,  185,

      185,   56,  185,  185,  185,  185,  185,  185,   58,  185,
      185,  185,  185,   57,  185,  185,  185,  185,  185,  185,
       47,  185,  185,  185,  185,  185,  185,  185,  134,  185,
      185,  136,  185,  185,  185,  185,  185,  185,  185,  185,
       29,  185,  200,    6,    0,    6,    0,    0,  186,  201,
        0,  185,  185,  185,  185,  185,   60,  149,  185,  185,
      185,  185,  185,  185,  185,  185,  156,   95,  185,  185,
      185,  185,  185,  185,  185,   71,   72,  185,  185,  185,
       67,   66,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  131,  185,  185,

      129,  185,  185,  185,  132,  122,   15,   36,   37,  185,
      185,  101,  185,  148,  185,  185,   43,  185,  185,  185,
      185,  185,  185,  185,   21,   55,  185,   17,   24,  124,
      185,  185,  185,  185,  185,  185,   39,  185,   52,  185,
      185,  185,   93,  116,  185,  185,  185,  135,  185,  185,
      137,  185,  185,  185,  185,  185,  185,  185,  185,  185,
        0,  193,    0,  185,   46,   61,   78,  185,  185,   34,
       99,  185,  185,  125,  185,  185,  185,   69,  185,   97,
      185,  119,  185,  185,  185,  185,   44,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  127,   59,  185,  185,   14,  133,   18,  185,
      185,   42,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  110,  185,  185,
      185,   79,  185,   89,  155,  185,  185,  185,  185,  185,
      185,  185,  185,  139,   53,  102,  185,  185,  185,  185,
      185,    0,    0,  185,  185,  185,  185,  185,   70,   85,
      185,  185,  185,  185,   68,  185,  185,  185,   86,  185,
      185,  185,  185,  185,  185,   94,  185,  185,   50,  185,
      185,  185,  185,  103,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,   33,   51,  185,  185,  185,  185,  185,
      151,  185,  185,  185,  185,  185,  185,  185,  185,  185,
       54,  185,  185,  185,  185,  185,    0,    0,  185,  185,
      185,  185,   38,  158,  185,  185,  115,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  126,   23,  185,  185,
      185,  185,  185,  185,  185,  185,  167,  185,  185,   22,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  123,
      153,   16,  185,  185,   90,   91,   92,  185,  185,  185,
      185,  185,  161,  185,  185,  140,  185,  185,   40,   80,
       41,   81,    0,  117,    0,  185,  185,  185,  150,  185,

      185,  185,  185,  185,  185,  185,  100,  174,  175,   96,
       87,   88,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  144,  185,  105,  104,  108,  107,  185,
      185,  185,   19,  185,  185,  185,  185,  160,  185,  185,
      120,  185,    0,    0,  185,  154,  185,  185,  185,   98,
      185,  145,  185,  185,  128,  112,  185,  185,  166,  185,
      185,  170,  185,  185,  143,  185,  106,  185,  185,  185,
      185,   26,  185,  172,  173,  121,  185,    0,    0,  113,
       65,  159,  185,  185,  185,  185,  111,  185,  168,  169,
      185,  176,   45,  185,   27,   64,   25,  162,   28,    0,

        0,   74,   20,  171,   73,  185,  185,  152,  196,    0,
      185,  185,    0,  141,  185,  118,  185,  185,  142,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   35,   33,   36,   37,
       33,   33,   38,   39,   40,   33,   41,   33,   33,   33,
       42,   43,   44,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    4,    1,
        1,    5,    6,    1,    7,    8,    1,    7,    7,    7,
        9,    1,    1,    1,    1,    5,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,    1,    1,   12,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,    1
    } ;

static yyconst flex_int16_t yy_base[846] =
    {   0,
        0,    0,   70,   72,   74,   77,   73,   76,   74,   79,
       87,   89,   92,   94,  399, 4730,   97, 4730, 4730, 4730,
     4730, 4730, 4730, 4730,  379, 4730,   90,  108, 4730,  118,
      121, 4730,  129, 4730,  363, 4730,  136,  146,    0,  346,
      174,  205,  148,  149,  219,  186,  245,  256,  271,  126,
      199,  250,  293,  297,  318,  155,  333,  348,  357,  370,
      376,  181,  298,  185,    0,   97,  108, 4730,  126,  369,
      365,  330, 4730,  100,  329, 4730,  126,  173,  177,  345,
      297,  323,  337,  364, 4730, 4730,  347, 4730,  422,    0,
        0,  430,  438,  441,  447,  455,  463,  474,  144,  466,

      483,  491,  499,  172,  487,    0,  474,  524,  307,  299,
      248,  534,  508,  481,  514,  530,  531,  544,  545,  559,
      560,  563,  577,  584,  588,  595,  602,  606,  613,  627,
      633,  647,  640,  651,  658,  665,  672,  678,  679,  692,
      697,  701,  708,  715,  719,  735,  739,  748,  752,  757,
      763,  770,  774,  781,  785,  790,  794,  799,  803,  812,
      817,  830,  831,  834,  837,  848,  852,  857,  870,  876,
      879,  892,  896,  910,  914,  936,  915,  940,  945,  949,
      963,  972,  954,  968,  981,  985,  986,  990, 1003, 1004,
     1007, 1021, 1022, 1026, 1039,    0,  149,  159,  283, 4730,

     4730,  291,  176,  286,  227,  383,  522,  300, 4730,  555,
      962,  299, 4730, 1073, 1086, 1091, 1099,  313,  595,  714,
     1108, 1116,  220,  271,  246, 1082,    0,  254, 1149,  277,
     1120, 1129, 1138, 1147, 1152, 1156, 1169, 1178, 1187, 1191,
     1163, 1194, 1198, 1211, 1218, 1229, 1207, 1233, 1234, 1247,
     1248, 1254, 1268, 1269, 1273, 1274, 1287, 1291, 1292, 1305,
     1296, 1309, 1312, 1326, 1345, 1340, 1349, 1331, 1360, 1364,
     1369, 1373, 1384, 1387, 1388, 1401, 1402, 1407, 1418, 1421,
     1422, 1435, 1436, 1439, 1440, 1453, 1454, 1458, 1477, 1459,
     1473, 1488, 1494, 1499, 1505, 1472, 1510, 1516, 1541, 1527,

     1534, 1538, 1552, 1559, 1556, 1572, 1573, 1577, 1586, 1591,
     1600, 1605, 1606, 1611, 1620, 1627, 1631, 1634, 1647, 1652,
     1656, 1661, 1670, 1665, 1681, 1685, 1688, 1699, 1706, 1719,
     1712, 1723, 1726, 1737, 1744, 1748, 1751, 1755, 1768, 1772,
     1777, 1783,  751,  928, 1124, 1127,  226,  238,    0, 1842,
      266, 1813, 1824, 1830, 1843, 1848, 1849, 1852, 1863, 1866,
     1877, 1881, 1888, 1892, 1901, 1906, 1922, 1915, 1926, 1935,
     1939, 1921, 1948, 1944, 1959, 1955, 1964, 1968, 1973, 1979,
     1984, 1988, 1993, 1997, 2004, 2008, 2019, 2015, 2028, 2032,
     2045, 2048, 2041, 2059, 2068, 2064, 2077, 2081, 2086, 2095,

     2099, 2100, 2114, 2115, 2119, 2130, 2133, 2166, 2144, 2147,
     2162, 2158, 2165, 2169, 2176, 2183, 2215, 2189, 2206, 2202,
     2221, 2230, 2224, 2239, 2243, 2246, 2250, 2259, 2263, 2264,
     2268, 2279, 2285, 2284, 2303, 2298, 2299, 2312, 2317, 2323,
     2330, 2334, 2337, 2351, 2352, 2355, 2375, 2358, 2390, 2394,
     2374, 2391, 2395, 2409, 2410, 2423, 2427, 2436, 2430, 2445,
      221, 4730,  243, 2449, 2452, 2463, 2467, 2470, 2474, 2481,
     2485, 2494, 2498, 2503, 2512, 2516, 2521, 2525, 2530, 2539,
     2543, 2544, 2548, 2557, 2562, 2563, 2568, 2581, 2582, 2586,
     2600, 2604, 2613, 2617, 2626, 2630, 2633, 2637, 2644, 2655,

     2658, 2672, 2675, 2676, 2691, 2690, 2694, 2695, 2726, 2715,
     2720, 2729, 2733, 2740, 2755, 2746, 2760, 2761, 2766, 2775,
     2780, 2781, 2786, 2800, 2801, 2805, 2814, 2825, 2821, 2836,
     2841, 2832, 2845, 2850, 2859, 2868, 2872, 2877, 2881, 2886,
     2892, 2903, 2907, 2912, 2929, 2916, 2930, 2933, 2944, 2947,
     2953,  193,  238, 2962, 2966, 2967, 2981, 2982, 2985, 2986,
     3000, 3001, 3014, 3015, 3020, 3029, 3046, 3035, 3040, 3053,
     3057, 3062, 3066, 3073, 3084, 3087, 3090, 3101, 3104, 3108,
     3121, 3125, 3164, 3132, 3145, 3149, 3163, 3167, 3176, 3181,
     3185, 3198, 3199, 3202, 3203, 3221, 3222, 3226, 3237, 3240,

     3246, 3241, 3259, 3260, 3263, 3264, 3277, 3281, 3284, 3300,
     3301, 3314, 3319, 3320, 3325, 3334, 3339, 3343, 3350, 3359,
     3395, 3370, 3375, 3374, 3392, 3393,  191,   42, 3397, 3410,
     3414, 3425, 3419, 3430, 3434, 3439, 3454, 3448, 3453, 3457,
     3468, 3471, 3482, 3486, 3489, 3493, 3500, 3504, 3507, 3513,
     3524, 3563, 3531, 3538, 3545, 3558, 3562, 3563, 3577, 3581,
     3582, 3595, 3599, 3604, 3613, 3618, 3631, 3632, 3646, 3647,
     3650, 3651, 3664, 3665, 3668, 3679, 3682, 3683, 3686, 3699,
     3702, 3703, 3706, 3721, 3725, 3726, 3730, 3739, 3746, 3750,
     3753, 3757,  150, 4730,  168, 3764, 3768, 3771, 3775, 3782,

     3796, 3791, 3805, 3800, 3814, 3818, 3827, 3831, 3832, 3836,
     3845, 3849, 3850, 3863, 3864, 3903, 3879, 3883, 3888, 3894,
     3903, 3910, 3914, 3921, 3928, 3934, 3935, 3939, 3948, 3953,
     3954, 3967, 3970, 3971, 3985, 3988, 3989, 4003, 4004, 4007,
     4021, 4026,  147,  172, 4022, 4037, 4040, 4041, 4044, 4058,
     4062, 4067, 4080, 4076, 4083, 4094, 4097, 4136, 4111, 4112,
     4117, 4130, 3174, 4131, 4135, 4136, 4150, 4155, 4164, 4159,
     4173, 4178, 4182, 4187, 4196, 4200, 4201,  109,  153, 4214,
     4215, 4218, 4219, 4232, 4237, 4233, 4238, 4286, 4254, 4257,
     4296, 4271, 4276, 4277, 4290, 4295, 4296, 4301, 4310,   81,

      124, 4314, 4315, 4319, 4328, 4367, 4369, 4337, 4730,  113,
     4379, 4385,   60, 4389, 4396, 4730, 4407, 4427, 4430, 4730,
     4486, 4498, 4510, 4522, 4534, 4546, 4554, 4561, 4567, 4579,
     4587, 4599, 4611, 4623, 4635, 4647, 4655, 4663,   84, 4671,
     4683, 4691, 4699, 4705, 4717
    } ;

static yyconst flex_int16_t yy_def[846] =
    {   0,
      820,    1,  821,  821,  822,  822,  823,  823,  824,  824,
      825,  825,  826,  826,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  827,  827,  820,  828,
      820,  820,  828,  820,  820,  820,  827,  829,  830,  820,
      831,  829,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,  832,  820,  832,  820,  820,  820,
      820,  833,  820,  833,  834,  820,  834,  835,  835,  835,
      836,  836,  836,  820,  820,  820,  820,  820,  827,  837,
      830,  827,  837,  820,  837,  820,  828,  828,  828,  820,

      820,  828,  828,  820,  838,  839,   42,  840,  841,  820,
      842,  831,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,  832,  820,  832,  820,  820,

      820,  833,  833,  834,  834,  835,  835,  835,  820,  836,
      836,  836,  820,  837,  837,  820,  828,  820,  820,  820,
      828,  828,  820,  820,  820,  843,  844,  841,  845,  820,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  837,  837,  820,  820,  820,  820,  844,  845,
      820,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,  827,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
      820,  820,  820,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,  820,  820,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  838,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
      827,   42,   42,   42,   42,   42,  820,  820,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,  838,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  820,  820,  820,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,  838,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  820,  820,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,  838,   42,   42,
       42,   42,  838,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,  820,  820,   42,
       42,   42,   42,   42,   42,   42,   42,  838,   42,   42,
      838,   42,   42,   42,   42,   42,   42,   42,   42,  820,

      820,   42,   42,   42,   42,  838,  838,   42,  820,  820,
      838,  838,  820,  838,  838,  820,  838,  838,  838,    0,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820
    } ;

static yyconst flex_int16_t yy_nxt[4803] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   33,   33,
       16,   34,   35,   36,   16,   37,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   39,   40,   16,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   38,   38,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   38,   60,   61,   62,   63,
       64,   16,   66,   67,   66,   67,   69,   69,   73,   69,
       69,   73,   76,   70,  694,   71,   70,   76,   71,   79,
       79,   79,   79,  227,   82,   82,   82,   82,   84,  197,

      197,   85,  816,   86,   90,  202,   87,   90,   90,   90,
      197,  198,   80,  695,   80,   74,   77,   83,   74,   83,
       92,   77,   93,   94,  813,   95,   95,   95,  199,  199,
       96,   91,   97,   94,  204,   98,   98,   98,  100,  100,
      100,  820,  203,  810,   94,  809,  102,  102,  102,   91,
       90,  197,  197,   90,   90,   90,  820,   89,   89,  820,
      105,  197,  198,  105,  105,  105,  106,  801,  205,  800,
      101,   89,  107,  223,  107,  207,  207,   91,  103,  207,
      207,  202,  107,  153,  154,   89,   89,   91,  111,  779,
      108,  111,  111,  111,  107,  107,  107,  107,  208,   89,

      778,  107,  208,  107,  117,  119,  107,  107,  120,  744,
      118,  107,  743,  107,  121,   91,   89,   89,  203,  105,
      170,  223,  105,  105,  105,  106,  224,  191,  225,  107,
       89,  107,  107,  107,  107,  204,  137,  107,  693,  107,
      192,  107,  138,  107,  107,  107,   91,  107,  139,  108,
      628,  113,  155,  114,  140,  107,  627,  107,  156,   90,
       90,  115,  553,  116,  122,  123,  552,  124,  125,  205,
      126,  127,  128,   90,  224,  107,  225,  107,  129,  130,
      463,  131,  132,  462,  133,  199,  199,  134,  135,  136,
      141,  107,  461,  107,  351,  157,  107,  229,  107,  211,

      211,  107,  107,  107,  107,  144,  107,  142,  107,  158,
      143,  348,  107,  145,  107,  159,  347,  107,  146,  107,
      148,  147,  212,  820,  820,  211,  211,  107,  205,  107,
      219,  219,  219,  203,  149,  150,  151,  152,  160,  107,
      230,  107,  161,  107,  193,  107,  107,  194,  212,  107,
      229,  107,  162,  107,  107,  107,  107,  195,   88,  163,
      164,  213,  165,  166,  107,   84,  107,  167,   85,  209,
       86,  205,  203,   87,  107,  201,  107,  168,  171,  107,
      200,  107,  172,  169,  173,  207,  207,  110,  104,  107,
       88,  107,  174,  175,  107,  176,  107,  177,  820,  820,

      178,  179,  820,  107,  107,  107,  107,  180,  208,  820,
      184,  820,  181,  107,  182,  107,  107,  183,  107,  186,
      820,  188,  107,  187,  107,  185,  107,  820,  107,  189,
      820,  820,  107,  820,  107,  820,   90,  820,  190,   90,
       90,   90,   92,  820,   93,   94,  820,  214,  214,  214,
       93,  820,   93,   94,  820,  214,  214,  214,  100,  100,
      100,  820,   94,   91,   95,   95,   95,   96,  820,   96,
       94,   91,  216,  216,  216,   96,  820,   97,   94,  820,
      217,  217,  217,  100,  100,  100,  820,  820,  820,   94,
      101,   98,   98,   98,  820,  218,  215,  218,   90,   90,

      219,  219,  219,  820,  820,  820,   94,  106,  102,  102,
      102,  220,   90,  221,  820,  101,  222,  222,  222,  820,
      107,  820,  107,  103,  207,  207,  820,  107,  820,  232,
      107,  226,  107,  820,  820,   89,   89,  107,  226,  107,
      103,  226,  226,  226,  106,   89,   89,  208,  111,   89,
      820,  111,  111,  111,  107,  820,  107,  211,  211,   89,
      107,  820,  107,  820,  107,   91,  107,  233,  820,  820,
      107,  231,  107,  820,  234,   91,  107,  107,  107,  107,
      212,  235,  820,  236,  820,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  239,  820,  237,  238,  820,  820,

      107,  107,  107,  107,  240,  107,  107,  107,  107,  107,
      820,  107,  219,  219,  219,  241,  107,  107,  107,  243,
      820,  244,  242,  107,  820,  107,  245,  246,  820,  249,
      107,  820,  107,  247,  251,  107,  107,  820,  252,  248,
      107,  107,  107,  107,  253,  820,  107,  820,  107,  250,
      107,  107,  107,  107,  107,  820,  820,  254,  107,  107,
      107,  107,  107,  257,  107,  255,  820,  256,  820,  107,
      820,  107,  260,  107,  820,  107,  820,  258,  259,  107,
      820,  107,  261,  107,  262,  107,  107,  820,  107,  107,
      820,  107,  263,  107,  264,  107,  107,  107,  107,  107,

      820,  820,  265,  107,  107,  107,  107,  107,  820,  107,
      266,  107,  820,  107,  107,  820,  107,  267,  107,  820,
      107,  107,  268,  107,  107,  107,  107,  107,  107,  820,
      107,  346,  346,  346,  269,  107,  107,  107,  107,  820,
      107,  270,  820,  107,  820,  107,  273,  107,  107,  107,
      107,  820,  271,  107,  107,  107,  107,  107,  820,  107,
      272,  107,  820,  107,  274,  107,  107,  107,  344,  344,
      344,  107,  820,  107,  820,  107,  820,  276,  820,  275,
      277,  107,  820,  107,  278,  107,  820,  107,  279,  820,
      820,  107,  280,  107,  107,  107,  107,  107,  283,  820,

      107,  281,  820,  107,  282,  107,  107,  820,  107,  107,
      107,  107,  285,  107,  284,  107,  107,  820,  107,  107,
      107,  107,  107,  820,  820,  286,  107,  107,  107,  107,
      107,  107,  107,  107,  820,  288,  107,  107,  107,  107,
      107,  107,  107,  287,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  820,  289,  107,  820,  107,  107,  107,
      107,  107,  820,  107,  290,  107,  291,  820,  107,  292,
      107,  820,  820,  107,  820,  107,  107,  107,  107,  295,
      107,  296,  107,  107,  293,  107,  107,  107,  294,  107,
      107,  820,  107,  107,  107,  107,  107,  820,  107,  298,

      107,  297,  820,  107,  107,  107,  107,  820,  107,  820,
      299,  820,  820,  301,  300,  107,  107,  302,  107,  303,
      820,  305,  107,  820,  107,  107,  107,  107,  107,  306,
      820,  820,  107,  304,  107,  107,  820,  107,  107,  308,
      309,  820,  314,  307,  107,  344,  344,  344,  107,  310,
      311,  820,  107,  312,  107,  313,  107,  820,  107,  820,
      107,  107,  107,  107,  211,  211,  107,  820,  107,  315,
      107,  107,  107,  107,  316,  820,  820,  317,  318,  321,
      319,  320,  107,  820,  107,  322,  107,  212,  107,  323,
      820,  107,  107,  107,  107,  107,  107,  107,  107,  324,

      107,  107,  107,  107,  820,  326,  820,  107,  327,  107,
      107,  107,  330,  820,  107,  325,  107,  820,  107,  107,
      107,  107,  328,  329,  107,  331,  107,  107,  107,  107,
      107,  107,  107,  107,  334,  820,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  332,  107,  333,  107,  107,
      107,  336,  107,  107,  335,  107,  820,  337,  820,  107,
      107,  107,  107,  107,  820,  107,  338,  107,  107,  107,
      107,  820,  107,  820,  107,  820,  820,  107,  107,  107,
      107,  340,  107,  339,  107,  107,  820,  107,   94,  341,
      214,  214,  214,   90,   90,  107,  820,  107,  343,  820,

      343,  342,  106,  344,  344,  344,   94,   90,  216,  216,
      216,  820,  820,  820,   94,  820,  217,  217,  217,  820,
      820,  820,  215,  820,  820,  222,  222,  222,  820,  820,
      820,  820,  820,  222,  222,  222,  220,  820,  220,  820,
      345,  346,  346,  346,  346,  346,  346,  820,  103,  228,
      228,  820,  228,  228,  228,  228,  228,  228,  228,  228,
      820,  820,  228,  820,  228,  228,  107,  820,  107,  228,
      228,  228,  228,  228,  820,  107,  107,  107,  107,  352,
      820,  820,  820,  353,  107,  107,  107,  107,  820,  820,
      228,  228,  229,  107,  107,  107,  107,  820,  107,  354,

      107,  820,  107,  107,  107,  107,  820,  820,  355,  107,
      107,  107,  107,  356,  107,  107,  820,  107,  357,  107,
      228,  107,  362,  820,  107,  107,  107,  107,  363,  359,
      820,  358,  360,  107,  107,  107,  107,  107,  361,  107,
      107,  820,  107,  107,  107,  107,  107,  107,  820,  107,
      107,  820,  107,  107,  107,  107,  107,  107,  365,  107,
      364,  820,  366,  107,  107,  107,  107,  107,  820,  107,
      367,  820,  369,  820,  107,  107,  107,  107,  368,  107,
      107,  107,  107,  820,  820,  107,  370,  107,  820,  107,
      107,  107,  107,  107,  107,  107,  107,  820,  371,  374,

      107,  820,  107,  107,  107,  107,  107,  820,  820,  372,
      107,  820,  107,  373,  107,  107,  107,  107,  375,  376,
      107,  107,  107,  377,  107,  107,  107,  107,  820,  107,
      107,  107,  107,  107,  820,  107,  378,  107,  379,  107,
      107,  820,  107,  107,  381,  107,  820,  107,  107,  107,
      107,  107,  107,  107,  107,  382,  380,  107,  107,  820,
      107,  107,  820,  107,  820,  107,  820,  107,  107,  820,
      107,  384,  107,  385,  107,  386,  383,  107,  387,  107,
      391,  820,  107,  820,  107,  820,  107,  107,  107,  107,
      388,  107,  820,  107,  820,  107,  107,  107,  107,  820,

      820,  107,  389,  107,  820,  107,  107,  107,  107,  820,
      107,  390,  107,  392,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  820,  393,  107,  820,  107,  394,  107,
      107,  107,  107,  107,  107,  107,  107,  395,  820,  820,
      107,  396,  107,  397,  107,  107,  107,  107,  107,  107,
      107,  398,  820,  107,  820,  107,  400,  107,  107,  107,
      107,  820,  399,  107,  107,  107,  401,  107,  107,  402,
      107,  820,  820,  403,  107,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  408,
      820,  404,  107,  107,  107,  405,  107,  107,  107,  107,

      107,  107,  107,  406,  107,  107,  407,  107,  820,  107,
      107,  107,  107,  820,  107,  107,  107,  107,  107,  107,
      107,  107,  410,  107,  413,  107,  411,  409,  107,  107,
      107,  107,  820,  107,  107,  107,  107,  412,  820,  820,
      107,  820,  107,  820,  107,  107,  107,  107,  414,  820,
      107,  107,  107,  107,  415,  107,  107,  107,  107,  820,
      820,  107,  107,  107,  107,  417,  107,  418,  107,  419,
      416,  820,  107,  107,  107,  107,  820,  423,  420,  820,
      107,  421,  107,  107,  107,  107,  107,  107,  820,  422,
      107,  820,  107,  820,  107,  820,  107,  107,  107,  107,

      107,  820,  107,  424,  107,  107,  820,  107,  107,  820,
      107,  426,  427,  820,  107,  107,  425,  107,  107,  107,
      107,  107,  429,  107,  820,  107,  820,  820,  107,  107,
      107,  107,  107,  107,  107,  107,  428,  107,  820,  107,
      820,  430,  107,  820,  107,  432,  107,  107,  107,  107,
      431,  107,  107,  107,  107,  434,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  820,  107,  107,  107,  107,
      433,  820,  436,  107,  820,  107,  107,  107,  107,  107,
      107,  820,  107,  107,  435,  107,  820,  107,  820,  107,
      107,  820,  107,  107,  437,  107,  439,  820,  107,  438,

      107,  820,  107,  107,  107,  107,  820,  107,  440,  441,
      107,  107,  107,  107,  107,  442,  107,  107,  107,  107,
      820,  107,  820,  107,  820,  820,  107,  107,  107,  107,
      444,  107,  443,  107,  107,  820,  107,  107,  445,  107,
      820,  107,  820,  107,  107,  107,  107,  107,  820,  820,
      446,  820,  107,  820,  107,  107,  448,  107,  107,  447,
      107,  450,  107,  820,  107,  107,  449,  107,  107,  107,
      107,  107,  107,  451,  107,  107,  820,  107,  820,  107,
      820,  107,  107,  107,  107,  107,  453,  820,  820,  452,
      107,  454,  107,  107,  107,  107,  107,  107,  820,  107,

      107,  107,  107,  107,  107,  820,  107,  107,  820,  107,
      820,  107,  455,  107,  107,  456,  107,  457,  107,  820,
      107,  458,  820,  107,  107,  107,  107,  820,  107,  107,
      107,  107,  820,  107,  459,  107,  460,  820,  820,  107,
      820,  107,  228,  228,  820,  228,  228,  228,  228,  228,
      228,  228,  228,  820,  820,  228,  820,  228,  228,  107,
      820,  107,  228,  228,  228,  228,  228,  820,  820,  464,
      107,  107,  107,  820,  820,  466,  107,  820,  107,  820,
      107,  820,  107,  228,  228,  229,  107,  465,  107,  107,
      820,  107,  467,  468,  107,  107,  107,  107,  107,  107,

      107,  107,  820,  820,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  228,  107,  469,  820,  820,  820,  107,
      820,  107,  107,  107,  107,  107,  820,  107,  470,  107,
      820,  820,  471,  107,  107,  107,  107,  107,  107,  107,
      107,  474,  820,  472,  107,  473,  107,  107,  107,  107,
      107,  477,  107,  475,  107,  820,  820,  107,  820,  107,
      820,  107,  476,  107,  107,  820,  481,  107,  107,  107,
      107,  107,  107,  107,  107,  478,  820,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  479,  107,  480,  820,
      107,  107,  107,  107,  107,  107,  107,  107,  820,  482,

      107,  107,  107,  107,  107,  107,  107,  107,  484,  483,
      107,  107,  107,  107,  107,  107,  107,  107,  820,  107,
      107,  107,  107,  820,  107,  107,  485,  107,  487,  486,
      107,  107,  107,  820,  107,  107,  107,  107,  820,  107,
      107,  107,  107,  107,  107,  107,  107,  820,  820,  107,
      107,  107,  107,  489,  107,  107,  107,  820,  488,  820,
      490,  107,  107,  107,  107,  107,  491,  107,  492,  820,
      820,  107,  820,  107,  107,  107,  107,  107,  107,  493,
      107,  494,  820,  820,  107,  495,  107,  107,  107,  107,
      107,  107,  496,  107,  107,  820,  107,  107,  820,  107,

      498,  107,  820,  107,  107,  107,  107,  107,  497,  820,
      107,  820,  107,  501,  107,  107,  107,  107,  820,  500,
      107,  499,  107,  107,  107,  107,  107,  107,  820,  107,
      820,  820,  107,  107,  107,  107,  820,  107,  503,  107,
      502,  107,  107,  107,  107,  107,  107,  107,  107,  820,
      820,  107,  820,  504,  820,  107,  107,  107,  107,  505,
      107,  107,  107,  107,  820,  107,  506,  107,  820,  508,
      107,  107,  107,  107,  507,  107,  107,  107,  107,  107,
       90,  107,  820,   90,   90,   90,  107,  820,  107,  107,
      107,  107,  107,  107,  820,  107,  509,  820,  820,  820,

      107,  820,  107,  107,  107,  107,  107,   91,  107,  510,
      107,  107,  820,  107,  107,  107,  107,  107,  107,  820,
      107,  511,  107,  107,  107,  107,  820,  107,  820,  107,
      820,  107,  107,  820,  107,  107,  820,  107,  512,  107,
      820,  107,  513,  514,  515,  517,  516,  107,  107,  820,
      107,  820,  107,  820,  107,  820,  521,  820,  107,  820,
      107,  107,  107,  107,  107,  518,  519,  107,  820,  107,
      107,  107,  107,  107,  520,  820,  107,  107,  107,  107,
      107,  820,  107,  522,  820,  107,  107,  107,  107,  107,
      523,  107,  107,  820,  107,  107,  107,  107,  107,  107,

      820,  107,  107,  524,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  820,  107,  107,  107,  107,  820,  107,
      107,  107,  107,  820,  107,  107,  107,  107,  820,  820,
      107,  107,  107,  107,  525,  107,  526,  107,  527,  529,
      107,  107,  107,  107,  107,  107,  107,  107,  528,  107,
      820,  107,  820,  820,  107,  107,  107,  107,  107,  107,
      107,  107,  530,  107,  820,  107,  820,  820,  107,  107,
      107,  107,  532,  107,  531,  107,  107,  820,  107,  107,
      107,  107,  107,  107,  820,  107,  107,  820,  107,  533,
      107,  820,  107,  107,  820,  107,  534,  107,  107,  107,

      535,  107,  537,  107,  107,  820,  107,  107,  107,  107,
      107,  107,  820,  107,  107,  820,  107,  538,  820,  536,
      107,  107,  107,  107,  541,  539,  820,  542,  540,  820,
      107,  107,  107,  107,  820,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  543,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  544,  107,  107,  107,  107,  820,
      820,  545,  546,  820,  820,  107,  107,  107,  107,  107,
      820,  107,  547,  107,  820,  548,  107,  820,  550,  107,
      820,  107,  107,  107,  107,  107,  107,  549,  107,  820,
      820,  107,  107,  107,  107,  107,  551,  107,  107,  820,

      107,  107,  820,  107,  820,  107,  820,  107,  107,  107,
      107,  107,  820,  107,  554,  107,  107,  820,  107,  107,
      107,  107,  107,  107,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  555,  820,  820,  107,  556,  107,
      107,  107,  107,  107,  107,  820,  107,  557,  820,  107,
      107,  107,  107,  820,  107,  820,  558,  559,  107,  107,
      107,  107,  107,  820,  107,  560,  820,  107,  107,  107,
      107,  107,  107,  107,  107,  820,  107,  107,  107,  107,
      561,  107,  562,  107,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  820,  107,  107,  107,  107,  820,  107,

      107,  107,  107,  107,  564,  107,  107,  563,  107,  107,
      107,  107,  567,  107,  107,  565,  107,  820,  107,  107,
      107,  107,  820,  820,  107,  566,  107,  107,  107,  107,
      107,  569,  107,  820,  107,  820,  820,  107,  107,  107,
      107,  820,  107,  568,  107,  570,  107,  820,  107,  572,
      107,  820,  107,  820,  820,  820,  107,  820,  107,  107,
      107,  107,  107,  107,  571,  107,  573,  820,  574,  107,
      820,  107,  107,  107,  107,  107,  107,  575,  107,  107,
      820,  107,  107,  107,  107,  107,  107,  820,  107,  107,
      107,  107,  107,  107,  576,  107,  577,  820,  820,  578,

      107,  107,  107,  107,  107,  583,  107,  820,  579,  820,
      820,  107,  820,  107,  581,  820,  107,  580,  107,  582,
      107,  107,  107,  107,  107,  820,  820,  820,  107,  820,
      107,  107,  107,  107,  107,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  820,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  584,  585,  586,  820,  820,  587,
      588,  107,  820,  107,  820,  589,  107,  820,  107,  591,
      820,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      820,  107,  107,  590,  107,  107,  107,  107,  107,  107,
      820,  107,  107,  820,  107,  592,  107,  820,  107,  593,

      594,  107,  107,  107,  107,  595,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  820,  107,  597,  107,  107,
      596,  107,  107,  599,  107,  820,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  598,  600,  107,  107,  107,
      820,  820,  107,  601,  107,  602,  107,  107,  107,  107,
      604,  107,  607,  107,  605,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  603,  820,  608,  107,  820,  107,
      107,  107,  107,  107,  820,  820,  606,  107,  107,  107,
      107,  107,  107,  107,  107,  609,  610,  107,  107,  107,
      107,  107,  107,  107,  107,  612,  107,  107,  107,  107,

      820,  107,  820,  107,  820,  107,  107,  107,  107,  820,
      820,  820,  611,  820,  107,  107,  107,  107,  107,  820,
      107,  613,  820,  107,  107,  107,  107,  107,  107,  107,
      107,  820,  107,  107,  107,  107,  614,  107,  107,  107,
      107,  621,  107,  820,  107,  616,  620,  615,  107,  107,
      617,  107,  618,  107,  820,  107,  820,  622,  107,  107,
      107,  107,  107,  107,  107,  107,  619,  820,  107,  820,
      107,  820,  107,  820,  107,  107,  107,  107,  107,  107,
      820,  107,  623,  820,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  820,  107,  625,  624,  820,  107,

      107,  107,  107,  107,  820,  107,  626,  820,  107,  107,
      107,  107,  107,  107,  107,  107,  820,  820,  107,  630,
      107,  820,  107,  107,  107,  631,  629,  107,  107,  107,
      107,  107,  107,  107,  107,  820,  820,  107,  107,  107,
      107,  107,  107,  107,  107,  633,  107,  107,  107,  107,
      820,  632,  820,  820,  820,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  634,  635,  107,  636,  107,  820,
      107,  107,  107,  107,  639,  107,  107,  107,  107,  637,
      640,  107,  638,  107,  820,  107,  107,  107,  107,  820,
      820,  107,  107,  107,  107,  820,  107,  820,  107,  107,

      641,  107,  107,  107,  107,  107,  642,  820,  107,  107,
      107,  107,  107,  107,  107,  107,  820,  820,  107,  107,
      107,  107,  107,  820,  107,  644,  645,  820,  643,  107,
      107,  107,  107,  107,  820,  107,  107,  646,  107,  647,
      107,  820,  107,  107,  820,  107,  107,  107,  107,  107,
      107,  820,  107,  649,  107,  820,  107,  107,  820,  107,
      107,  820,  107,  820,  107,  648,  107,  107,  820,  107,
      650,  107,  820,  107,  820,   90,   90,  107,  107,  107,
      107,  107,  820,  107,  106,   90,   90,  651,  107,   90,
      107,  107,  820,  107,  106,  107,  820,  107,  820,   90,

      820,  107,  820,  107,  653,  107,  820,  654,  226,  107,
      820,  107,  655,  107,  820,  107,  820,  820,  226,  107,
      820,  107,  107,  107,  107,  107,  656,  107,  820,  107,
      652,  107,  107,  107,  107,  820,  657,  107,  658,  107,
      791,  107,  659,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  820,  820,  107,  107,  107,  107,  107,  107,
      107,  107,  660,  820,  661,  663,  662,  107,  107,  107,
      107,  820,  107,  664,  107,  820,  820,  107,  107,  107,
      107,  665,  666,  107,  107,  107,  107,  107,  107,  107,
      820,  820,  107,  107,  107,  107,  107,  107,  107,  670,

      668,  667,  107,  669,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  672,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  820,  107,  673,  107,  671,  107,
      107,  820,  107,  107,  820,  107,  820,  107,  820,  107,
      107,  820,  107,  820,  820,  674,  107,  107,  107,  107,
      820,  820,  675,  676,  677,  820,  107,  107,  107,  107,
      107,  820,  107,  679,  678,  107,  107,  107,  107,  820,
      107,  107,  107,  107,  682,  107,  107,  680,  107,  820,
      107,  107,  107,  107,  681,  107,  820,  107,  685,  107,
      107,  107,  107,  820,  683,  107,  107,  107,  107,  107,

      820,  107,  820,  684,  687,  107,  107,  107,  686,   90,
      820,  820,   90,   90,   90,  107,  107,  107,  107,  688,
      107,  107,  107,  107,  820,  820,  107,  820,  107,  820,
      107,  107,  690,  107,  820,  820,   91,  689,  107,  107,
      107,  107,  820,  107,  820,  107,  696,  820,  107,  107,
      107,  692,  820,  107,  691,  107,  107,  820,  107,  700,
      107,  820,  107,  698,  820,  107,  107,  107,  107,  697,
      107,  107,  107,  107,  699,  107,  107,  107,  107,  820,
      107,  107,  107,  107,  820,  107,  107,  107,  107,  820,
      107,  703,  701,  820,  107,  107,  107,  107,  702,  107,

      107,  107,  107,  107,  107,  107,  107,  704,  820,  705,
      107,  107,  107,  107,  107,  107,  107,  107,  820,  107,
      820,  706,  820,  707,  107,  820,  107,  107,  107,  107,
      107,  709,  107,  708,  107,  107,  820,  107,  107,  107,
      107,  107,  107,  820,  710,  107,  107,  711,  107,  107,
      107,  712,  107,  107,  820,  107,  107,  820,  107,  107,
      107,  107,  107,  107,  820,  107,  820,  713,  820,  107,
      107,  107,  107,  715,   90,   90,  714,  107,  820,  107,
      107,  820,  107,  106,  107,  820,  107,  107,   90,  107,
      719,  107,  820,  107,  107,  820,  107,  820,  717,  820,

      820,  107,  718,  107,  107,  820,  107,  226,  107,  107,
      107,  107,  716,  820,  107,  820,  107,  820,  107,  721,
      107,  107,  820,  107,  720,  107,  722,  107,  107,  107,
      107,  820,  820,  107,  820,  107,  820,  107,  107,  107,
      723,  107,  820,  107,  724,  107,  820,  107,  820,  726,
      107,  107,  107,  107,  820,  107,  725,  107,  820,  107,
      107,  107,  107,  820,  107,  820,  107,  728,  820,  107,
      820,  107,  820,  820,  107,  727,  107,  107,  107,  107,
      107,  820,  820,  729,  730,  820,  820,  107,  107,  107,
      107,  731,  107,  107,  107,  107,  107,  107,  107,  107,

      820,  820,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  820,  107,  733,  820,  820,
      107,  107,  732,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  820,  107,  107,  734,  107,  107,  107,
      107,  107,  107,  820,  735,  107,  736,  107,  107,  107,
      107,  107,  107,  820,  107,  107,  820,  107,  107,  107,
      107,  107,  107,  820,  107,  738,  737,  107,  820,  107,
      739,  107,  107,  107,  107,  820,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  107,  107,  107,  107,  820,
      741,  740,  107,  820,  107,  107,  107,  742,  107,  107,

      820,  107,  107,  107,  107,  107,  107,  820,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  820,  107,
      107,  107,  107,  107,  107,  820,  746,  107,  107,  107,
      107,  107,  745,  107,  747,  820,  820,  107,  107,  107,
      107,  748,  107,  820,  107,  749,  107,  107,  107,  750,
      820,  107,  107,  107,  107,  820,  107,  751,  752,  820,
      107,  107,  107,  107,  107,  820,  107,  753,  820,  820,
      107,  754,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  820,  107,  107,  107,  107,  820,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  820,

      820,  107,  755,  107,  820,  107,  107,  107,  107,  107,
      107,  107,  107,  757,   90,   90,  820,  763,  820,  107,
      107,  107,  107,  106,  820,  107,  756,  107,   90,  107,
      820,  107,  760,  820,  107,  107,  107,  759,  820,  107,
      107,  107,  107,  762,  107,  820,  107,  226,  820,  107,
      107,  107,  107,  820,  761,  820,  107,  820,  107,  107,
      107,  107,  107,  820,  820,  758,  107,  107,  764,  107,
      107,  820,  107,  766,  107,  820,  107,  107,  765,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  820,  820,
      107,  107,  107,  107,  107,  107,  107,  107,  767,  107,

      107,  107,  107,  820,  107,  820,  107,  820,  820,  107,
      107,  107,  768,  107,  769,  107,  107,  107,  107,  107,
      820,  820,  820,  107,  820,  107,  107,  107,  107,  107,
      770,  107,  771,  107,  107,  107,  107,  107,  820,  820,
      772,  107,  820,  107,  107,  107,  107,  107,  773,  107,
      107,  107,  107,  107,  820,  107,  775,  820,  820,  107,
      107,  107,  107,  107,  820,  107,  774,  107,  107,  107,
      107,  776,  107,  777,  107,  820,  820,  107,  107,  107,
      107,  820,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  780,  107,  107,  820,  107,  107,  107,  107,  107,

      107,  820,  107,  781,  107,  782,  107,  783,  107,  820,
      107,  820,  820,  107,  107,  107,  107,  820,  107,  820,
      107,  784,  107,  107,  107,  107,  107,  785,  107,  107,
      820,  107,  107,  820,  107,  786,  107,  820,  107,  107,
      107,  107,  107,  107,  820,  107,  820,   90,   90,  820,
      107,  820,  107,  107,  820,  787,  106,  107,  107,  107,
      107,   90,  820,  107,  820,  107,  790,  107,  107,  107,
      107,  820,  820,  107,  789,  107,  107,  107,  107,  107,
      226,  107,  107,  107,  107,  820,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  792,  107,  820,  107,  788,

      793,  107,  794,  107,  820,  107,  107,  107,  107,  820,
      107,  107,  107,  107,  820,  107,  795,  796,  820,  107,
      107,  107,  107,  820,  107,  797,  107,  820,  107,  107,
      107,  107,  820,  107,  107,  107,  107,  820,  107,  798,
      107,  820,  107,  107,  107,  107,  107,  107,  107,  107,
      820,  820,  107,  799,  107,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  820,  820,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  802,  107,  107,  107,  107,  820,  107,  107,
      107,  805,  804,  107,  107,  107,  107,   90,   90,  803,

      107,  820,  107,  107,  820,  107,  106,   90,   90,  820,
      107,   90,  107,  107,  820,  107,  106,  107,  820,  107,
      820,   90,  107,  107,  107,  107,  808,  107,  820,  107,
      226,  820,  107,  107,  107,  107,  107,  820,  107,  806,
      226,  107,  107,  107,  107,  807,  107,  107,  107,  107,
      820,  107,  107,  107,  107,  820,  107,  107,  107,  107,
      107,  107,  107,  107,  820,  107,  107,  107,  107,  820,
      107,  107,  107,  107,  107,  107,  107,  107,   90,   90,
       90,   90,  820,  107,  107,  107,  107,  106,  820,  106,
       90,   90,   90,  107,   90,  107,   90,   90,  820,  106,

       90,   90,  820,  820,   90,  106,  820,   90,   90,  106,
       90,  226,  820,  226,   90,  820,  106,  820,   90,   90,
      820,   90,  820,  226,  820,  820,  811,  106,  820,  226,
      820,  812,   90,  226,  820,  820,  820,  814,   90,   90,
      226,   90,   90,  820,  820,  820,  820,  106,  815,  817,
      106,  226,   90,  820,  820,   90,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  818,  820,  820,  820,
      820,  226,  820,  820,  226,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  819,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   89,   89,
       89,  820,  820,   89,   89,   89,   99,   99,   99,  820,
       99,  107,  107,  107,  820,  107,  107,  107,  107,  109,
      820,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  112,  112,  112,  820,  820,  112,  112,  112,  196,

      820,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  202,  202,  820,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  204,  204,  204,  820,  204,  204,  204,
      204,  204,  204,  204,  204,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,   90,
       90,   90,  820,  820,   90,  820,   90,  105,  105,  105,
      820,  105,  105,  820,  105,  108,  108,  108,  820,  108,
      108,  108,  108,  228,  820,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  111,  111,  111,  820,  820,

      111,  820,  111,  226,  226,  226,  820,  226,  226,  820,
      226,  349,  820,  820,  349,  820,  349,  350,  820,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,   15,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820
    } ;

static yyconst flex_int16_t yy_chk[4803] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,    7,    6,
        6,    8,    9,    5,  628,    5,    6,   10,    6,   11,
       11,   12,   12,  839,   13,   13,   14,   14,   17,   66,

       66,   17,  813,   17,   27,   74,   17,   27,   27,   27,
       67,   67,   11,  628,   12,    7,    9,   13,    8,   14,
       28,   10,   28,   28,  810,   28,   28,   28,   69,   69,
       30,   27,   30,   30,   77,   30,   30,   30,   31,   31,
       31,   33,   74,  801,   33,  800,   33,   33,   33,   28,
       37,  197,  197,   37,   37,   37,   99,   38,   38,   99,
       38,  198,  198,   38,   38,   38,   38,  779,   77,  778,
       31,   38,   50,  104,   50,   78,   78,   37,   33,   79,
       79,  203,   50,   50,   50,   41,   41,   38,   41,  744,
       38,   41,   41,   41,   43,   44,   43,   44,   78,   41,

      743,   56,   79,   56,   43,   44,   43,   44,   44,  695,
       43,   56,  693,   56,   44,   41,   42,   42,  203,   42,
       56,  223,   42,   42,   42,   42,  104,   62,  104,   62,
       42,   64,   46,   64,   46,  205,   46,   62,  627,   62,
       62,   64,   46,   64,   46,   51,   42,   51,   46,   42,
      553,   42,   51,   42,   46,   51,  552,   51,   51,  111,
      111,   42,  463,   42,   45,   45,  461,   45,   45,  205,
       45,   45,   45,  111,  223,   45,  223,   45,   45,   45,
      351,   45,   45,  348,   45,  199,  199,   45,   45,   45,
       47,   47,  347,   47,  230,   52,   52,  228,   52,   81,

       81,   47,   48,   47,   48,   48,   52,   47,   52,   52,
       47,  225,   48,   48,   48,   52,  224,   49,   48,   49,
       49,   48,   81,  212,  208,   82,   82,   49,  204,   49,
      218,  218,  218,  202,   49,   49,   49,   49,   53,   53,
      110,   53,   53,   54,   63,   54,   63,   63,   82,   53,
      109,   53,   53,   54,   63,   54,   63,   63,   87,   54,
       54,   83,   54,   55,   55,   84,   55,   55,   84,   80,
       84,   75,   72,   84,   55,   71,   55,   55,   57,   57,
       70,   57,   57,   55,   57,  206,  206,   40,   35,   57,
       25,   57,   57,   58,   58,   58,   58,   58,   15,    0,

       58,   58,    0,   59,   58,   59,   58,   58,  206,    0,
       59,    0,   58,   59,   58,   59,   60,   58,   60,   60,
        0,   61,   61,   60,   61,   59,   60,    0,   60,   61,
        0,    0,   61,    0,   61,    0,   89,    0,   61,   89,
       89,   89,   92,    0,   92,   92,    0,   92,   92,   92,
       93,    0,   93,   93,    0,   93,   93,   93,   94,   94,
       94,    0,   95,   89,   95,   95,   95,   96,    0,   96,
       96,   92,   96,   96,   96,   97,    0,   97,   97,    0,
       97,   97,   97,  100,  100,  100,   98,    0,    0,   98,
       94,   98,   98,   98,    0,  101,   95,  101,  105,  105,

      101,  101,  101,  102,    0,    0,  102,  105,  102,  102,
      102,  103,  105,  103,  103,  100,  103,  103,  103,    0,
      107,    0,  107,   98,  207,  207,    0,  114,    0,  114,
      107,  105,  107,    0,    0,  108,  108,  114,  108,  114,
      102,  108,  108,  108,  108,  112,  112,  207,  112,  108,
        0,  112,  112,  112,  113,    0,  113,  210,  210,  112,
      115,    0,  115,    0,  113,  108,  113,  115,    0,    0,
      115,  113,  115,    0,  115,  112,  116,  117,  116,  117,
      210,  116,    0,  116,    0,    0,  116,  117,  116,  117,
      118,  119,  118,  119,  119,    0,  117,  118,    0,    0,

      118,  119,  118,  119,  119,  120,  121,  120,  121,  122,
        0,  122,  219,  219,  219,  120,  121,  120,  121,  122,
        0,  122,  121,  123,    0,  123,  122,  122,    0,  124,
      124,    0,  124,  123,  125,  123,  125,    0,  125,  123,
      124,  126,  124,  126,  125,    0,  125,    0,  127,  124,
      127,  126,  128,  126,  128,    0,    0,  126,  127,  129,
      127,  129,  128,  128,  128,  127,    0,  127,    0,  129,
        0,  129,  130,  130,    0,  130,    0,  129,  129,  131,
        0,  131,  131,  130,  131,  130,  133,    0,  133,  131,
        0,  131,  132,  132,  132,  132,  133,  134,  133,  134,

        0,    0,  133,  132,  135,  132,  135,  134,    0,  134,
      134,  136,    0,  136,  135,    0,  135,  135,  137,    0,
      137,  136,  137,  136,  138,  139,  138,  139,  137,    0,
      137,  220,  220,  220,  138,  139,  138,  139,  140,    0,
      140,  139,    0,  141,    0,  141,  142,  142,  140,  142,
      140,    0,  140,  141,  143,  141,  143,  142,    0,  142,
      141,  144,    0,  144,  143,  145,  143,  145,  343,  343,
      343,  144,    0,  144,    0,  145,    0,  145,    0,  144,
      146,  146,    0,  146,  146,  147,    0,  147,  146,    0,
        0,  146,  147,  146,  148,  147,  148,  147,  149,    0,

      149,  148,    0,  150,  148,  150,  148,    0,  149,  151,
      149,  151,  151,  150,  150,  150,  152,    0,  152,  151,
      153,  151,  153,    0,    0,  153,  152,  154,  152,  154,
      153,  155,  153,  155,    0,  156,  156,  154,  156,  154,
      157,  155,  157,  155,    0,  158,  156,  158,  156,  159,
      157,  159,  157,    0,  157,  158,    0,  158,  160,  159,
      160,  159,    0,  161,  158,  161,  159,    0,  160,  160,
      160,    0,    0,  161,    0,  161,  162,  163,  162,  163,
      164,  164,  164,  165,  161,  165,  162,  163,  162,  163,
      164,    0,  164,  165,  166,  165,  166,    0,  167,  166,

      167,  165,    0,  168,  166,  168,  166,    0,  167,    0,
      167,    0,    0,  168,  167,  168,  169,  168,  169,  168,
        0,  170,  170,    0,  170,  171,  169,  171,  169,  170,
        0,    0,  170,  169,  170,  171,    0,  171,  172,  172,
      172,    0,  173,  171,  173,  344,  344,  344,  172,  172,
      172,    0,  173,  172,  173,  172,  174,    0,  174,    0,
      175,  177,  175,  177,  211,  211,  174,    0,  174,  174,
      175,  177,  175,  177,  174,    0,    0,  174,  175,  177,
      175,  176,  176,    0,  176,  178,  178,  211,  178,  178,
        0,  179,  176,  179,  176,  180,  178,  180,  178,  178,

      183,  179,  183,  179,    0,  180,    0,  180,  181,  181,
      183,  181,  183,    0,  184,  179,  184,    0,  182,  181,
      182,  181,  181,  182,  184,  184,  184,  185,  182,  185,
      182,  186,  187,  186,  187,    0,  188,  185,  188,  185,
        0,  186,  187,  186,  187,  185,  188,  186,  188,  189,
      190,  189,  190,  191,  188,  191,    0,  190,    0,  189,
      190,  189,  190,  191,    0,  191,  191,  192,  193,  192,
      193,    0,  194,    0,  194,    0,    0,  192,  193,  192,
      193,  193,  194,  192,  194,  195,    0,  195,  214,  194,
      214,  214,  214,  226,  226,  195,    0,  195,  215,    0,

      215,  195,  226,  215,  215,  215,  216,  226,  216,  216,
      216,  217,    0,    0,  217,    0,  217,  217,  217,    0,
      221,    0,  214,  221,    0,  221,  221,  221,  222,    0,
        0,  222,    0,  222,  222,  222,  345,    0,  345,    0,
      216,  345,  345,  345,  346,  346,  346,    0,  217,  229,
      229,    0,  229,  229,  229,  229,  229,  229,  229,  229,
        0,    0,  229,    0,  229,  229,  231,    0,  231,  229,
      229,  229,  229,  229,    0,  232,  231,  232,  231,  231,
        0,    0,    0,  233,  233,  232,  233,  232,    0,    0,
      229,  229,  229,  234,  233,  234,  233,    0,  235,  234,

      235,    0,  236,  234,  236,  234,    0,    0,  235,  241,
      235,  241,  236,  236,  236,  237,    0,  237,  237,  241,
      229,  241,  241,    0,  238,  237,  238,  237,  241,  238,
        0,  237,  239,  239,  238,  239,  238,  240,  240,  240,
      242,    0,  242,  239,  243,  239,  243,  240,    0,  240,
      242,    0,  242,  247,  243,  247,  243,  244,  243,  244,
      242,    0,  244,  247,  245,  247,  245,  244,    0,  244,
      245,    0,  247,    0,  245,  246,  245,  246,  246,  248,
      249,  248,  249,    0,    0,  246,  248,  246,    0,  248,
      249,  248,  249,  250,  251,  250,  251,    0,  249,  252,

      252,    0,  252,  250,  251,  250,  251,    0,    0,  250,
      252,    0,  252,  251,  253,  254,  253,  254,  254,  255,
      256,  255,  256,  256,  253,  254,  253,  254,    0,  255,
      256,  255,  256,  257,    0,  257,  257,  258,  259,  258,
      259,    0,  261,  257,  261,  257,    0,  258,  259,  258,
      259,  260,  261,  260,  261,  262,  260,  262,  263,    0,
      263,  260,    0,  260,    0,  262,    0,  262,  263,    0,
      263,  264,  264,  265,  264,  265,  263,  268,  265,  268,
      268,    0,  264,    0,  264,    0,  266,  268,  266,  268,
      265,  265,    0,  265,    0,  267,  266,  267,  266,    0,

        0,  265,  266,  265,    0,  267,  269,  267,  269,    0,
      270,  267,  270,  269,    0,  271,  269,  271,  269,  272,
      270,  272,  270,    0,  270,  271,    0,  271,  271,  272,
      273,  272,  273,  274,  275,  274,  275,  272,    0,    0,
      273,  273,  273,  274,  275,  274,  275,  276,  277,  276,
      277,  276,    0,  278,    0,  278,  278,  276,  277,  276,
      277,    0,  277,  278,  279,  278,  279,  280,  281,  280,
      281,    0,    0,  281,  279,    0,  279,  280,  281,  280,
      281,  282,  283,  282,  283,  284,  285,  284,  285,  289,
        0,  282,  283,  282,  283,  284,  285,  284,  285,  286,

      287,  286,  287,  287,  288,  290,  288,  290,    0,  286,
      287,  286,  287,    0,  288,  290,  288,  290,  296,  291,
      296,  291,  290,  289,  293,  289,  291,  289,  296,  291,
      296,  291,    0,  289,  292,  289,  292,  292,    0,    0,
      293,    0,  293,    0,  292,  294,  292,  294,  294,    0,
      293,  295,  293,  295,  295,  294,  297,  294,  297,    0,
        0,  295,  298,  295,  298,  298,  297,  299,  297,  299,
      297,    0,  298,  300,  298,  300,    0,  300,  299,    0,
      301,  299,  301,  300,  302,  300,  302,  299,    0,  299,
      301,    0,  301,    0,  302,    0,  302,  299,  303,  299,

      303,    0,  305,  301,  305,  304,    0,  304,  303,    0,
      303,  304,  305,    0,  305,  304,  303,  304,  306,  307,
      306,  307,  307,  308,    0,  308,    0,    0,  306,  307,
      306,  307,  309,  308,  309,  308,  306,  310,    0,  310,
        0,  308,  309,    0,  309,  311,  311,  310,  311,  310,
      310,  312,  313,  312,  313,  313,  311,  314,  311,  314,
        0,  312,  313,  312,  313,    0,  315,  314,  315,  314,
      312,    0,  316,  316,    0,  316,  315,  317,  315,  317,
      318,    0,  318,  316,  315,  316,    0,  317,    0,  317,
      318,    0,  318,  319,  317,  319,  319,    0,  320,  318,

      320,    0,  321,  319,  321,  319,    0,  322,  320,  322,
      320,  324,  321,  324,  321,  323,  323,  322,  323,  322,
        0,  324,    0,  324,    0,    0,  323,  325,  323,  325,
      325,  326,  324,  326,  327,    0,  327,  325,  326,  325,
        0,  326,    0,  326,  327,  328,  327,  328,    0,    0,
      327,    0,  329,    0,  329,  328,  329,  328,  331,  328,
      331,  331,  329,    0,  329,  330,  330,  330,  331,  332,
      331,  332,  333,  332,  333,  330,    0,  330,    0,  332,
        0,  332,  333,  334,  333,  334,  334,    0,    0,  333,
      335,  335,  335,  334,  336,  334,  336,  337,    0,  337,

      335,  338,  335,  338,  336,    0,  336,  337,    0,  337,
        0,  338,  336,  338,  339,  337,  339,  338,  340,    0,
      340,  339,    0,  341,  339,  341,  339,    0,  340,  342,
      340,  342,    0,  341,  340,  341,  342,    0,    0,  342,
        0,  342,  350,  350,    0,  350,  350,  350,  350,  350,
      350,  350,  350,    0,    0,  350,    0,  350,  350,  352,
        0,  352,  350,  350,  350,  350,  350,    0,    0,  352,
      353,  352,  353,    0,    0,  354,  354,    0,  354,    0,
      353,    0,  353,  350,  350,  350,  354,  353,  354,  355,
        0,  355,  355,  356,  356,  357,  356,  357,  358,  355,

      358,  355,    0,    0,  356,  357,  356,  357,  358,  359,
      358,  359,  360,  350,  360,  359,    0,    0,    0,  359,
        0,  359,  360,  361,  360,  361,    0,  362,  360,  362,
        0,    0,  361,  361,  363,  361,  363,  362,  364,  362,
      364,  364,    0,  362,  363,  363,  363,  365,  364,  365,
      364,  367,  366,  365,  366,    0,    0,  365,    0,  365,
        0,  368,  366,  368,  366,    0,  372,  372,  367,  372,
      367,  368,  369,  368,  369,  369,    0,  372,  367,  372,
      367,  370,  369,  370,  369,  371,  370,  371,  371,    0,
      374,  370,  374,  370,  373,  371,  373,  371,    0,  373,

      374,  376,  374,  376,  373,  375,  373,  375,  375,  374,
      377,  376,  377,  376,  378,  375,  378,  375,    0,  379,
      377,  379,  377,    0,  378,  380,  378,  380,  380,  379,
      381,  379,  381,    0,  382,  380,  382,  380,    0,  383,
      381,  383,  381,  384,  382,  384,  382,    0,    0,  383,
      385,  383,  385,  384,  386,  384,  386,    0,  383,    0,
      385,  388,  385,  388,  386,  387,  386,  387,  387,    0,
        0,  388,    0,  388,  389,  387,  389,  387,  390,  388,
      390,  389,    0,    0,  389,  390,  389,  393,  390,  393,
      390,  391,  391,  391,  392,    0,  392,  393,    0,  393,

      393,  391,    0,  391,  392,  394,  392,  394,  392,    0,
      396,    0,  396,  396,  395,  394,  395,  394,    0,  395,
      396,  394,  396,  397,  395,  397,  395,  398,    0,  398,
        0,    0,  399,  397,  399,  397,    0,  398,  399,  398,
      397,  400,  399,  400,  399,  401,  402,  401,  402,    0,
        0,  400,    0,  400,    0,  401,  402,  401,  402,  402,
      403,  404,  403,  404,    0,  405,  403,  405,    0,  405,
      403,  404,  403,  404,  404,  405,  406,  405,  406,  407,
      408,  407,    0,  408,  408,  408,  406,    0,  406,  407,
      409,  407,  409,  410,    0,  410,  410,    0,    0,    0,

      409,    0,  409,  410,  412,  410,  412,  408,  411,  411,
      411,  413,    0,  413,  412,  414,  412,  414,  411,    0,
      411,  413,  415,  413,  415,  414,    0,  414,    0,  416,
        0,  416,  415,    0,  415,  418,    0,  418,  415,  416,
        0,  416,  416,  417,  417,  418,  417,  418,  420,    0,
      420,    0,  419,    0,  419,    0,  422,    0,  420,    0,
      420,  417,  419,  417,  419,  419,  420,  421,    0,  421,
      423,  417,  423,  417,  421,    0,  422,  421,  422,  421,
      423,    0,  423,  423,    0,  424,  422,  424,  422,  425,
      424,  425,  426,    0,  426,  424,  427,  424,  427,  425,

        0,  425,  426,  427,  426,  428,  427,  428,  427,  429,
      430,  429,  430,    0,  431,  428,  431,  428,    0,  429,
      430,  429,  430,    0,  431,  432,  431,  432,    0,    0,
      434,  433,  434,  433,  431,  432,  432,  432,  433,  435,
      434,  433,  434,  433,  436,  437,  436,  437,  434,  435,
        0,  435,    0,    0,  436,  437,  436,  437,  438,  435,
      438,  435,  436,  439,    0,  439,    0,    0,  438,  440,
      438,  440,  440,  439,  438,  439,  441,    0,  441,  440,
      442,  440,  442,  443,    0,  443,  441,    0,  441,  441,
      442,    0,  442,  443,    0,  443,  442,  444,  445,  444,

      445,  446,  447,  446,  448,    0,  448,  444,  445,  444,
      445,  446,    0,  446,  448,    0,  448,  449,    0,  446,
      451,  447,  451,  447,  450,  449,    0,  450,  449,    0,
      451,  447,  451,  447,    0,    0,  449,  452,  449,  452,
      450,  453,  450,  453,  452,    0,  449,  452,  449,  452,
      450,  453,  450,  453,  453,  454,  455,  454,  455,    0,
        0,  454,  455,    0,    0,  454,  455,  454,  455,  456,
        0,  456,  456,  457,    0,  457,  459,    0,  459,  456,
        0,  456,  458,  457,  458,  457,  459,  458,  459,    0,
        0,  460,  458,  460,  458,  464,  460,  464,  465,    0,

      465,  460,    0,  460,    0,  464,    0,  464,  465,  466,
      465,  466,    0,  467,  464,  467,  468,    0,  468,  466,
      469,  466,  469,  467,    0,  467,  468,  470,  468,  470,
      469,  471,  469,  471,  468,    0,    0,  470,  469,  470,
      472,  471,  472,  471,  473,    0,  473,  472,    0,  474,
      472,  474,  472,    0,  473,    0,  473,  475,  475,  474,
      475,  474,  476,    0,  476,  476,    0,  477,  475,  477,
      475,  478,  476,  478,  476,    0,  479,  477,  479,  477,
      477,  478,  479,  478,    0,  480,  479,  480,  479,  481,
      482,  481,  482,    0,  483,  480,  483,  480,    0,  481,

      482,  481,  482,  484,  483,  484,  483,  481,  485,  486,
      485,  486,  486,  484,  487,  484,  487,    0,  485,  486,
      485,  486,    0,    0,  487,  485,  487,  488,  489,  488,
      489,  489,  490,    0,  490,    0,    0,  488,  489,  488,
      489,    0,  490,  488,  490,  490,  491,    0,  491,  492,
      492,    0,  492,    0,    0,    0,  491,    0,  491,  493,
      492,  493,  492,  494,  491,  494,  493,    0,  494,  493,
        0,  493,  495,  494,  495,  494,  496,  495,  496,  497,
        0,  497,  495,  498,  495,  498,  496,    0,  496,  497,
      499,  497,  499,  498,  496,  498,  497,    0,    0,  498,

      499,  500,  499,  500,  501,  505,  501,    0,  499,    0,
        0,  500,    0,  500,  501,    0,  501,  500,  502,  502,
      502,  503,  504,  503,  504,    0,    0,    0,  502,    0,
      502,  503,  504,  503,  504,    0,  506,  505,  506,  505,
      507,  508,  507,  508,    0,    0,  506,  505,  506,  505,
      507,  508,  507,  508,  506,  509,  509,    0,    0,  509,
      509,  510,    0,  510,    0,  509,  511,    0,  511,  511,
        0,  510,  509,  510,  509,  512,  511,  512,  511,  513,
        0,  513,  509,  510,  509,  512,  514,  512,  514,  513,
        0,  513,  516,    0,  516,  513,  514,    0,  514,  514,

      515,  515,  516,  515,  516,  516,  517,  518,  517,  518,
        0,  515,  519,  515,  519,    0,  517,  518,  517,  518,
      517,  520,  519,  520,  519,    0,  521,  522,  521,  522,
        0,  520,  523,  520,  523,  519,  521,  522,  521,  522,
        0,    0,  523,  522,  523,  523,  524,  525,  524,  525,
      525,  526,  528,  526,  526,    0,  524,  525,  524,  525,
      527,  526,  527,  526,  524,    0,  529,  529,    0,  529,
      527,  528,  527,  528,    0,    0,  527,  529,  532,  529,
      532,  528,  530,  528,  530,  530,  531,  531,  532,  531,
      532,  533,  530,  533,  530,  536,  534,  531,  534,  531,

        0,  533,    0,  533,    0,  535,  534,  535,  534,    0,
        0,    0,  533,    0,  536,  535,  536,  535,  537,    0,
      537,  537,    0,  538,  536,  538,  536,  539,  537,  539,
      537,    0,  540,  538,  540,  538,  538,  539,  541,  539,
      541,  545,  540,    0,  540,  540,  544,  539,  541,  542,
      541,  542,  542,  543,    0,  543,    0,  547,  544,  542,
      544,  542,  546,  543,  546,  543,  543,    0,  544,    0,
      544,    0,  546,    0,  546,  545,  547,  545,  547,  548,
        0,  548,  548,    0,    0,  545,  547,  545,  547,  548,
      549,  548,  549,  550,    0,  550,  550,  549,    0,  551,

      549,  551,  549,  550,    0,  550,  551,    0,  554,  551,
      554,  551,  555,  556,  555,  556,    0,    0,  554,  555,
      554,    0,  555,  556,  555,  556,  554,  557,  558,  557,
      558,  559,  560,  559,  560,    0,    0,  557,  558,  557,
      558,  559,  560,  559,  560,  558,  561,  562,  561,  562,
        0,  557,    0,    0,    0,    0,  561,  562,  561,  562,
      563,  564,  563,  564,  561,  562,  565,  563,  565,    0,
      563,  564,  563,  564,  567,  566,  565,  566,  565,  564,
      568,  568,  566,  568,    0,  566,  569,  566,  569,    0,
        0,  568,  567,  568,  567,    0,  569,    0,  569,  570,

      570,  570,  567,  571,  567,  571,  571,    0,  572,  570,
      572,  570,  573,  571,  573,  571,    0,    0,  572,  574,
      572,  574,  573,    0,  573,  573,  574,    0,  572,  574,
      575,  574,  575,  576,    0,  576,  577,  575,  577,  577,
      575,    0,  575,  576,    0,  576,  577,  578,  577,  578,
      579,    0,  579,  580,  580,    0,  580,  578,    0,  578,
      579,    0,  579,    0,  580,  578,  580,  581,    0,  581,
      581,  582,    0,  582,    0,  583,  583,  581,  584,  581,
      584,  582,    0,  582,  583,  763,  763,  582,  584,  583,
      584,  585,    0,  585,  763,  586,    0,  586,    0,  763,

        0,  585,    0,  585,  585,  586,    0,  586,  583,  587,
        0,  587,  587,  588,    0,  588,    0,    0,  763,  587,
        0,  587,  589,  588,  589,  588,  588,  590,    0,  590,
      583,  591,  589,  591,  589,    0,  589,  590,  590,  590,
      763,  591,  591,  591,  592,  593,  592,  593,  594,  595,
      594,  595,    0,    0,  592,  593,  592,  593,  594,  595,
      594,  595,  592,    0,  593,  595,  594,  596,  597,  596,
      597,    0,  598,  596,  598,    0,    0,  596,  597,  596,
      597,  597,  598,  599,  598,  599,  600,  602,  600,  602,
        0,    0,  601,  599,  601,  599,  600,  602,  600,  602,

      600,  599,  601,  601,  601,  603,  604,  603,  604,  605,
      606,  605,  606,  606,    0,  603,  604,  603,  604,  605,
      606,  605,  606,  607,    0,  607,  607,  608,  603,  608,
      609,    0,  609,  607,    0,  607,    0,  608,    0,  608,
      609,    0,  609,    0,    0,  608,  610,  611,  610,  611,
        0,    0,  609,  609,  609,    0,  610,  611,  610,  611,
      612,    0,  612,  612,  610,  613,  614,  613,  614,    0,
      612,  615,  612,  615,  615,  613,  614,  613,  614,    0,
      616,  615,  616,  615,  614,  617,    0,  617,  618,  618,
      616,  618,  616,    0,  616,  617,  619,  617,  619,  618,

        0,  618,    0,  617,  620,  620,  619,  620,  619,  621,
        0,    0,  621,  621,  621,  620,  622,  620,  622,  622,
      624,  623,  624,  623,    0,    0,  622,    0,  622,    0,
      624,  623,  624,  623,    0,    0,  621,  623,  625,  626,
      625,  626,    0,  629,    0,  629,  629,    0,  625,  626,
      625,  626,    0,  629,  625,  629,  630,    0,  630,  634,
      631,    0,  631,  631,    0,  633,  630,  633,  630,  630,
      631,  632,  631,  632,  632,  633,  634,  633,  634,    0,
      635,  632,  635,  632,    0,  636,  634,  636,  634,    0,
      635,  637,  635,    0,  638,  636,  638,  636,  636,  639,

      637,  639,  637,  640,  638,  640,  638,  638,    0,  639,
      637,  639,  637,  640,  641,  640,  641,  642,    0,  642,
        0,  640,    0,  641,  641,    0,  641,  642,  643,  642,
      643,  643,  644,  642,  644,  645,    0,  645,  643,  646,
      643,  646,  644,    0,  644,  645,  647,  645,  647,  646,
      648,  646,  648,  649,    0,  649,  647,    0,  647,  650,
      648,  650,  648,  649,    0,  649,    0,  649,    0,  650,
      651,  650,  651,  651,  652,  652,  650,  653,    0,  653,
      651,    0,  651,  652,  654,    0,  654,  653,  652,  653,
      655,  655,    0,  655,  654,    0,  654,    0,  653,    0,

        0,  655,  654,  655,  656,    0,  656,  652,  657,  658,
      657,  658,  652,    0,  656,    0,  656,    0,  657,  658,
      657,  658,    0,  659,  656,  659,  659,  660,  661,  660,
      661,    0,    0,  659,    0,  659,    0,  660,  661,  660,
      661,  662,    0,  662,  662,  663,    0,  663,    0,  664,
      664,  662,  664,  662,    0,  663,  663,  663,    0,  665,
      664,  665,  664,    0,  666,    0,  666,  666,    0,  665,
        0,  665,    0,    0,  666,  665,  666,  667,  668,  667,
      668,    0,    0,  667,  668,    0,    0,  667,  668,  667,
      668,  669,  669,  670,  669,  670,  671,  672,  671,  672,

        0,    0,  669,  670,  669,  670,  671,  672,  671,  672,
      673,  674,  673,  674,  675,    0,  675,  674,    0,    0,
      673,  674,  673,  674,  675,  676,  675,  676,  677,  678,
      677,  678,  679,    0,  679,  676,  678,  676,  677,  678,
      677,  678,  679,    0,  679,  680,  680,  680,  681,  682,
      681,  682,  683,    0,  683,  680,    0,  680,  681,  682,
      681,  682,  683,    0,  683,  682,  681,  684,    0,  684,
      684,  685,  686,  685,  686,    0,  687,  684,  687,  684,
        0,  685,  686,  685,  686,  688,  687,  688,  687,    0,
      687,  685,  689,    0,  689,  688,  690,  688,  690,  691,

        0,  691,  689,  692,  689,  692,  690,    0,  690,  691,
      696,  691,  696,  692,  697,  692,  697,  698,    0,  698,
      696,  699,  696,  699,  697,    0,  697,  698,  700,  698,
      700,  699,  696,  699,  698,    0,    0,  702,  700,  702,
      700,  700,  701,    0,  701,  701,  704,  702,  704,  702,
        0,  703,  701,  703,  701,    0,  704,  703,  704,    0,
      705,  703,  705,  703,  706,    0,  706,  705,    0,    0,
      705,  706,  705,  707,  706,  707,  706,  708,  709,  708,
      709,    0,  710,  707,  710,  707,    0,  708,  709,  708,
      709,  711,  710,  711,  710,  712,  713,  712,  713,    0,

        0,  711,  713,  711,    0,  712,  713,  712,  713,  714,
      715,  714,  715,  715,  716,  716,    0,  721,    0,  714,
      715,  714,  715,  716,    0,  717,  714,  717,  716,  718,
        0,  718,  718,    0,  719,  717,  719,  717,    0,  718,
      720,  718,  720,  720,  719,    0,  719,  716,    0,  721,
      720,  721,  720,    0,  719,    0,  722,    0,  722,  721,
      723,  721,  723,    0,    0,  716,  722,  724,  722,  724,
      723,    0,  723,  725,  725,    0,  725,  724,  723,  724,
      726,  727,  726,  727,  725,  728,  725,  728,    0,    0,
      726,  727,  726,  727,  729,  728,  729,  728,  730,  730,

      731,  730,  731,    0,  729,    0,  729,    0,    0,  730,
      731,  730,  731,  732,  732,  732,  733,  734,  733,  734,
        0,    0,    0,  732,    0,  732,  733,  734,  733,  734,
      734,  735,  735,  735,  736,  737,  736,  737,    0,    0,
      736,  735,    0,  735,  736,  737,  736,  737,  737,  738,
      739,  738,  739,  740,    0,  740,  740,    0,    0,  738,
      739,  738,  739,  740,    0,  740,  739,  741,  745,  741,
      745,  741,  742,  742,  742,    0,    0,  741,  745,  741,
      745,    0,  742,  746,  742,  746,  747,  748,  747,  748,
      749,  745,  749,  746,    0,  746,  747,  748,  747,  748,

      749,    0,  749,  747,  750,  748,  750,  749,  751,    0,
      751,    0,    0,  752,  750,  752,  750,    0,  751,    0,
      751,  751,  754,  752,  754,  752,  753,  753,  753,  755,
        0,  755,  754,    0,  754,  754,  753,    0,  753,  755,
      756,  755,  756,  757,    0,  757,    0,  758,  758,    0,
      756,    0,  756,  757,    0,  757,  758,  759,  760,  759,
      760,  758,    0,  761,    0,  761,  761,  759,  760,  759,
      760,    0,    0,  761,  760,  761,  762,  764,  762,  764,
      758,  765,  766,  765,  766,    0,  762,  764,  762,  764,
        0,  765,  766,  765,  766,  764,  767,    0,  767,  758,

      766,  768,  768,  768,    0,  770,  767,  770,  767,    0,
      769,  768,  769,  768,    0,  770,  769,  770,    0,  771,
      769,  771,  769,    0,  772,  771,  772,    0,  773,  771,
      773,  771,    0,  774,  772,  774,  772,    0,  773,  773,
      773,    0,  775,  774,  775,  774,  776,  777,  776,  777,
        0,    0,  775,  777,  775,    0,  776,  777,  776,  777,
      780,  781,  780,  781,  782,  783,  782,  783,    0,    0,
      780,  781,  780,  781,  782,  783,  782,  783,  784,  786,
      784,  786,  783,  785,  787,  785,  787,    0,  784,  786,
      784,  786,  785,  785,  787,  785,  787,  788,  788,  784,

      789,    0,  789,  790,    0,  790,  788,  791,  791,    0,
      789,  788,  789,  790,    0,  790,  791,  792,    0,  792,
        0,  791,  793,  794,  793,  794,  794,  792,    0,  792,
      788,    0,  793,  794,  793,  794,  795,    0,  795,  788,
      791,  796,  797,  796,  797,  791,  795,  798,  795,  798,
        0,  796,  797,  796,  797,    0,  799,  798,  799,  798,
      802,  803,  802,  803,    0,  804,  799,  804,  799,    0,
      802,  803,  802,  803,  805,  804,  805,  804,  806,  806,
      807,  807,    0,  808,  805,  808,  805,  806,    0,  807,
      811,  811,  806,  808,  807,  808,  812,  812,    0,  811,

      814,  814,    0,    0,  811,  812,    0,  815,  815,  814,
      812,  806,    0,  807,  814,    0,  815,    0,  817,  817,
        0,  815,    0,  811,    0,    0,  806,  817,    0,  812,
        0,  807,  817,  814,    0,    0,    0,  811,  818,  818,
      815,  819,  819,    0,    0,    0,    0,  818,  812,  815,
      819,  817,  818,    0,    0,  819,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  817,    0,    0,    0,
        0,  818,    0,    0,  819,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  818,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  822,  822,

      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  827,  827,
      827,    0,    0,  827,  827,  827,  828,  828,  828,    0,
      828,  829,  829,  829,    0,  829,  829,  829,  829,  830,
        0,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  831,  831,  831,    0,    0,  831,  831,  831,  832,

        0,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  833,  833,    0,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  834,  834,  834,    0,  834,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  836,  836,  836,  837,
      837,  837,    0,    0,  837,    0,  837,  838,  838,  838,
        0,  838,  838,    0,  838,  840,  840,  840,    0,  840,
      840,  840,  840,  841,    0,  841,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  842,  842,  842,    0,    0,

      842,    0,  842,  843,  843,  843,    0,  843,  843,    0,
      843,  844,    0,    0,  844,    0,  844,  845,    0,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  845,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,

      820,  820
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[206] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 
    0, 0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ITL.l"
#line 10 "ITL.l"

//#include <stdio.h>
#include <iostream>
#include "IMessage.h"
#include "ITLparser.h"
#include "ITLparse.hpp"

using namespace std;

#define YY_EXTRA_TYPE inscore::ITLparser*
#define YY_USER_ACTION yylloc->last_line = yylineno; yylloc->first_column += strlen(yytext);

#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

static int nested;

#define YY_NO_UNISTD_H
// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------







#line 1850 "ITLlex.cpp"

#define INITIAL 0
#define CMNTLN 1
#define COMMENT 2
#define DQSTR 3
#define QSTR 4
#define LUASECTION 5
#define JSECTION 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int ITLlex_init (yyscan_t* scanner);

int ITLlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ITLlex_destroy (yyscan_t yyscanner );

int ITLget_debug (yyscan_t yyscanner );

void ITLset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ITLget_extra (yyscan_t yyscanner );

void ITLset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ITLget_in (yyscan_t yyscanner );

void ITLset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ITLget_out (yyscan_t yyscanner );

void ITLset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t ITLget_leng (yyscan_t yyscanner );

char *ITLget_text (yyscan_t yyscanner );

int ITLget_lineno (yyscan_t yyscanner );

void ITLset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * ITLget_lval (yyscan_t yyscanner );

void ITLset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *ITLget_lloc (yyscan_t yyscanner );
    
        void ITLset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ITLwrap (yyscan_t yyscanner );
#else
extern int ITLwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ITLlex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int ITLlex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 77 "ITL.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 2101 "ITLlex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ITLensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		ITL_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = yyg->yy_c_buf_p - yyg->yytext_ptr;
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 821 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 820 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = yyg->yy_more_len; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 82 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "ITL.l"
yyextra->fInt = atoi(yytext); return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 86 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
/* ----------------------------------------- */
/*	basic delimiters and markers */
/* ----------------------------------------- */
case 7:
YY_RULE_SETUP
#line 93 "ITL.l"
return EQUAL;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "ITL.l"
return LPAR;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "ITL.l"
return RPAR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "ITL.l"
return SEP;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "ITL.l"
return PATHSEP;			/* OSC address and path separator */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "ITL.l"
return ENDEXPR;			/* end of expression */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 99 "ITL.l"
return VARSTART;
	YY_BREAK
/* ----------------------------------------- */
/*	application messages */
/* ----------------------------------------- */
case 14:
YY_RULE_SETUP
#line 104 "ITL.l"
yyextra->fText = yytext; return HELLO;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 105 "ITL.l"
yyextra->fText = yytext; return LOAD;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 106 "ITL.l"
yyextra->fText = yytext; return REQUIRE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 107 "ITL.l"
yyextra->fText = yytext; return QUIT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 108 "ITL.l"
yyextra->fText = yytext; return MOUSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 109 "ITL.l"
yyextra->fText = yytext; return ROOTPATH;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 110 "ITL.l"
yyextra->fText = yytext; return DEFAULTSHOW;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "ITL.l"
yyextra->fText = yytext; return PORT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "ITL.l"
yyextra->fText = yytext; return OUTPORT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "ITL.l"
yyextra->fText = yytext; return ERRPORT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "ITL.l"
yyextra->fText = yytext; return RATE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 117 "ITL.l"
yyextra->fText = yytext; return STARTBENCH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 118 "ITL.l"
yyextra->fText = yytext; return STOPBENCH;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 119 "ITL.l"
yyextra->fText = yytext; return RESETBENCH;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 120 "ITL.l"
yyextra->fText = yytext; return WRITEBENCH;
	YY_BREAK
/* ----------------------------------------- */
/*	boolean */
/* ----------------------------------------- */
case 29:
YY_RULE_SETUP
#line 125 "ITL.l"
yyextra->fText = yytext; return YES;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 126 "ITL.l"
yyextra->fText = yytext; return NO;
	YY_BREAK
/* ----------------------------------------- */
/*	application vnode (debug) */
/* ----------------------------------------- */
case 31:
YY_RULE_SETUP
#line 131 "ITL.l"
yyextra->fText = yytext; return OSCDBG;
	YY_BREAK
/* ----------------------------------------- */
/*	(file) watcher messages (should become obsolete) */
/* ----------------------------------------- */
case 32:
YY_RULE_SETUP
#line 136 "ITL.l"
yyextra->fText = yytext; return ADD;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 137 "ITL.l"
yyextra->fText = yytext; return REMOVE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 138 "ITL.l"
yyextra->fText = yytext; return CLEAR;
	YY_BREAK
/* ----------------------------------------- */
/*	mapping messages */
/* ----------------------------------------- */
case 35:
YY_RULE_SETUP
#line 143 "ITL.l"
yyextra->fText = yytext; return MAP;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 144 "ITL.l"
yyextra->fText = yytext; return MAPPLUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 145 "ITL.l"
yyextra->fText = yytext; return MAPFILE;
	YY_BREAK
/* ----------------------------------------- */
/*	IGrid messages */
/* ----------------------------------------- */
case 38:
YY_RULE_SETUP
#line 151 "ITL.l"
yyextra->fText = yytext; return COLUMNS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "ITL.l"
yyextra->fText = yytext; return ROWS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 153 "ITL.l"
yyextra->fText = yytext; return XBORDER;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "ITL.l"
yyextra->fText = yytext; return YBORDER;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "ITL.l"
yyextra->fText = yytext; return ORDER;
	YY_BREAK
/* ----------------------------------------- */
/* guido specific messages */
/* ----------------------------------------- */
case 43:
YY_RULE_SETUP
#line 160 "ITL.l"
yyextra->fText = yytext; return PAGE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 161 "ITL.l"
yyextra->fText = yytext; return DPAGE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 162 "ITL.l"
yyextra->fText = yytext; return PAGEFORMAT;
	YY_BREAK
/* ----------------------------------------- */
/*	common messages */
/* ----------------------------------------- */
case 46:
YY_RULE_SETUP
#line 168 "ITL.l"
yyextra->fText = yytext; return ALIAS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 169 "ITL.l"
yyextra->fText = yytext; return SET;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 170 "ITL.l"
yyextra->fText = yytext; return GET;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 171 "ITL.l"
yyextra->fText = yytext; return DEL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 172 "ITL.l"
yyextra->fText = yytext; return EXPORT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 173 "ITL.l"
yyextra->fText = yytext; return RENAME;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 174 "ITL.l"
yyextra->fText = yytext; return SAVE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 175 "ITL.l"
yyextra->fText = yytext; return WATCH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 176 "ITL.l"
yyextra->fText = yytext; return WATCHPLUS;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 177 "ITL.l"
yyextra->fText = yytext; return PUSH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "ITL.l"
yyextra->fText = yytext; return POP;
	YY_BREAK
/* ----------------------------------------- */
/*	common color messages */
/* ----------------------------------------- */
case 57:
YY_RULE_SETUP
#line 183 "ITL.l"
yyextra->fText = yytext; return RGB;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 184 "ITL.l"
yyextra->fText = yytext; return RED;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 185 "ITL.l"
yyextra->fText = yytext; return GREEN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 186 "ITL.l"
yyextra->fText = yytext; return BLUE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 187 "ITL.l"
yyextra->fText = yytext; return ALPHA;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 188 "ITL.l"
yyextra->fText = yytext; return HSB;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 189 "ITL.l"
yyextra->fText = yytext; return HUE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 190 "ITL.l"
yyextra->fText = yytext; return SATURATION;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 191 "ITL.l"
yyextra->fText = yytext; return BRIGHTNESS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 192 "ITL.l"
yyextra->fText = yytext; return DRGB;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 193 "ITL.l"
yyextra->fText = yytext; return DRED;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 194 "ITL.l"
yyextra->fText = yytext; return DGREEN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 195 "ITL.l"
yyextra->fText = yytext; return DBLUE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 196 "ITL.l"
yyextra->fText = yytext; return DALPHA;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 197 "ITL.l"
yyextra->fText = yytext; return DHSB;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 198 "ITL.l"
yyextra->fText = yytext; return DHUE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 199 "ITL.l"
yyextra->fText = yytext; return DSATURATION;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 200 "ITL.l"
yyextra->fText = yytext; return DBRIGHTNESS;
	YY_BREAK
/* ----------------------------------------- */
/*	common position messages */
/* ----------------------------------------- */
case 75:
YY_RULE_SETUP
#line 205 "ITL.l"
yyextra->fText = yytext; return X;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 206 "ITL.l"
yyextra->fText = yytext; return Y;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 207 "ITL.l"
yyextra->fText = yytext; return Z;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 208 "ITL.l"
yyextra->fText = yytext; return ANGLE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 209 "ITL.l"
yyextra->fText = yytext; return SCALE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 210 "ITL.l"
yyextra->fText = yytext; return XORIGIN;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 211 "ITL.l"
yyextra->fText = yytext; return YORIGIN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 212 "ITL.l"
yyextra->fText = yytext; return DX;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 213 "ITL.l"
yyextra->fText = yytext; return DY;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 214 "ITL.l"
yyextra->fText = yytext; return DZ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 215 "ITL.l"
yyextra->fText = yytext; return DANGLE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 216 "ITL.l"
yyextra->fText = yytext; return DSCALE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 217 "ITL.l"
yyextra->fText = yytext; return DXORIGIN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 218 "ITL.l"
yyextra->fText = yytext; return DYORIGIN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 220 "ITL.l"
yyextra->fText = yytext; return SHEAR;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 221 "ITL.l"
yyextra->fText = yytext; return ROTATEX;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 222 "ITL.l"
yyextra->fText = yytext; return ROTATEY;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "ITL.l"
yyextra->fText = yytext; return ROTATEZ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 224 "ITL.l"
yyextra->fText = yytext; return SHOW;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 225 "ITL.l"
yyextra->fText = yytext; return EFFECT;
	YY_BREAK
/* ----------------------------------------- */
/*	common date messages */
/* ----------------------------------------- */
case 95:
YY_RULE_SETUP
#line 230 "ITL.l"
yyextra->fText = yytext; return DATE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 231 "ITL.l"
yyextra->fText = yytext; return DURATION;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 232 "ITL.l"
yyextra->fText = yytext; return DDATE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 233 "ITL.l"
yyextra->fText = yytext; return DDURATION;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 234 "ITL.l"
yyextra->fText = yytext; return CLOCK;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 235 "ITL.l"
yyextra->fText = yytext; return DURCLOCK;
	YY_BREAK
/* ----------------------------------------- */
/*	common debug messages */
/* ----------------------------------------- */
case 101:
YY_RULE_SETUP
#line 240 "ITL.l"
yyextra->fText = yytext; return NAME;
	YY_BREAK
/* ----------------------------------------- */
/*	common rect shaped messages */
/* ----------------------------------------- */
case 102:
YY_RULE_SETUP
#line 245 "ITL.l"
yyextra->fText = yytext; return WIDTH;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 246 "ITL.l"
yyextra->fText = yytext; return HEIGHT;
	YY_BREAK
/* ----------------------------------------- */
/*	common shape messages */
/* ----------------------------------------- */
case 104:
YY_RULE_SETUP
#line 251 "ITL.l"
yyextra->fText = yytext; return PENCOLOR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 252 "ITL.l"
yyextra->fText = yytext; return PENALPHA;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 253 "ITL.l"
yyextra->fText = yytext; return PENDALPHA
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 254 "ITL.l"
yyextra->fText = yytext; return PENWIDTH;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 255 "ITL.l"
yyextra->fText = yytext; return PENSTYLE;
	YY_BREAK
/* ----------------------------------------- */
/*	scene messages */
/* ----------------------------------------- */
case 109:
YY_RULE_SETUP
#line 260 "ITL.l"
yyextra->fText = yytext; return NEW;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 261 "ITL.l"
yyextra->fText = yytext; return RESET;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 262 "ITL.l"
yyextra->fText = yytext; return FULLSCREEN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 263 "ITL.l"
yyextra->fText = yytext; return FRAMELESS;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 264 "ITL.l"
yyextra->fText = yytext; return ABSOLUTEXY;
	YY_BREAK
/* ----------------------------------------- */
/*	sync node messages */
/* ----------------------------------------- */
case 114:
YY_RULE_SETUP
#line 269 "ITL.l"
yyextra->fText = yytext; return WILDCARD;
	YY_BREAK
/* ----------------------------------------- */
/*	signals messages */
/* ----------------------------------------- */
case 115:
YY_RULE_SETUP
#line 274 "ITL.l"
yyextra->fText = yytext; return DEFAULT;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 275 "ITL.l"
yyextra->fText = yytext; return SIZE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 276 "ITL.l"
yyextra->fText = yytext; return SIGSELECT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 277 "ITL.l"
yyextra->fText = yytext; return SIGSELECTMOD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 278 "ITL.l"
yyextra->fText = yytext; return DEBUG;
	YY_BREAK
/* ----------------------------------------- */
/*	video mapping */
/* ----------------------------------------- */
case 120:
YY_RULE_SETUP
#line 283 "ITL.l"
yyextra->fText = yytext; return VIDEOMAP;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 284 "ITL.l"
yyextra->fText = yytext; return VIDEOMAPFILE;
	YY_BREAK
/* ----------------------------------------- */
/*	objects types */
/* ----------------------------------------- */
case 122:
YY_RULE_SETUP
#line 290 "ITL.l"
yyextra->fText = yytext; return TLINE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 291 "ITL.l"
yyextra->fText = yytext; return TPOLYGON;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 292 "ITL.l"
yyextra->fText = yytext; return TRECT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 293 "ITL.l"
yyextra->fText = yytext; return TCURVE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 294 "ITL.l"
yyextra->fText = yytext; return TELLIPSE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 296 "ITL.l"
yyextra->fText = yytext; return TGRAPH;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 297 "ITL.l"
yyextra->fText = yytext; return TFASTGRAPH;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 298 "ITL.l"
yyextra->fText = yytext; return TGRID;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 300 "ITL.l"
yyextra->fText = yytext; return TGMN;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 301 "ITL.l"
yyextra->fText = yytext; return TGMNFILE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 302 "ITL.l"
yyextra->fText = yytext; return THTML;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 303 "ITL.l"
yyextra->fText = yytext; return THTMLFILE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 304 "ITL.l"
yyextra->fText = yytext; return TSVG;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 305 "ITL.l"
yyextra->fText = yytext; return TSVGFILE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 306 "ITL.l"
yyextra->fText = yytext; return TTXT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 307 "ITL.l"
yyextra->fText = yytext; return TTXTFILE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 309 "ITL.l"
yyextra->fText = yytext; return TIMG;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 310 "ITL.l"
yyextra->fText = yytext; return TVIDEO;
	YY_BREAK
/* ----------------------------------------- */
/*	special get forms */
/* ----------------------------------------- */
case 140:
YY_RULE_SETUP
#line 317 "ITL.l"
yyextra->fText = yytext; return VERSION;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "ITL.l"
yyextra->fText = yytext; return GUIDOVERSION;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "ITL.l"
yyextra->fText = yytext; return MXMLVERSION;
	YY_BREAK
/* special gmn get forms */
case 143:
YY_RULE_SETUP
#line 322 "ITL.l"
yyextra->fText = yytext; return PAGECOUNT;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 323 "ITL.l"
yyextra->fText = yytext; return PAGEDATE;
	YY_BREAK
/* special signal get forms */
case 145:
YY_RULE_SETUP
#line 326 "ITL.l"
yyextra->fText = yytext; return DIMENSION;
	YY_BREAK
/* special faust plugin get forms */
case 146:
YY_RULE_SETUP
#line 329 "ITL.l"
yyextra->fText = yytext; return IN;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 330 "ITL.l"
yyextra->fText = yytext; return OUT;
	YY_BREAK
/* ----------------------------------------- */
/*	effects */
/* ----------------------------------------- */
case 148:
YY_RULE_SETUP
#line 335 "ITL.l"
yyextra->fText = yytext; return NONE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 336 "ITL.l"
yyextra->fText = yytext; return BLUR;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 337 "ITL.l"
yyextra->fText = yytext; return COLORIZE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 338 "ITL.l"
yyextra->fText = yytext; return SHADOW;
	YY_BREAK
/* ----------------------------------------- */
/*	blur hint */
/* ----------------------------------------- */
case 152:
YY_RULE_SETUP
#line 343 "ITL.l"
yyextra->fText = yytext; return BPERFORMANCE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 344 "ITL.l"
yyextra->fText = yytext; return BQUALITY;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 345 "ITL.l"
yyextra->fText = yytext; return BANIMATION;
	YY_BREAK
/* ----------------------------------------- */
/*	pen styles */
/* ----------------------------------------- */
case 155:
YY_RULE_SETUP
#line 350 "ITL.l"
yyextra->fText = yytext; return PENSOLID;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 351 "ITL.l"
yyextra->fText = yytext; return PENDASH;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 352 "ITL.l"
yyextra->fText = yytext; return PENDOT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 353 "ITL.l"
yyextra->fText = yytext; return PENDASHDOT;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 354 "ITL.l"
yyextra->fText = yytext; return PENDASHDOTDOT;
	YY_BREAK
/* ----------------------------------------- */
/*	sync align and stretch */
/* ----------------------------------------- */
case 160:
YY_RULE_SETUP
#line 359 "ITL.l"
yyextra->fText = yytext; return SYNCOVER;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 360 "ITL.l"
yyextra->fText = yytext; return SYNCTOP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 361 "ITL.l"
yyextra->fText = yytext; return SYNCBOTTOM;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 362 "ITL.l"
yyextra->fText = yytext; return HSTRETCH;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 363 "ITL.l"
yyextra->fText = yytext; return VSTRETCH;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 364 "ITL.l"
yyextra->fText = yytext; return HVSTRETCH;
	YY_BREAK
/* ----------------------------------------- */
/*	interaction messages */
/* ----------------------------------------- */
case 166:
YY_RULE_SETUP
#line 369 "ITL.l"
yyextra->fText = yytext; return MOUSEDOWN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 370 "ITL.l"
yyextra->fText = yytext; return MOUSEUP;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 371 "ITL.l"
yyextra->fText = yytext; return MOUSEENTER;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 372 "ITL.l"
yyextra->fText = yytext; return MOUSELEAVE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 373 "ITL.l"
yyextra->fText = yytext; return MOUSEMOVE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 374 "ITL.l"
yyextra->fText = yytext; return DOUBLECLICK;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 376 "ITL.l"
yyextra->fText = yytext; return TIMEENTER;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 377 "ITL.l"
yyextra->fText = yytext; return TIMELEAVE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 378 "ITL.l"
yyextra->fText = yytext; return DURENTER;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 379 "ITL.l"
yyextra->fText = yytext; return DURLEAVE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 381 "ITL.l"
yyextra->fText = yytext; return NEWELEMENT;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 177:
YY_RULE_SETUP
#line 387 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 388 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 389 "ITL.l"

	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 390 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 392 "ITL.l"

	YY_BREAK
case 182:
YY_RULE_SETUP
#line 393 "ITL.l"
nested++; 
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 394 "ITL.l"
if (--nested==0) BEGIN INITIAL;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 395 "ITL.l"
nested=1; BEGIN COMMENT;
	YY_BREAK
/* ----------------------------------------- */
/*	identifiers */
/* ----------------------------------------- */
case 185:
YY_RULE_SETUP
#line 400 "ITL.l"
yyextra->fText = yytext; return IDENTIFIER;		/* identifiers */
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 401 "ITL.l"
yyextra->fText = yytext; return MAPIDENTIFIER;	/* identifiers with map name */
	YY_BREAK
/* ----------------------------------------- */
/*	quoted strings */
/* ----------------------------------------- */
case 187:
YY_RULE_SETUP
#line 406 "ITL.l"
BEGIN DQSTR;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 407 "ITL.l"
BEGIN QSTR;
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 408 "ITL.l"
yyextra->fText = unescape(yytext); return STRING;
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 409 "ITL.l"
yyextra->fText = unescape(yytext); return STRING;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 410 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 411 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
/* ----------------------------------------- */
/*	lang sections */
/* ----------------------------------------- */
case 193:
YY_RULE_SETUP
#line 417 "ITL.l"
BEGIN LUASECTION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 418 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 419 "ITL.l"
yyextra->fText = unescape(yytext); return LUASCRIPT;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 421 "ITL.l"
BEGIN JSECTION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 422 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 423 "ITL.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
/* ----------------------------------------- */
/*	hostname part */
/* ----------------------------------------- */
case 199:
YY_RULE_SETUP
#line 428 "ITL.l"
return HOSTNAME;
	YY_BREAK
/* ----------------------------------------- */
/*	regular expressions */
/* ----------------------------------------- */
case 200:
YY_RULE_SETUP
#line 433 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 434 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 436 "ITL.l"
;   /* eat up space */
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 438 "ITL.l"
yylloc->first_column=0; /* ignore */
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 440 "ITL.l"
yyextra->fText = yytext; return ERR;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 442 "ITL.l"
ECHO;
	YY_BREAK
#line 3333 "ITLlex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CMNTLN):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DQSTR):
case YY_STATE_EOF(QSTR):
case YY_STATE_EOF(LUASECTION):
case YY_STATE_EOF(JSECTION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ITLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ITLwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ITLlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ITLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ITLrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ITLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 821 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 821 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 820);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ITLrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ITLwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ITLrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ITLensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	ITL_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	ITL_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void ITL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ITLpop_buffer_state();
	 *		ITLpush_buffer_state(new_buffer);
     */
	ITLensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ITL_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ITLwrap()) processing, but the only time this flag
	 * is looked at is after ITLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void ITL_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ITL_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ITLalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ITL_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ITL_create_buffer()
 * @param yyscanner The scanner object.
 */
    void ITL_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ITLfree((void *) b->yy_ch_buf ,yyscanner );

	ITLfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ITLrestart() or at EOF.
 */
    static void ITL_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	ITL_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ITL_init_buffer was _probably_
     * called from ITLrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void ITL_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ITL_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ITLensure_buffer_stack(yyscanner);

	/* This block is copied from ITL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ITL_switch_to_buffer. */
	ITL_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ITLpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		ITL_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ITLensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ITL_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ITL_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ITLlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ITL_scan_bytes() instead.
 */
YY_BUFFER_STATE ITL_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return ITL_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ITLlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ITL_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ITLalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ITL_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ITL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ITLget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ITLget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ITLget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t ITLget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ITLget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ITLset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ITLset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ITLset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ITL_switch_to_buffer
 */
void ITLset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ITLset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ITLget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ITLset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ITLget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ITLset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *ITLget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void ITLset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* ITLlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ITLlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ITLlex_init_extra has the same functionality as ITLlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ITLalloc in
 * the yyextra field.
 */

int ITLlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ITLset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ITLset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ITLlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ITLlex_init()
     */
    return 0;
}

/* ITLlex_destroy is for both reentrant and non-reentrant scanners. */
int ITLlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ITLpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ITLfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ITLfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ITLlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ITLfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ITLalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *ITLrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ITLfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see ITLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 442 "ITL.l"



namespace inscore 
{

void ITLparser::initScanner()
{
	ITLlex_init(&fScanner);
	ITLset_extra(this,fScanner);
}

void ITLparser::destroyScanner()
{
	ITLlex_destroy(fScanner);
}

} // end namespace


