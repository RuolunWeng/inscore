#line 2 "ITLlex.cpp"

#line 4 "ITLlex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE ITLrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE ITLlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via ITLrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void ITLrestart (FILE *input_file ,yyscan_t yyscanner );
void ITL_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void ITL_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITL_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void ITLpop_buffer_state (yyscan_t yyscanner );

static void ITLensure_buffer_stack (yyscan_t yyscanner );
static void ITL_load_buffer_state (yyscan_t yyscanner );
static void ITL_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER ITL_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE ITL_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE ITL_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *ITLalloc (yy_size_t ,yyscan_t yyscanner );
void *ITLrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void ITLfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer ITL_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ITLensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ITLwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyg->yytext_ptr -= yyg->yy_more_len; \
	yyleng = (size_t) (yy_cp - yyg->yytext_ptr); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 204
#define YY_END_OF_BUFFER 205
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[813] =
    {   0,
        0,    0,  179,  179,  181,  181,  189,  189,  190,  190,
      195,  195,  198,  198,  205,  203,  201,  202,  202,  178,
      187,  177,   13,  188,    8,    9,  114,  199,   10,  203,
        4,   11,    1,   12,  203,    7,  199,  185,  203,  203,
      185,  185,  185,  185,  185,  185,  185,  185,  163,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  164,
      185,   75,   76,   77,  179,  180,  179,  181,  181,  181,
      181,  189,  191,  189,  190,  192,  190,  195,  195,  204,
      198,  198,  204,  201,  178,  177,    0,  184,  199,  199,
        0,  199,  199,    4,    2,    0,    3,    4,    0,    1,

        0,    0,  185,    0,  185,    0,    0,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
       82,   83,   84,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  165,  185,
      146,  185,  185,  185,  185,  185,  185,  185,   30,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  179,  180,  179,  181,  182,  183,  189,  189,

      190,  190,  195,  195,    0,  194,  198,  198,    0,  197,
      199,  199,    0,    0,    5,    0,    6,    0,    0,    0,
      186,    0,  200,    0,  185,   32,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,   49,  185,  185,  185,
      185,  157,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,   48,  130,
      185,  185,  185,  185,  185,  185,   62,  185,   63,  138,
      185,  185,   35,  185,  185,  185,  109,  185,  185,   31,
      147,  185,  185,  185,  185,   56,  185,  185,  185,  185,

      185,  185,   58,  185,  185,  185,  185,   57,  185,  185,
      185,  185,  185,  185,   47,  185,  185,  185,  185,  185,
      185,  185,  134,  185,  185,  136,  185,  185,  185,  185,
      185,  185,  185,  185,   29,  185,  199,    6,    0,    0,
      186,  200,    0,  185,  185,  185,  185,  185,   60,  149,
      185,  185,  185,  185,  185,  185,  185,  185,  156,   95,
      185,  185,  185,  185,  185,  185,  185,   71,   72,  185,
      185,  185,   67,   66,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  131,
      185,  185,  129,  185,  185,  185,  132,  122,   15,   36,

       37,  185,  185,  101,  185,  148,  185,  185,   43,  185,
      185,  185,  185,  185,  185,  185,   21,   55,  185,   17,
       24,  124,  185,  185,  185,  185,  185,  185,   39,  185,
       52,  185,  185,  185,   93,  116,  185,  185,  185,  135,
      185,  185,  137,  185,  185,  185,  185,  185,  185,  185,
      185,  185,    0,  193,    0,  185,   46,   61,   78,  185,
      185,   34,   99,  185,  185,  125,  185,  185,  185,   69,
      185,   97,  185,  119,  185,  185,  185,  185,   44,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  127,   59,  185,  185,   14,  133,

       18,  185,  185,   42,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  110,
      185,  185,  185,   79,  185,   89,  155,  185,  185,  185,
      185,  185,  185,  185,  185,  139,   53,  102,  185,  185,
      185,  185,  185,    0,    0,  185,  185,  185,  185,  185,
       70,   85,  185,  185,  185,  185,   68,  185,  185,  185,
       86,  185,  185,  185,  185,  185,  185,   94,  185,  185,
       50,  185,  185,  185,  185,  103,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,   33,   51,  185,  185,  185,

      185,  185,  151,  185,  185,  185,  185,  185,  185,  185,
      185,  185,   54,  185,  185,  185,  185,  185,    0,    0,
      185,  185,  185,  185,   38,  158,  185,  185,  115,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  126,   23,
      185,  185,  185,  185,  185,  185,  185,  185,  167,  185,
      185,   22,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  123,  153,   16,  185,  185,   90,   91,   92,  185,
      185,  185,  185,  185,  161,  185,  185,  140,  185,  185,
       40,   80,   41,   81,    0,  117,    0,  185,  185,  185,
      150,  185,  185,  185,  185,  185,  185,  185,  100,  174,

      175,   96,   87,   88,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  144,  185,  105,  104,  108,
      107,  185,  185,  185,   19,  185,  185,  185,  185,  160,
      185,  185,  120,  185,    0,    0,  185,  154,  185,  185,
      185,   98,  185,  145,  185,  185,  128,  112,  185,  185,
      166,  185,  185,  170,  185,  185,  143,  185,  106,  185,
      185,  185,  185,   26,  185,  172,  173,  121,  185,    0,
        0,  113,   65,  159,  185,  185,  185,  185,  111,  185,
      168,  169,  185,  176,   45,  185,   27,   64,   25,  162,
       28,    0,    0,   74,   20,  171,   73,  185,  185,  152,

      196,    0,  185,  185,    0,  141,  185,  118,  185,  185,
      142,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    1,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   35,   33,   36,   37,
       33,   33,   38,   39,   40,   33,   41,   33,   33,   33,
       42,   43,   44,    1,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,    1,    1,   72,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    4,    1,
        1,    5,    5,    1,    6,    1,    1,    6,    6,    6,
        7,    1,    1,    1,    1,    5,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,    1,    1,    6,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    1
    } ;

static yyconst flex_int16_t yy_base[835] =
    {   0,
        0,    0,   70,   72,   74,   77,   73,   76,   74,   79,
       87,   89,   92,   94,  387, 4541,   97, 4541, 4541, 4541,
     4541, 4541, 4541, 4541,  374, 4541,   90,  108, 4541,  118,
      121, 4541,  126, 4541,  352, 4541,  133,  142,    0,  334,
      154,  185,  130,  160,  199,  174,  225,  236,  251,  181,
      265,  230,  280,  284,  305,  287,  320,  335,  344,  357,
      363,  372,  378,  165,    0,   97,  108, 4541,  126,  363,
      357,  320, 4541,  100,  318, 4541,  116,  182,  187,  332,
      277,  302,  331,  434, 4541, 4541,  337, 4541,  427,    0,
        0,  435,  443,  340,  448,  460,  465,  452,  473,  481,

      490,   92,  189,    0,  264,  301,  300,  152,  499,  473,
      447,  479,  495,  496,  509,  510,  524,  525,  528,  542,
      549,  553,  560,  567,  571,  578,  592,  598,  612,  605,
      616,  623,  630,  637,  643,  644,  657,  662,  666,  673,
      680,  684,  700,  704,  713,  717,  722,  728,  735,  739,
      746,  750,  755,  759,  764,  768,  777,  782,  795,  796,
      799,  802,  813,  817,  822,  835,  841,  844,  857,  861,
      875,  879,  901,  880,  905,  910,  914,  928,  937,  919,
      933,  946,  950,  951,  955,  968,  969,  972,  986,  987,
      991, 1004,    0,  178,  191,  232, 4541, 4541,  295,  186,

      292,  207,  370,  520,  307, 4541,  927, 1038,  295, 4541,
     1038, 1053, 1058,  560,  679,  716,  893,  101,  263,  241,
        0,  260, 1108,  279, 1032, 1036, 1088, 1037, 1079, 1097,
     1110, 1119, 1115, 1134, 1128, 1143, 1148, 1149, 1164, 1165,
     1169, 1180, 1183, 1184, 1197, 1203, 1208, 1219, 1223, 1224,
     1237, 1241, 1242, 1255, 1246, 1259, 1262, 1276, 1295, 1290,
     1299, 1281, 1310, 1314, 1319, 1323, 1334, 1337, 1338, 1351,
     1352, 1357, 1368, 1371, 1372, 1385, 1386, 1389, 1390, 1403,
     1404, 1408, 1427, 1409, 1423, 1438, 1444, 1449, 1455, 1422,
     1460, 1466, 1491, 1477, 1484, 1488, 1502, 1509, 1506, 1522,

     1523, 1527, 1536, 1541, 1550, 1555, 1556, 1561, 1570, 1577,
     1581, 1584, 1597, 1602, 1606, 1611, 1620, 1615, 1631, 1635,
     1638, 1649, 1656, 1669, 1662, 1673, 1676, 1687, 1694, 1698,
     1701, 1705, 1718, 1722, 1727, 1733, 1079, 1082,  225,  232,
        0, 1792,  260, 1763, 1774, 1780, 1793, 1798, 1799, 1802,
     1813, 1816, 1827, 1831, 1838, 1842, 1851, 1856, 1872, 1865,
     1876, 1885, 1889, 1871, 1898, 1894, 1909, 1905, 1914, 1918,
     1923, 1929, 1934, 1938, 1943, 1947, 1954, 1958, 1969, 1965,
     1978, 1982, 1995, 1998, 1991, 2009, 2018, 2014, 2027, 2031,
     2036, 2045, 2049, 2050, 2064, 2065, 2069, 2080, 2083, 2116,

     2094, 2097, 2112, 2108, 2115, 2119, 2126, 2133, 2165, 2139,
     2156, 2152, 2171, 2180, 2174, 2189, 2193, 2196, 2200, 2209,
     2213, 2214, 2218, 2229, 2235, 2234, 2253, 2248, 2249, 2262,
     2267, 2273, 2280, 2284, 2287, 2301, 2302, 2305, 2325, 2308,
     2340, 2344, 2324, 2341, 2345, 2359, 2360, 2373, 2377, 2386,
     2380, 2395,  227, 4541,  247, 2399, 2402, 2413, 2417, 2420,
     2424, 2431, 2435, 2444, 2448, 2453, 2462, 2466, 2471, 2475,
     2480, 2489, 2493, 2494, 2498, 2507, 2512, 2513, 2518, 2531,
     2532, 2536, 2550, 2554, 2563, 2567, 2576, 2580, 2583, 2587,
     2594, 2605, 2608, 2622, 2625, 2626, 2641, 2640, 2644, 2645,

     2676, 2665, 2670, 2679, 2683, 2690, 2705, 2696, 2710, 2711,
     2716, 2725, 2730, 2731, 2736, 2750, 2751, 2755, 2764, 2775,
     2771, 2786, 2791, 2782, 2795, 2800, 2809, 2818, 2822, 2827,
     2831, 2836, 2842, 2853, 2857, 2862, 2879, 2866, 2880, 2883,
     2894, 2897, 2903,  202,  251, 2912, 2916, 2917, 2931, 2932,
     2935, 2936, 2950, 2951, 2964, 2965, 2970, 2979, 2996, 2985,
     2990, 3003, 3007, 3012, 3016, 3023, 3034, 3037, 3040, 3051,
     3054, 3058, 3071, 3075, 3114, 3082, 3095, 3099, 3100, 3104,
     3113, 3118, 3131, 3135, 3136, 3149, 3150, 3163, 3168, 3172,
     3177, 3186, 3191, 3197, 3204, 3208, 3211, 3222, 3226, 3231,

     3235, 3242, 3251, 3262, 3266, 3267, 3280, 3284, 3287, 3301,
     3302, 3307, 3350, 3324, 3328, 3329, 3346, 3347,  213,   42,
     3351, 3364, 3368, 3379, 3373, 3384, 3388, 3393, 3408, 3402,
     3407, 3411, 3422, 3425, 3436, 3440, 3443, 3447, 3454, 3458,
     3461, 3467, 3478, 1856, 3483, 3487, 3501, 3496, 3507, 3510,
     3521, 3525, 3526, 3539, 3543, 3548, 3557, 3562, 3575, 3576,
     3590, 3591, 3594, 3595, 3608, 3609, 3612, 3623, 3626, 3627,
     3630, 3643, 3646, 3647, 3650, 3665, 3669, 3670, 3674, 3683,
     3690, 3694, 3697, 3701,  194, 4541,  213, 3708, 3712, 3715,
     3719, 3726, 3740, 3735, 3749, 3744, 3758, 3762, 3771, 3775,

     3776, 3780, 3789, 3793, 3794, 3807, 3808, 3847, 3823, 3827,
     3832, 3838, 3847, 3843, 3854, 3858, 3874, 3865, 3869, 3878,
     3883, 3892, 3887, 3905, 3898, 3901, 3918, 3921, 3922, 3936,
     3937, 3940, 3954, 3959,  200,  229, 3955, 3970, 3973, 3974,
     3977, 3991, 3995, 4000, 4013, 4009, 4016, 4027, 4030, 4069,
     4044, 4045, 4050, 4063, 4093, 4064, 4068, 4069, 4083, 4088,
     4097, 4092, 4106, 4115, 4119, 4122, 4126, 4133, 4140,  180,
      203, 4137, 4151, 4154, 4155, 4158, 4171, 4174, 4175, 4223,
     4191, 4194, 4233, 4208, 4209, 4213, 4222, 4227, 4231, 4238,
     4242,  134,  168, 4245, 4249, 4256, 4260, 4299, 4309, 4267,

     4541,  171, 1127, 4315,  127, 3605, 4319, 4541, 4321, 4325,
     4331, 4541, 4384, 4393, 4402, 4411, 4420, 4429, 4434, 4439,
     4448, 4453, 4462, 4471, 4480, 4489, 4498, 4503, 4507,  127,
     4515, 4520, 4523, 4531
    } ;

static yyconst flex_int16_t yy_def[835] =
    {   0,
      812,    1,  813,  813,  814,  814,  815,  815,  816,  816,
      817,  817,  818,  818,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  819,  819,  812,  812,
      812,  812,  812,  812,  812,  812,  819,  820,  821,  812,
      822,  820,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,  823,  812,  823,  812,  812,  812,
      812,  824,  812,  824,  825,  812,  825,  826,  826,  826,
      827,  827,  827,  812,  812,  812,  812,  812,  819,  828,
      821,  819,  828,  812,  828,  812,  812,  812,  812,  812,

      812,  812,  829,  830,   42,  831,  812,  832,  822,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  823,  812,  823,  812,  812,  812,  824,  824,

      825,  825,  826,  826,  826,  812,  827,  827,  827,  812,
      828,  828,  812,  812,  812,  812,  812,  812,  812,  812,
      833,  831,  834,  812,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,  828,  828,  812,  812,
      833,  834,  812,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,  819,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  812,  812,  812,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,  812,  812,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,  829,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  819,   42,   42,   42,   42,   42,  812,  812,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,  829,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,  812,  812,  812,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,  829,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,  812,  812,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,  829,
       42,   42,   42,   42,  829,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,  812,
      812,   42,   42,   42,   42,   42,   42,   42,   42,  829,
       42,   42,  829,   42,   42,   42,   42,   42,   42,   42,
       42,  812,  812,   42,   42,   42,   42,  829,  829,   42,

      812,  812,  829,  829,  812,  829,  829,  812,  829,  829,
      829,    0,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812
    } ;

static yyconst flex_int16_t yy_nxt[4614] =
    {   0,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   33,   33,
       16,   34,   35,   36,   16,   37,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   39,   40,   16,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   38,   38,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   38,   60,   61,   62,   63,
       64,   16,   66,   67,   66,   67,   69,   69,   73,   69,
       69,   73,   76,   70,  686,   71,   70,   76,   71,   79,
       79,   79,   79,  218,   82,   82,   82,   82,   84,  194,

      194,   85,  218,   86,   90,  199,   87,   90,   90,   90,
      194,  195,   80,  687,   80,   74,   77,   83,   74,   83,
       92,   77,   93,   94,  201,   95,   95,   95,  196,  196,
       96,   91,   96,   94,  221,   97,   97,   97,   98,   98,
       98,   94,  200,  100,  100,  100,  219,   90,  220,   91,
       90,   90,   90,   89,   89,  219,  103,  220,  202,  103,
      103,  103,  104,   90,   90,   89,   89,   89,  108,  808,
       99,  108,  108,  108,   91,  101,  105,   90,  105,   89,
      194,  194,  805,   91,  204,  204,  114,  802,  105,  204,
      204,  199,  115,  194,  195,   91,   89,   89,  801,  103,

       90,   90,  103,  103,  103,  104,  105,  205,  105,  104,
       89,  105,  205,  105,   90,  201,  116,  793,  105,  117,
      105,  105,  105,  105,  134,  118,   91,  105,  200,  105,
      135,  110,  105,  111,  196,  196,  136,  105,  150,  151,
      792,  112,  137,  113,  119,  120,  771,  121,  122,  202,
      123,  124,  125,  770,  736,  105,  735,  105,  126,  127,
      685,  128,  129,  620,  130,  619,  545,  131,  132,  133,
      138,  105,  544,  105,  455,  154,  105,  454,  105,  208,
      208,  105,  105,  105,  105,  141,  105,  139,  105,  155,
      140,  453,  105,  142,  105,  156,  343,  105,  143,  105,

      145,  144,  209,  223,  208,  208,  340,  105,  339,  105,
      105,  105,  105,  105,  146,  147,  148,  149,  152,  812,
      105,  105,  105,  105,  153,  157,  105,  209,  105,  158,
      105,  812,  105,  105,  202,  105,  105,  200,  105,  159,
      105,  224,  105,  105,  223,  105,  160,  161,   88,  162,
      163,  105,  167,  105,  164,  210,  206,   98,   98,   98,
      202,  105,  200,  105,  165,  168,  105,  198,  105,  169,
      166,  170,  204,  204,  197,  107,  105,  102,  105,  171,
      172,  105,  173,  105,  174,   88,  812,  175,  176,   99,
      105,  105,  105,  105,  177,  205,  812,  181,  812,  178,

      105,  179,  105,  105,  180,  105,  183,  812,  185,  105,
      184,  105,  182,  105,  812,  105,  186,  812,  188,  105,
      105,  105,  812,  812,  190,  187,  105,  191,  105,  812,
      105,  189,  812,  812,  105,   84,  105,  192,   85,  812,
       86,   90,  812,   87,   90,   90,   90,   92,  812,   93,
       94,  812,  211,  211,  211,   93,  812,   93,   94,  812,
      211,  211,  211,   94,  812,   95,   95,   95,   91,   98,
       98,   98,   96,  812,   96,   94,   91,  213,  213,  213,
       94,  812,   97,   97,   97,  214,  812,  214,  812,  812,
      215,  215,  215,  105,  812,  226,   94,  212,  100,  100,

      100,   99,  216,  105,  216,  105,  812,  217,  217,  217,
       89,   89,  812,  108,  101,  812,  108,  108,  108,  105,
      812,  105,  204,  204,   89,  105,  812,  105,  812,  105,
      101,  105,  227,  812,  812,  105,  225,  105,  812,  228,
       91,  105,  105,  105,  105,  205,  229,  812,  230,  812,
      812,  105,  105,  105,  105,  105,  105,  105,  105,  233,
      812,  231,  232,  812,  812,  105,  105,  105,  105,  234,
      105,  105,  105,  105,  105,  812,  105,  215,  215,  215,
      235,  105,  105,  105,  237,  812,  238,  236,  105,  812,
      105,  239,  240,  812,  243,  105,  812,  105,  241,  245,

      105,  105,  812,  246,  242,  105,  105,  105,  105,  247,
      812,  105,  812,  105,  244,  105,  105,  105,  105,  105,
      812,  812,  248,  105,  105,  105,  105,  105,  251,  105,
      249,  812,  250,  812,  105,  812,  105,  254,  105,  812,
      105,  812,  252,  253,  105,  812,  105,  255,  105,  256,
      105,  105,  812,  105,  105,  812,  105,  257,  105,  258,
      105,  105,  105,  105,  105,  812,  812,  259,  105,  105,
      105,  105,  105,  812,  105,  260,  105,  812,  105,  105,
      812,  105,  261,  105,  812,  105,  105,  262,  105,  105,
      105,  105,  105,  105,  812,  105,  215,  215,  215,  263,

      105,  105,  105,  105,  812,  105,  264,  812,  105,  812,
      105,  267,  105,  105,  105,  105,  812,  265,  105,  105,
      105,  105,  105,  812,  105,  266,  105,  812,  105,  268,
      105,  105,  105,  217,  217,  217,  105,  812,  105,  812,
      105,  812,  270,  812,  269,  271,  105,  812,  105,  272,
      105,  812,  105,  273,  812,  812,  105,  274,  105,  105,
      105,  105,  105,  277,  812,  105,  275,  812,  105,  276,
      105,  105,  812,  105,  105,  105,  105,  279,  105,  278,
      105,  105,  812,  105,  105,  105,  105,  105,  812,  812,
      280,  105,  105,  105,  105,  105,  105,  105,  105,  812,

      282,  105,  105,  105,  105,  105,  105,  105,  281,  812,
      105,  105,  105,  105,  105,  105,  105,  105,  812,  283,
      105,  812,  105,  105,  105,  105,  105,  812,  105,  284,
      105,  285,  812,  105,  286,  105,  812,  812,  105,  812,
      105,  105,  105,  105,  289,  105,  290,  105,  105,  287,
      105,  105,  105,  288,  105,  105,  812,  105,  105,  105,
      105,  105,  812,  105,  292,  105,  291,  812,  105,  105,
      105,  105,  812,  105,  812,  293,  812,  812,  295,  294,
      105,  105,  296,  105,  297,  812,  299,  105,  812,  105,
      105,  105,  105,  105,  300,  812,  812,  105,  298,  105,

      105,  812,  105,  105,  302,  303,  812,  308,  301,  105,
      217,  217,  217,  105,  304,  305,  812,  105,  306,  105,
      307,  105,  812,  105,  812,  105,  105,  105,  105,  208,
      208,  105,  812,  105,  309,  105,  105,  105,  105,  310,
      812,  812,  311,  312,  315,  313,  314,  105,  812,  105,
      316,  105,  209,  105,  317,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  318,  105,  105,  105,  105,  812,
      320,  812,  105,  321,  105,  105,  105,  324,  812,  105,
      319,  105,  812,  105,  105,  105,  105,  322,  323,  105,
      325,  105,  105,  105,  105,  105,  105,  105,  105,  328,

      812,  105,  105,  105,  105,  812,  105,  105,  105,  105,
      326,  105,  327,  105,  105,  105,  330,  105,  105,  329,
      105,  812,  331,  812,  105,  105,  105,  105,  105,  812,
      105,  332,  105,  105,  105,  105,  812,  105,  812,  105,
      208,  208,  105,  105,  105,  105,  334,  105,  333,  105,
      105,  812,  105,   94,  335,  211,  211,  211,  812,  812,
      105,  812,  105,  209,  812,  337,  336,  337,  812,  812,
      338,  338,  338,   94,  812,  213,  213,  213,  105,  812,
      105,  812,  105,  105,  105,  105,  812,  212,  105,  346,
      105,  344,  105,  105,  105,  105,  338,  338,  338,  338,

      338,  338,  812,  812,  812,  812,  812,  101,  222,  222,
      812,  222,  222,  222,  222,  222,  222,  222,  222,  812,
      812,  222,  812,  222,  222,  105,  812,  105,  222,  222,
      222,  222,  222,  345,  105,  347,  105,  105,   90,   90,
      812,  812,  812,  105,  105,  105,  105,  104,  812,  222,
      222,  223,   90,  105,  348,  105,  105,  812,  105,  349,
      352,  105,  812,  105,  812,  105,  105,  105,  105,  812,
      351,  105,  350,  105,  105,  105,  105,  105,  812,  222,
      105,  353,  105,  812,  105,  806,  105,  354,  812,  105,
      105,  105,  105,  355,  105,  105,  105,  105,  812,  105,

      358,  105,  812,  812,  105,  105,  105,  105,  357,  356,
      105,  105,  105,  105,  360,  105,  359,  105,  812,  812,
      105,  105,  105,  105,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  362,  361,  812,  105,  812,  105,  105,
      105,  105,  105,  105,  812,  105,  364,  363,  366,  105,
      812,  105,  812,  105,  105,  105,  105,  812,  812,  105,
      812,  105,  365,  812,  105,  105,  105,  105,  367,  368,
      105,  105,  105,  369,  812,  105,  812,  105,  812,  105,
      105,  105,  105,  105,  812,  105,  370,  105,  371,  105,
      105,  812,  105,  105,  373,  105,  812,  105,  105,  105,

      105,  105,  105,  105,  105,  374,  372,  105,  105,  812,
      105,  105,  812,  105,  812,  105,  812,  105,  105,  812,
      105,  376,  105,  377,  105,  378,  375,  105,  379,  105,
      383,  812,  105,  812,  105,  812,  105,  105,  105,  105,
      380,  105,  812,  105,  812,  105,  105,  105,  105,  812,
      812,  105,  381,  105,  812,  105,  105,  105,  105,  812,
      105,  382,  105,  384,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  812,  385,  105,  812,  105,  386,  105,
      105,  105,  105,  105,  105,  105,  105,  387,  812,  812,
      105,  388,  105,  389,  105,  105,  105,  105,  105,  105,

      105,  390,  812,  105,  812,  105,  392,  105,  105,  105,
      105,  812,  391,  105,  105,  105,  393,  105,  105,  394,
      105,  812,  812,  395,  105,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  400,
      812,  396,  105,  105,  105,  397,  105,  105,  105,  105,
      105,  105,  105,  398,  105,  105,  399,  105,  812,  105,
      105,  105,  105,  812,  105,  105,  105,  105,  105,  105,
      105,  105,  402,  105,  405,  105,  403,  401,  105,  105,
      105,  105,  812,  105,  105,  105,  105,  404,  812,  812,
      105,  812,  105,  812,  105,  105,  105,  105,  406,  812,

      105,  105,  105,  105,  407,  105,  105,  105,  105,  812,
      812,  105,  105,  105,  105,  409,  105,  410,  105,  411,
      408,  812,  105,  105,  105,  105,  812,  415,  412,  812,
      105,  413,  105,  105,  105,  105,  105,  105,  812,  414,
      105,  812,  105,  812,  105,  812,  105,  105,  105,  105,
      105,  812,  105,  416,  105,  105,  812,  105,  105,  812,
      105,  418,  419,  812,  105,  105,  417,  105,  105,  105,
      105,  105,  421,  105,  812,  105,  812,  812,  105,  105,
      105,  105,  105,  105,  105,  105,  420,  105,  812,  105,
      812,  422,  105,  812,  105,  424,  105,  105,  105,  105,

      423,  105,  105,  105,  105,  426,  105,  105,  105,  105,
      812,  105,  105,  105,  105,  812,  105,  105,  105,  105,
      425,  812,  428,  105,  812,  105,  105,  105,  105,  105,
      105,  812,  105,  105,  427,  105,  812,  105,  812,  105,
      105,  812,  105,  105,  429,  105,  431,  812,  105,  430,
      105,  812,  105,  105,  105,  105,  812,  105,  432,  433,
      105,  105,  105,  105,  105,  434,  105,  105,  105,  105,
      812,  105,  812,  105,  812,  812,  105,  105,  105,  105,
      436,  105,  435,  105,  105,  812,  105,  105,  437,  105,
      812,  105,  812,  105,  105,  105,  105,  105,  812,  812,

      438,  812,  105,  812,  105,  105,  440,  105,  105,  439,
      105,  442,  105,  812,  105,  105,  441,  105,  105,  105,
      105,  105,  105,  443,  105,  105,  812,  105,  812,  105,
      812,  105,  105,  105,  105,  105,  445,  812,  812,  444,
      105,  446,  105,  105,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  105,  105,  812,  105,  105,  812,  105,
      812,  105,  447,  105,  105,  448,  105,  449,  105,  812,
      105,  450,  812,  105,  105,  105,  105,  812,  105,  105,
      105,  105,  812,  105,  451,  105,  452,  812,  812,  105,
      812,  105,  222,  222,  812,  222,  222,  222,  222,  222,

      222,  222,  222,  812,  812,  222,  812,  222,  222,  105,
      812,  105,  222,  222,  222,  222,  222,  812,  812,  456,
      105,  105,  105,  812,  812,  458,  105,  812,  105,  812,
      105,  812,  105,  222,  222,  223,  105,  457,  105,  105,
      812,  105,  459,  460,  105,  105,  105,  105,  105,  105,
      105,  105,  812,  812,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  222,  105,  461,  812,   90,   90,  105,
      812,  105,  105,  105,  105,  105,  104,  105,  462,  105,
      812,   90,  463,  105,  105,  105,  105,  105,  105,  105,
      105,  466,  812,  464,  105,  465,  105,  105,  105,  105,

      105,  469,  105,  467,  105,  708,  812,  105,  812,  105,
      812,  105,  468,  105,  105,  812,  473,  105,  105,  105,
      105,  105,  105,  105,  105,  470,  812,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  471,  105,  472,  812,
      105,  105,  105,  105,  105,  105,  105,  105,  812,  474,
      105,  105,  105,  105,  105,  105,  105,  105,  476,  475,
      105,  105,  105,  105,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  812,  105,  105,  477,  105,  479,  478,
      105,  105,  105,  812,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  105,  105,  105,  105,  812,  812,  105,

      105,  105,  105,  481,  105,  105,  105,  812,  480,  812,
      482,  105,  105,  105,  105,  105,  483,  105,  484,  812,
      812,  105,  812,  105,  105,  105,  105,  105,  105,  485,
      105,  486,  812,  812,  105,  487,  105,  105,  105,  105,
      105,  105,  488,  105,  105,  812,  105,  105,  812,  105,
      490,  105,  812,  105,  105,  105,  105,  105,  489,  812,
      105,  812,  105,  493,  105,  105,  105,  105,  812,  492,
      105,  491,  105,  105,  105,  105,  105,  105,  812,  105,
      812,  812,  105,  105,  105,  105,  812,  105,  495,  105,
      494,  105,  105,  105,  105,  105,  105,  105,  105,  812,

      812,  105,  812,  496,  812,  105,  105,  105,  105,  497,
      105,  105,  105,  105,  812,  105,  498,  105,  812,  500,
      105,  105,  105,  105,  499,  105,  105,  105,  105,  105,
       90,  105,  812,   90,   90,   90,  105,  812,  105,  105,
      105,  105,  105,  105,  812,  105,  501,  812,  812,  812,
      105,  812,  105,  105,  105,  105,  105,   91,  105,  502,
      105,  105,  812,  105,  105,  105,  105,  105,  105,  812,
      105,  503,  105,  105,  105,  105,  812,  105,  812,  105,
      812,  105,  105,  812,  105,  105,  812,  105,  504,  105,
      812,  105,  505,  506,  507,  509,  508,  105,  105,  812,

      105,  812,  105,  812,  105,  812,  513,  812,  105,  812,
      105,  105,  105,  105,  105,  510,  511,  105,  812,  105,
      105,  105,  105,  105,  512,  812,  105,  105,  105,  105,
      105,  812,  105,  514,  812,  105,  105,  105,  105,  105,
      515,  105,  105,  812,  105,  105,  105,  105,  105,  105,
      812,  105,  105,  516,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  812,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  812,  105,  105,  105,  105,  812,  812,
      105,  105,  105,  105,  517,  105,  518,  105,  519,  521,
      105,  105,  105,  105,  105,  105,  105,  105,  520,  105,

      812,  105,  812,  812,  105,  105,  105,  105,  105,  105,
      105,  105,  522,  105,  812,  105,  812,  812,  105,  105,
      105,  105,  524,  105,  523,  105,  105,  812,  105,  105,
      105,  105,  105,  105,  812,  105,  105,  812,  105,  525,
      105,  812,  105,  105,  812,  105,  526,  105,  105,  105,
      527,  105,  529,  105,  105,  812,  105,  105,  105,  105,
      105,  105,  812,  105,  105,  812,  105,  530,  812,  528,
      105,  105,  105,  105,  533,  531,  812,  534,  532,  812,
      105,  105,  105,  105,  812,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  535,  812,  105,  105,  105,  105,

      105,  105,  105,  105,  536,  105,  105,  105,  105,  812,
      812,  537,  538,  812,  812,  105,  105,  105,  105,  105,
      812,  105,  539,  105,  812,  540,  105,  812,  542,  105,
      812,  105,  105,  105,  105,  105,  105,  541,  105,  812,
      812,  105,  105,  105,  105,  105,  543,  105,  105,  812,
      105,  105,  812,  105,  812,  105,  812,  105,  105,  105,
      105,  105,  812,  105,  546,  105,  105,  812,  105,  105,
      105,  105,  105,  105,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  547,  812,  812,  105,  548,  105,
      105,  105,  105,  105,  105,  812,  105,  549,  812,  105,

      105,  105,  105,  812,  105,  812,  550,  551,  105,  105,
      105,  105,  105,  812,  105,  552,  812,  105,  105,  105,
      105,  105,  105,  105,  105,  812,  105,  105,  105,  105,
      553,  105,  554,  105,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  812,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  105,  556,  105,  105,  555,  105,  105,
      105,  105,  559,  105,  105,  557,  105,  812,  105,  105,
      105,  105,  812,  812,  105,  558,  105,  105,  105,  105,
      105,  561,  105,  812,  105,  812,  812,  105,  105,  105,
      105,  812,  105,  560,  105,  562,  105,  812,  105,  564,

      105,  812,  105,  812,  812,  812,  105,  812,  105,  105,
      105,  105,  105,  105,  563,  105,  565,  812,  566,  105,
      812,  105,  105,  105,  105,  105,  105,  567,  105,  105,
      812,  105,  105,  105,  105,  105,  105,  812,  105,  105,
      105,  105,  105,  105,  568,  105,  569,  812,  812,  570,
      105,  105,  105,  105,  105,  575,  105,  812,  571,  812,
      812,  105,  812,  105,  573,  812,  105,  572,  105,  574,
      105,  105,  105,  105,  105,  812,  812,  812,  105,  812,
      105,  105,  105,  105,  105,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  812,  812,  105,  105,  105,  105,

      105,  105,  105,  105,  576,  577,  578,  812,  812,  579,
      580,  105,  812,  105,  812,  581,  105,  812,  105,  583,
      812,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      812,  105,  105,  582,  105,  105,  105,  105,  105,  105,
      812,  105,  105,  812,  105,  584,  105,  812,  105,  585,
      586,  105,  105,  105,  105,  587,  105,  105,  105,  105,
      812,  105,  105,  105,  105,  812,  105,  589,  105,  105,
      588,  105,  105,  591,  105,  812,  105,  105,  105,  105,
      812,  105,  105,  105,  105,  590,  592,  105,  105,  105,
      812,  812,  105,  593,  105,  594,  105,  105,  105,  105,

      596,  105,  599,  105,  597,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  595,  812,  600,  105,  812,  105,
      105,  105,  105,  105,  812,  812,  598,  105,  105,  105,
      105,  105,  105,  105,  105,  601,  602,  105,  105,  105,
      105,  105,  105,  105,  105,  604,  105,  105,  105,  105,
      812,  105,  812,  105,  812,  105,  105,  105,  105,  812,
      812,  812,  603,  812,  105,  105,  105,  105,  105,  812,
      105,  605,  812,  105,  105,  105,  105,  105,  105,  105,
      105,  812,  105,  105,  105,  105,  606,  105,  105,  105,
      105,  613,  105,  812,  105,  608,  612,  607,  105,  105,

      609,  105,  610,  105,  812,  105,  812,  614,  105,  105,
      105,  105,  105,  105,  105,  105,  611,  812,  105,  812,
      105,  812,  105,  812,  105,  105,  105,  105,  105,  105,
      812,  105,  615,  812,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  812,  105,  617,  616,  812,  105,
      105,  105,  105,  105,  812,  105,  618,  812,  105,  105,
      105,  105,  105,  105,  105,  105,  812,  812,  105,  622,
      105,  812,  105,  105,  105,  623,  621,  105,  105,  105,
      105,  105,  105,  105,  105,  812,  812,  105,  105,  105,
      105,  105,  105,  105,  105,  625,  105,  105,  105,  105,

      812,  624,  812,  812,  812,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  626,  627,  105,  628,  105,  812,
      105,  105,  105,  105,  631,  105,  105,  105,  105,  629,
      632,  105,  630,  105,  812,  105,  105,  105,  105,  812,
      812,  105,  105,  105,  105,  812,  105,  812,  105,  105,
      633,  105,  105,  105,  105,  105,  634,  812,  105,  105,
      105,  105,  105,  105,  105,  105,  812,  812,  105,  105,
      105,  105,  105,  812,  105,  636,  637,  812,  635,  105,
      105,  105,  105,  105,  812,  105,  105,  638,  105,  639,
      105,  812,  105,  105,  812,  105,  105,  105,  105,  105,

      105,  812,  105,  641,  105,  812,  105,  105,  812,  105,
      105,  812,  105,  812,  105,  640,  105,  105,  812,  105,
      642,  105,  812,  105,  812,   90,   90,  105,  105,  105,
      105,  105,  812,  105,  104,  812,  812,  643,  105,   90,
      105,  105,  812,  105,  812,  105,  105,  105,  105,  647,
      105,  105,  105,  105,  645,  105,  105,  646,  105,  105,
      105,  105,  105,  648,  105,  812,  105,  812,  812,  105,
      812,  105,  812,  649,  105,  650,  105,  105,  812,  105,
      644,  105,  105,  105,  105,  812,  812,  105,  651,  105,
      812,  105,  105,  105,  105,  105,  105,  105,  105,  652,

      812,  653,  812,  812,  812,  105,  105,  105,  105,  105,
      812,  105,  655,  654,  105,  656,  105,  812,  105,  105,
      105,  105,  812,  105,  105,  105,  105,  657,  658,  812,
      105,  812,  105,  105,  105,  105,  812,  105,  812,  105,
      812,  659,  105,  105,  105,  105,  660,  105,  661,  105,
      105,  812,  105,  105,  105,  662,  105,  105,  812,  105,
      105,  812,  105,  812,  105,  812,  105,  105,  105,  105,
      105,  664,  105,  663,  105,  665,  812,  105,  105,  105,
      105,  105,  105,  105,  105,  812,  812,  105,  105,  105,
      105,  105,  812,  105,  812,  666,  812,  105,  105,  105,

      105,  812,  812,  667,  668,  669,  670,  105,  105,  105,
      105,  671,  105,  105,  105,  105,  812,  812,  105,  812,
      105,  812,  105,  105,  672,  105,  105,  812,  105,  674,
      105,  673,  105,  105,  812,  105,  105,  812,  105,  812,
      105,  812,  105,  105,  675,  105,  677,  105,  105,  105,
      105,  676,  679,  105,  812,  105,  812,  105,  105,  105,
      678,  812,  812,  105,   90,  105,  812,   90,   90,   90,
      105,  812,  105,  680,  105,  105,  105,  105,  812,  812,
      105,  812,  105,  812,  105,  105,  105,  682,  812,  812,
      681,   91,  105,  105,  105,  105,  812,  105,  812,  105,

      688,  812,  105,  105,  105,  684,  812,  105,  683,  105,
      105,  812,  105,  692,  105,  812,  105,  690,  812,  105,
      105,  105,  105,  689,  105,  105,  105,  105,  691,  105,
      105,  105,  105,  812,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  812,  105,  695,  693,  812,  105,  105,
      105,  105,  694,  105,  105,  105,  105,  105,  105,  105,
      105,  696,  812,  697,  105,  105,  105,  105,  105,  105,
      105,  105,  812,  105,  812,  698,  812,  699,  105,  812,
      105,  105,  105,  105,  105,  701,  105,  700,  105,  105,
      812,  105,  105,  105,  105,  105,  105,  812,  702,  105,

      105,  703,  105,  105,  105,  704,  105,  105,  812,  105,
      105,  812,  105,  105,  105,  105,  105,  105,  812,  105,
      812,  705,  812,  105,  105,  105,  105,  707,  812,  105,
      706,  105,  812,  105,  105,  105,  105,  812,  812,  105,
      812,  105,  105,  105,  105,  105,  711,  105,  812,  105,
      709,  710,  105,  105,  105,  105,  105,  105,  105,  105,
      812,  812,  712,  105,  812,  105,  713,  105,  105,  105,
      714,  105,  105,  105,  105,  812,  812,  105,  812,  105,
      812,  105,  105,  105,  715,  105,  812,  105,  716,  105,
      812,  105,  812,  718,  105,  105,  105,  105,  812,  105,

      717,  105,  812,  105,  105,  105,  105,  812,  105,  812,
      105,  720,  812,  105,  812,  105,   90,   90,  105,  719,
      105,  105,  105,  105,  105,  104,  812,  721,  722,  812,
       90,  105,  105,  105,  105,  723,  105,  105,  105,  105,
      105,  105,  105,  105,  812,  812,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  812,
      105,  725,  812,  812,  105,  105,  724,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  812,  105,  105,
      726,  105,  105,  105,  105,  105,  105,  812,  727,  105,
      728,  105,  105,  105,  105,  105,  105,  812,  105,  105,

      812,  105,  105,  105,  105,  105,  105,  812,  105,  730,
      729,  105,  812,  105,  731,  105,  105,  105,  105,  812,
      105,  105,  105,  105,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  812,  733,  732,  105,  812,  105,  105,
      105,  734,  105,  105,  812,  105,  105,  105,  105,  105,
      105,  812,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  812,  105,  105,  105,  105,  105,  105,  812,
      738,  105,  105,  105,  105,  105,  737,  105,  739,  812,
      812,  105,  105,  105,  105,  740,  105,  812,  105,  741,
      105,  105,  105,  742,  812,  105,  105,  105,  105,  812,

      105,  743,  744,  812,  105,  105,  105,  105,  105,  812,
      105,  745,  812,  812,  105,  746,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  812,  105,  105,  105,  105,
      812,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  812,  812,  105,  747,  105,  812,  105,
      105,  105,  105,  105,  105,  105,  105,  749,   90,   90,
      812,  755,  812,  105,  105,  105,  105,  104,  812,  105,
      748,  105,   90,  105,  812,  105,  752,  812,  105,  105,
      105,  751,  812,  105,  105,  105,  105,  754,  105,  105,
      105,  105,  812,  105,  105,  105,  105,  812,  753,  105,

      105,  756,  105,  105,  105,  105,  105,  812,  812,  750,
      105,  105,  105,  105,  105,  105,  105,  105,  757,  758,
      105,  105,  105,  105,  105,  105,  105,  105,  812,  105,
      105,  105,  105,  105,  105,  105,  105,  759,  105,  105,
      105,  105,  812,  105,  105,  760,  105,  105,  105,  105,
      105,  105,  761,  105,  105,  812,  105,  105,  812,  105,
      762,  105,  812,  105,  105,  763,  105,  105,  105,  105,
      105,  812,  812,  764,  105,  812,  105,  105,  105,  105,
      105,  765,  105,  105,  105,  105,  105,  812,  105,  767,
      812,  812,  105,  105,  105,  105,  105,  812,  105,  766,

      105,  105,  105,  105,  768,  105,  769,  105,  812,  812,
      105,  105,  105,  105,  812,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  772,  105,  105,  812,  105,  105,
      105,  105,  105,  105,  812,  105,  773,  105,  774,  105,
      775,  105,  812,  105,  812,  812,  105,  105,  105,  105,
      812,  105,  812,  105,  776,  105,  105,  105,  105,  105,
      777,  105,  105,  812,  105,  105,  812,  105,  778,  105,
      812,  105,  105,  105,  105,  105,  105,  812,  105,  812,
       90,   90,  812,  105,  812,  105,  105,  812,  779,  104,
      105,  105,  105,  105,   90,  812,  105,  812,  105,  782,

      105,  105,  105,  105,   90,   90,  105,  781,  105,  105,
      105,  105,  105,  104,  105,  105,  105,  105,   90,  105,
      105,  105,  105,  812,  105,  105,  105,  105,  784,  105,
      812,  105,  780,  785,  105,  786,  105,  812,  105,  105,
      105,  105,  812,  105,  105,  105,  105,  812,  105,  787,
      788,  812,  105,  105,  105,  105,  812,  812,  789,  783,
      812,  105,  105,  105,  105,  105,  812,  105,  105,  812,
      105,  105,  105,  105,  105,  105,  790,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  812,  105,  105,
      812,  105,  791,  105,  812,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  812,  105,  105,  812,  105,
      105,  105,  105,  105,  105,  812,  105,  105,  794,  105,
      105,  105,  105,  105,  812,  795,  796,  105,  812,  105,
      105,  105,  797,  105,   90,   90,  812,  105,  812,  105,
      105,  812,  105,  104,   90,   90,  812,  105,   90,  105,
      105,  812,  105,  104,  105,  105,  105,  105,   90,  105,
      812,  105,  800,  812,  105,  105,  105,  105,  105,  105,
      105,  105,  812,  105,  812,  105,  798,  105,  105,  105,
      105,  812,  799,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  812,  105,  105,  105,  105,  105,  105,  812,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  812,
       90,   90,  105,  105,  105,  105,  105,  812,  105,  104,
       90,   90,  812,  105,   90,  105,   90,   90,  812,  104,
       90,   90,   90,   90,   90,  104,   90,   90,  812,  104,
       90,  104,   90,   90,   90,  104,   90,  812,  812,  812,
       90,  104,  812,  812,  812,  812,   90,  812,  803,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  804,  809,  812,  812,  812,  812,  812,  807,  812,
      810,  812,  812,  811,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   89,   89,
      812,   89,   89,  105,  105,  105,  105,  105,  106,  812,
      106,  106,  106,  106,  106,  106,  106,  109,  109,  812,
      109,  109,  193,  812,  193,  193,  193,  193,  193,  193,
      193,  199,  199,  812,  199,  199,  199,  199,  199,  199,
      201,  201,  201,  812,  201,  201,  201,  201,  201,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  207,  207,

      207,  207,  207,  207,  207,  207,  207,   90,   90,  812,
       90,  103,  103,  103,  103,  222,  812,  222,  222,  222,
      222,  222,  222,  222,  108,  108,  812,  108,  341,  812,
      341,  342,  812,  342,  342,  342,  342,  342,  342,  342,
       15,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812
    } ;

static yyconst flex_int16_t yy_chk[4614] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,    7,    6,
        6,    8,    9,    5,  620,    5,    6,   10,    6,   11,
       11,   12,   12,  102,   13,   13,   14,   14,   17,   66,

       66,   17,  218,   17,   27,   74,   17,   27,   27,   27,
       67,   67,   11,  620,   12,    7,    9,   13,    8,   14,
       28,   10,   28,   28,   77,   28,   28,   28,   69,   69,
       30,   27,   30,   30,  830,   30,   30,   30,   31,   31,
       31,   33,   74,   33,   33,   33,  102,   37,  102,   28,
       37,   37,   37,   38,   38,  218,   38,  218,   77,   38,
       38,   38,   38,  108,  108,   41,   41,   38,   41,  805,
       31,   41,   41,   41,   37,   33,   43,  108,   43,   41,
      194,  194,  802,   38,   78,   78,   43,  793,   43,   79,
       79,  200,   43,  195,  195,   41,   42,   42,  792,   42,

      103,  103,   42,   42,   42,   42,   44,   78,   44,  103,
       42,   64,   79,   64,  103,  202,   44,  771,   44,   44,
       46,   64,   46,   64,   46,   44,   42,   50,  200,   50,
       46,   42,   46,   42,  196,  196,   46,   50,   50,   50,
      770,   42,   46,   42,   45,   45,  736,   45,   45,  202,
       45,   45,   45,  735,  687,   45,  685,   45,   45,   45,
      619,   45,   45,  545,   45,  544,  455,   45,   45,   45,
       47,   47,  453,   47,  343,   52,   52,  340,   52,   81,
       81,   47,   48,   47,   48,   48,   52,   47,   52,   52,
       47,  339,   48,   48,   48,   52,  224,   49,   48,   49,

       49,   48,   81,  222,   82,   82,  220,   49,  219,   49,
      105,   51,  105,   51,   49,   49,   49,   49,   51,  209,
      105,   51,  105,   51,   51,   53,   53,   82,   53,   53,
       54,  205,   54,   56,  201,   56,   53,  199,   53,   53,
       54,  107,   54,   56,  106,   56,   54,   54,   87,   54,
       55,   55,   56,   55,   55,   83,   80,   94,   94,   94,
       75,   55,   72,   55,   55,   57,   57,   71,   57,   57,
       55,   57,  203,  203,   70,   40,   57,   35,   57,   57,
       58,   58,   58,   58,   58,   25,   15,   58,   58,   94,
       59,   58,   59,   58,   58,  203,    0,   59,    0,   58,

       59,   58,   59,   60,   58,   60,   60,    0,   61,   61,
       60,   61,   59,   60,    0,   60,   61,    0,   62,   61,
       62,   61,    0,    0,   63,   61,   63,   63,   62,    0,
       62,   62,    0,    0,   63,   84,   63,   63,   84,    0,
       84,   89,    0,   84,   89,   89,   89,   92,    0,   92,
       92,    0,   92,   92,   92,   93,    0,   93,   93,    0,
       93,   93,   93,   95,    0,   95,   95,   95,   89,   98,
       98,   98,   96,    0,   96,   96,   92,   96,   96,   96,
       97,    0,   97,   97,   97,   99,    0,   99,    0,    0,
       99,   99,   99,  111,    0,  111,  100,   95,  100,  100,

      100,   98,  101,  111,  101,  111,    0,  101,  101,  101,
      109,  109,    0,  109,   97,    0,  109,  109,  109,  110,
        0,  110,  204,  204,  109,  112,    0,  112,    0,  110,
      100,  110,  112,    0,    0,  112,  110,  112,    0,  112,
      109,  113,  114,  113,  114,  204,  113,    0,  113,    0,
        0,  113,  114,  113,  114,  115,  116,  115,  116,  116,
        0,  114,  115,    0,    0,  115,  116,  115,  116,  116,
      117,  118,  117,  118,  119,    0,  119,  214,  214,  214,
      117,  118,  117,  118,  119,    0,  119,  118,  120,    0,
      120,  119,  119,    0,  121,  121,    0,  121,  120,  122,

      120,  122,    0,  122,  120,  121,  123,  121,  123,  122,
        0,  122,    0,  124,  121,  124,  123,  125,  123,  125,
        0,    0,  123,  124,  126,  124,  126,  125,  125,  125,
      124,    0,  124,    0,  126,    0,  126,  127,  127,    0,
      127,    0,  126,  126,  128,    0,  128,  128,  127,  128,
      127,  130,    0,  130,  128,    0,  128,  129,  129,  129,
      129,  130,  131,  130,  131,    0,    0,  130,  129,  132,
      129,  132,  131,    0,  131,  131,  133,    0,  133,  132,
        0,  132,  132,  134,    0,  134,  133,  134,  133,  135,
      136,  135,  136,  134,    0,  134,  215,  215,  215,  135,

      136,  135,  136,  137,    0,  137,  136,    0,  138,    0,
      138,  139,  139,  137,  139,  137,    0,  137,  138,  140,
      138,  140,  139,    0,  139,  138,  141,    0,  141,  140,
      142,  140,  142,  216,  216,  216,  141,    0,  141,    0,
      142,    0,  142,    0,  141,  143,  143,    0,  143,  143,
      144,    0,  144,  143,    0,    0,  143,  144,  143,  145,
      144,  145,  144,  146,    0,  146,  145,    0,  147,  145,
      147,  145,    0,  146,  148,  146,  148,  148,  147,  147,
      147,  149,    0,  149,  148,  150,  148,  150,    0,    0,
      150,  149,  151,  149,  151,  150,  152,  150,  152,    0,

      153,  153,  151,  153,  151,  154,  152,  154,  152,    0,
      155,  153,  155,  153,  156,  154,  156,  154,    0,  154,
      155,    0,  155,  157,  156,  157,  156,    0,  158,  155,
      158,  156,    0,  157,  157,  157,    0,    0,  158,    0,
      158,  159,  160,  159,  160,  161,  161,  161,  162,  158,
      162,  159,  160,  159,  160,  161,    0,  161,  162,  163,
      162,  163,    0,  164,  163,  164,  162,    0,  165,  163,
      165,  163,    0,  164,    0,  164,    0,    0,  165,  164,
      165,  166,  165,  166,  165,    0,  167,  167,    0,  167,
      168,  166,  168,  166,  167,    0,    0,  167,  166,  167,

      168,    0,  168,  169,  169,  169,    0,  170,  168,  170,
      217,  217,  217,  169,  169,  169,    0,  170,  169,  170,
      169,  171,    0,  171,    0,  172,  174,  172,  174,  207,
      207,  171,    0,  171,  171,  172,  174,  172,  174,  171,
        0,    0,  171,  172,  174,  172,  173,  173,    0,  173,
      175,  175,  207,  175,  175,    0,  176,  173,  176,  173,
      177,  175,  177,  175,  175,  180,  176,  180,  176,    0,
      177,    0,  177,  178,  178,  180,  178,  180,    0,  181,
      176,  181,    0,  179,  178,  179,  178,  178,  179,  181,
      181,  181,  182,  179,  182,  179,  183,  184,  183,  184,

        0,  185,  182,  185,  182,    0,  183,  184,  183,  184,
      182,  185,  183,  185,  186,  187,  186,  187,  188,  185,
      188,    0,  187,    0,  186,  187,  186,  187,  188,    0,
      188,  188,  189,  190,  189,  190,    0,  191,    0,  191,
      208,  208,  189,  190,  189,  190,  190,  191,  189,  191,
      192,    0,  192,  211,  191,  211,  211,  211,    0,    0,
      192,    0,  192,  208,    0,  212,  192,  212,    0,    0,
      212,  212,  212,  213,    0,  213,  213,  213,  225,    0,
      225,    0,  226,  228,  226,  228,    0,  211,  225,  228,
      225,  225,  226,  228,  226,  228,  337,  337,  337,  338,

      338,  338,    0,    0,    0,    0,    0,  213,  223,  223,
        0,  223,  223,  223,  223,  223,  223,  223,  223,    0,
        0,  223,    0,  223,  223,  229,    0,  229,  223,  223,
      223,  223,  223,  227,  227,  229,  227,  229,  803,  803,
        0,    0,    0,  230,  227,  230,  227,  803,    0,  223,
      223,  223,  803,  230,  230,  230,  231,    0,  231,  231,
      233,  233,    0,  233,    0,  232,  231,  232,  231,    0,
      232,  233,  231,  233,  235,  232,  235,  232,    0,  223,
      234,  234,  234,    0,  235,  803,  235,  235,    0,  236,
      234,  236,  234,  235,  237,  238,  237,  238,    0,  236,

      238,  236,    0,    0,  237,  238,  237,  238,  237,  236,
      239,  240,  239,  240,  240,  241,  239,  241,    0,    0,
      239,  240,  239,  240,    0,  241,  242,  241,  242,  243,
      244,  243,  244,  242,  241,    0,  242,    0,  242,  243,
      244,  243,  244,  245,    0,  245,  244,  243,  246,  246,
        0,  246,    0,  245,  247,  245,  247,    0,    0,  246,
        0,  246,  245,    0,  247,  248,  247,  248,  248,  249,
      250,  249,  250,  250,    0,  248,    0,  248,    0,  249,
      250,  249,  250,  251,    0,  251,  251,  252,  253,  252,
      253,    0,  255,  251,  255,  251,    0,  252,  253,  252,

      253,  254,  255,  254,  255,  256,  254,  256,  257,    0,
      257,  254,    0,  254,    0,  256,    0,  256,  257,    0,
      257,  258,  258,  259,  258,  259,  257,  262,  259,  262,
      262,    0,  258,    0,  258,    0,  260,  262,  260,  262,
      259,  259,    0,  259,    0,  261,  260,  261,  260,    0,
        0,  259,  260,  259,    0,  261,  263,  261,  263,    0,
      264,  261,  264,  263,    0,  265,  263,  265,  263,  266,
      264,  266,  264,    0,  264,  265,    0,  265,  265,  266,
      267,  266,  267,  268,  269,  268,  269,  266,    0,    0,
      267,  267,  267,  268,  269,  268,  269,  270,  271,  270,

      271,  270,    0,  272,    0,  272,  272,  270,  271,  270,
      271,    0,  271,  272,  273,  272,  273,  274,  275,  274,
      275,    0,    0,  275,  273,    0,  273,  274,  275,  274,
      275,  276,  277,  276,  277,  278,  279,  278,  279,  283,
        0,  276,  277,  276,  277,  278,  279,  278,  279,  280,
      281,  280,  281,  281,  282,  284,  282,  284,    0,  280,
      281,  280,  281,    0,  282,  284,  282,  284,  290,  285,
      290,  285,  284,  283,  287,  283,  285,  283,  290,  285,
      290,  285,    0,  283,  286,  283,  286,  286,    0,    0,
      287,    0,  287,    0,  286,  288,  286,  288,  288,    0,

      287,  289,  287,  289,  289,  288,  291,  288,  291,    0,
        0,  289,  292,  289,  292,  292,  291,  293,  291,  293,
      291,    0,  292,  294,  292,  294,    0,  294,  293,    0,
      295,  293,  295,  294,  296,  294,  296,  293,    0,  293,
      295,    0,  295,    0,  296,    0,  296,  293,  297,  293,
      297,    0,  299,  295,  299,  298,    0,  298,  297,    0,
      297,  298,  299,    0,  299,  298,  297,  298,  300,  301,
      300,  301,  301,  302,    0,  302,    0,    0,  300,  301,
      300,  301,  303,  302,  303,  302,  300,  304,    0,  304,
        0,  302,  303,    0,  303,  305,  305,  304,  305,  304,

      304,  306,  307,  306,  307,  307,  305,  308,  305,  308,
        0,  306,  307,  306,  307,    0,  309,  308,  309,  308,
      306,    0,  310,  310,    0,  310,  309,  311,  309,  311,
      312,    0,  312,  310,  309,  310,    0,  311,    0,  311,
      312,    0,  312,  313,  311,  313,  313,    0,  314,  312,
      314,    0,  315,  313,  315,  313,    0,  316,  314,  316,
      314,  318,  315,  318,  315,  317,  317,  316,  317,  316,
        0,  318,    0,  318,    0,    0,  317,  319,  317,  319,
      319,  320,  318,  320,  321,    0,  321,  319,  320,  319,
        0,  320,    0,  320,  321,  322,  321,  322,    0,    0,

      321,    0,  323,    0,  323,  322,  323,  322,  325,  322,
      325,  325,  323,    0,  323,  324,  324,  324,  325,  326,
      325,  326,  327,  326,  327,  324,    0,  324,    0,  326,
        0,  326,  327,  328,  327,  328,  328,    0,    0,  327,
      329,  329,  329,  328,  330,  328,  330,  331,    0,  331,
      329,  332,  329,  332,  330,    0,  330,  331,    0,  331,
        0,  332,  330,  332,  333,  331,  333,  332,  334,    0,
      334,  333,    0,  335,  333,  335,  333,    0,  334,  336,
      334,  336,    0,  335,  334,  335,  336,    0,    0,  336,
        0,  336,  342,  342,    0,  342,  342,  342,  342,  342,

      342,  342,  342,    0,    0,  342,    0,  342,  342,  344,
        0,  344,  342,  342,  342,  342,  342,    0,    0,  344,
      345,  344,  345,    0,    0,  346,  346,    0,  346,    0,
      345,    0,  345,  342,  342,  342,  346,  345,  346,  347,
        0,  347,  347,  348,  348,  349,  348,  349,  350,  347,
      350,  347,    0,    0,  348,  349,  348,  349,  350,  351,
      350,  351,  352,  342,  352,  351,    0,  644,  644,  351,
        0,  351,  352,  353,  352,  353,  644,  354,  352,  354,
        0,  644,  353,  353,  355,  353,  355,  354,  356,  354,
      356,  356,    0,  354,  355,  355,  355,  357,  356,  357,

      356,  359,  358,  357,  358,  644,    0,  357,    0,  357,
        0,  360,  358,  360,  358,    0,  364,  364,  359,  364,
      359,  360,  361,  360,  361,  361,    0,  364,  359,  364,
      359,  362,  361,  362,  361,  363,  362,  363,  363,    0,
      366,  362,  366,  362,  365,  363,  365,  363,    0,  365,
      366,  368,  366,  368,  365,  367,  365,  367,  367,  366,
      369,  368,  369,  368,  370,  367,  370,  367,    0,  371,
      369,  371,  369,    0,  370,  372,  370,  372,  372,  371,
      373,  371,  373,    0,  374,  372,  374,  372,    0,  375,
      373,  375,  373,  376,  374,  376,  374,    0,    0,  375,

      377,  375,  377,  376,  378,  376,  378,    0,  375,    0,
      377,  380,  377,  380,  378,  379,  378,  379,  379,    0,
        0,  380,    0,  380,  381,  379,  381,  379,  382,  380,
      382,  381,    0,    0,  381,  382,  381,  385,  382,  385,
      382,  383,  383,  383,  384,    0,  384,  385,    0,  385,
      385,  383,    0,  383,  384,  386,  384,  386,  384,    0,
      388,    0,  388,  388,  387,  386,  387,  386,    0,  387,
      388,  386,  388,  389,  387,  389,  387,  390,    0,  390,
        0,    0,  391,  389,  391,  389,    0,  390,  391,  390,
      389,  392,  391,  392,  391,  393,  394,  393,  394,    0,

        0,  392,    0,  392,    0,  393,  394,  393,  394,  394,
      395,  396,  395,  396,    0,  397,  395,  397,    0,  397,
      395,  396,  395,  396,  396,  397,  398,  397,  398,  399,
      400,  399,    0,  400,  400,  400,  398,    0,  398,  399,
      401,  399,  401,  402,    0,  402,  402,    0,    0,    0,
      401,    0,  401,  402,  404,  402,  404,  400,  403,  403,
      403,  405,    0,  405,  404,  406,  404,  406,  403,    0,
      403,  405,  407,  405,  407,  406,    0,  406,    0,  408,
        0,  408,  407,    0,  407,  410,    0,  410,  407,  408,
        0,  408,  408,  409,  409,  410,  409,  410,  412,    0,

      412,    0,  411,    0,  411,    0,  414,    0,  412,    0,
      412,  409,  411,  409,  411,  411,  412,  413,    0,  413,
      415,  409,  415,  409,  413,    0,  414,  413,  414,  413,
      415,    0,  415,  415,    0,  416,  414,  416,  414,  417,
      416,  417,  418,    0,  418,  416,  419,  416,  419,  417,
        0,  417,  418,  419,  418,  420,  419,  420,  419,  421,
      422,  421,  422,    0,  423,  420,  423,  420,    0,  421,
      422,  421,  422,    0,  423,  424,  423,  424,    0,    0,
      426,  425,  426,  425,  423,  424,  424,  424,  425,  427,
      426,  425,  426,  425,  428,  429,  428,  429,  426,  427,

        0,  427,    0,    0,  428,  429,  428,  429,  430,  427,
      430,  427,  428,  431,    0,  431,    0,    0,  430,  432,
      430,  432,  432,  431,  430,  431,  433,    0,  433,  432,
      434,  432,  434,  435,    0,  435,  433,    0,  433,  433,
      434,    0,  434,  435,    0,  435,  434,  436,  437,  436,
      437,  438,  439,  438,  440,    0,  440,  436,  437,  436,
      437,  438,    0,  438,  440,    0,  440,  441,    0,  438,
      443,  439,  443,  439,  442,  441,    0,  442,  441,    0,
      443,  439,  443,  439,    0,    0,  441,  444,  441,  444,
      442,  445,  442,  445,  444,    0,  441,  444,  441,  444,

      442,  445,  442,  445,  445,  446,  447,  446,  447,    0,
        0,  446,  447,    0,    0,  446,  447,  446,  447,  448,
        0,  448,  448,  449,    0,  449,  451,    0,  451,  448,
        0,  448,  450,  449,  450,  449,  451,  450,  451,    0,
        0,  452,  450,  452,  450,  456,  452,  456,  457,    0,
      457,  452,    0,  452,    0,  456,    0,  456,  457,  458,
      457,  458,    0,  459,  456,  459,  460,    0,  460,  458,
      461,  458,  461,  459,    0,  459,  460,  462,  460,  462,
      461,  463,  461,  463,  460,    0,    0,  462,  461,  462,
      464,  463,  464,  463,  465,    0,  465,  464,    0,  466,

      464,  466,  464,    0,  465,    0,  465,  467,  467,  466,
      467,  466,  468,    0,  468,  468,    0,  469,  467,  469,
      467,  470,  468,  470,  468,    0,  471,  469,  471,  469,
      469,  470,  471,  470,    0,  472,  471,  472,  471,  473,
      474,  473,  474,    0,  475,  472,  475,  472,    0,  473,
      474,  473,  474,  476,  475,  476,  475,  473,  477,  478,
      477,  478,  478,  476,  479,  476,  479,    0,  477,  478,
      477,  478,    0,    0,  479,  477,  479,  480,  481,  480,
      481,  481,  482,    0,  482,    0,    0,  480,  481,  480,
      481,    0,  482,  480,  482,  482,  483,    0,  483,  484,

      484,    0,  484,    0,    0,    0,  483,    0,  483,  485,
      484,  485,  484,  486,  483,  486,  485,    0,  486,  485,
        0,  485,  487,  486,  487,  486,  488,  487,  488,  489,
        0,  489,  487,  490,  487,  490,  488,    0,  488,  489,
      491,  489,  491,  490,  488,  490,  489,    0,    0,  490,
      491,  492,  491,  492,  493,  497,  493,    0,  491,    0,
        0,  492,    0,  492,  493,    0,  493,  492,  494,  494,
      494,  495,  496,  495,  496,    0,    0,    0,  494,    0,
      494,  495,  496,  495,  496,    0,  498,  497,  498,  497,
      499,  500,  499,  500,    0,    0,  498,  497,  498,  497,

      499,  500,  499,  500,  498,  501,  501,    0,    0,  501,
      501,  502,    0,  502,    0,  501,  503,    0,  503,  503,
        0,  502,  501,  502,  501,  504,  503,  504,  503,  505,
        0,  505,  501,  502,  501,  504,  506,  504,  506,  505,
        0,  505,  508,    0,  508,  505,  506,    0,  506,  506,
      507,  507,  508,  507,  508,  508,  509,  510,  509,  510,
        0,  507,  511,  507,  511,    0,  509,  510,  509,  510,
      509,  512,  511,  512,  511,    0,  513,  514,  513,  514,
        0,  512,  515,  512,  515,  511,  513,  514,  513,  514,
        0,    0,  515,  514,  515,  515,  516,  517,  516,  517,

      517,  518,  520,  518,  518,    0,  516,  517,  516,  517,
      519,  518,  519,  518,  516,    0,  521,  521,    0,  521,
      519,  520,  519,  520,    0,    0,  519,  521,  524,  521,
      524,  520,  522,  520,  522,  522,  523,  523,  524,  523,
      524,  525,  522,  525,  522,  528,  526,  523,  526,  523,
        0,  525,    0,  525,    0,  527,  526,  527,  526,    0,
        0,    0,  525,    0,  528,  527,  528,  527,  529,    0,
      529,  529,    0,  530,  528,  530,  528,  531,  529,  531,
      529,    0,  532,  530,  532,  530,  530,  531,  533,  531,
      533,  537,  532,    0,  532,  532,  536,  531,  533,  534,

      533,  534,  534,  535,    0,  535,    0,  539,  536,  534,
      536,  534,  538,  535,  538,  535,  535,    0,  536,    0,
      536,    0,  538,    0,  538,  537,  539,  537,  539,  540,
        0,  540,  540,    0,    0,  537,  539,  537,  539,  540,
      541,  540,  541,  542,    0,  542,  542,  541,    0,  543,
      541,  543,  541,  542,    0,  542,  543,    0,  546,  543,
      546,  543,  547,  548,  547,  548,    0,    0,  546,  547,
      546,    0,  547,  548,  547,  548,  546,  549,  550,  549,
      550,  551,  552,  551,  552,    0,    0,  549,  550,  549,
      550,  551,  552,  551,  552,  550,  553,  554,  553,  554,

        0,  549,    0,    0,    0,    0,  553,  554,  553,  554,
      555,  556,  555,  556,  553,  554,  557,  555,  557,    0,
      555,  556,  555,  556,  559,  558,  557,  558,  557,  556,
      560,  560,  558,  560,    0,  558,  561,  558,  561,    0,
        0,  560,  559,  560,  559,    0,  561,    0,  561,  562,
      562,  562,  559,  563,  559,  563,  563,    0,  564,  562,
      564,  562,  565,  563,  565,  563,    0,    0,  564,  566,
      564,  566,  565,    0,  565,  565,  566,    0,  564,  566,
      567,  566,  567,  568,    0,  568,  569,  567,  569,  569,
      567,    0,  567,  568,    0,  568,  569,  570,  569,  570,

      571,    0,  571,  572,  572,    0,  572,  570,    0,  570,
      571,    0,  571,    0,  572,  570,  572,  573,    0,  573,
      573,  574,    0,  574,    0,  575,  575,  573,  576,  573,
      576,  574,    0,  574,  575,    0,    0,  574,  576,  575,
      576,  577,    0,  577,    0,  578,  579,  578,  579,  579,
      580,  577,  580,  577,  577,  578,  579,  578,  579,  581,
      580,  581,  580,  580,  582,    0,  582,    0,    0,  581,
        0,  581,    0,  581,  582,  582,  582,  583,    0,  583,
      575,  584,  585,  584,  585,    0,    0,  583,  583,  583,
        0,  584,  585,  584,  585,  586,  587,  586,  587,  584,

        0,  585,    0,    0,    0,  586,  587,  586,  587,  588,
        0,  588,  587,  586,  589,  588,  589,    0,  590,  588,
      590,  588,    0,  591,  589,  591,  589,  589,  590,    0,
      590,    0,  592,  591,  592,  591,    0,  593,    0,  593,
        0,  591,  592,  594,  592,  594,  592,  593,  593,  593,
      595,    0,  595,  594,  596,  594,  596,  597,    0,  597,
      595,    0,  595,    0,  596,    0,  596,  597,  598,  597,
      598,  598,  599,  595,  599,  599,    0,  600,  598,  600,
      598,  601,  599,  601,  599,    0,    0,  600,  602,  600,
      602,  601,    0,  601,    0,  600,    0,  603,  602,  603,

      602,    0,    0,  601,  601,  601,  602,  603,  604,  603,
      604,  604,  605,  606,  605,  606,    0,    0,  604,    0,
      604,    0,  605,  606,  605,  606,  607,    0,  607,  607,
      608,  606,  608,  609,    0,  609,  607,    0,  607,    0,
      608,    0,  608,  609,  608,  609,  610,  610,  611,  610,
      611,  609,  612,  612,    0,  612,    0,  610,  611,  610,
      611,    0,    0,  612,  613,  612,    0,  613,  613,  613,
      614,    0,  614,  614,  615,  616,  615,  616,    0,    0,
      614,    0,  614,    0,  615,  616,  615,  616,    0,    0,
      615,  613,  617,  618,  617,  618,    0,  621,    0,  621,

      621,    0,  617,  618,  617,  618,    0,  621,  617,  621,
      622,    0,  622,  626,  623,    0,  623,  623,    0,  625,
      622,  625,  622,  622,  623,  624,  623,  624,  624,  625,
      626,  625,  626,    0,  627,  624,  627,  624,    0,  628,
      626,  628,  626,    0,  627,  629,  627,    0,  630,  628,
      630,  628,  628,  631,  629,  631,  629,  632,  630,  632,
      630,  630,    0,  631,  629,  631,  629,  632,  633,  632,
      633,  634,    0,  634,    0,  632,    0,  633,  633,    0,
      633,  634,  635,  634,  635,  635,  636,  634,  636,  637,
        0,  637,  635,  638,  635,  638,  636,    0,  636,  637,

      639,  637,  639,  638,  640,  638,  640,  641,    0,  641,
      639,    0,  639,  642,  640,  642,  640,  641,    0,  641,
        0,  641,    0,  642,  643,  642,  643,  643,    0,  645,
      642,  645,    0,  646,  643,  646,  643,    0,    0,  645,
        0,  645,  648,  646,  648,  646,  647,  647,    0,  647,
      645,  646,  648,  649,  648,  649,  650,  647,  650,  647,
        0,    0,  648,  649,    0,  649,  650,  651,  650,  651,
      651,  652,  653,  652,  653,    0,    0,  651,    0,  651,
        0,  652,  653,  652,  653,  654,    0,  654,  654,  655,
        0,  655,    0,  656,  656,  654,  656,  654,    0,  655,

      655,  655,    0,  657,  656,  657,  656,    0,  658,    0,
      658,  658,    0,  657,    0,  657,  806,  806,  658,  657,
      658,  659,  660,  659,  660,  806,    0,  659,  660,    0,
      806,  659,  660,  659,  660,  661,  661,  662,  661,  662,
      663,  664,  663,  664,    0,    0,  661,  662,  661,  662,
      663,  664,  663,  664,  665,  666,  665,  666,  667,    0,
      667,  666,    0,    0,  665,  666,  665,  666,  667,  668,
      667,  668,  669,  670,  669,  670,  671,    0,  671,  668,
      670,  668,  669,  670,  669,  670,  671,    0,  671,  672,
      672,  672,  673,  674,  673,  674,  675,    0,  675,  672,

        0,  672,  673,  674,  673,  674,  675,    0,  675,  674,
      673,  676,    0,  676,  676,  677,  678,  677,  678,    0,
      679,  676,  679,  676,    0,  677,  678,  677,  678,  680,
      679,  680,  679,    0,  679,  677,  681,    0,  681,  680,
      682,  680,  682,  683,    0,  683,  681,  684,  681,  684,
      682,    0,  682,  683,  688,  683,  688,  684,  689,  684,
      689,  690,    0,  690,  688,  691,  688,  691,  689,    0,
      689,  690,  692,  690,  692,  691,  688,  691,  690,    0,
        0,  694,  692,  694,  692,  692,  693,    0,  693,  693,
      696,  694,  696,  694,    0,  695,  693,  695,  693,    0,

      696,  695,  696,    0,  697,  695,  697,  695,  698,    0,
      698,  697,    0,    0,  697,  698,  697,  699,  698,  699,
      698,  700,  701,  700,  701,    0,  702,  699,  702,  699,
        0,  700,  701,  700,  701,  703,  702,  703,  702,  704,
      705,  704,  705,    0,    0,  703,  705,  703,    0,  704,
      705,  704,  705,  706,  707,  706,  707,  707,  708,  708,
        0,  713,    0,  706,  707,  706,  707,  708,    0,  709,
      706,  709,  708,  710,    0,  710,  710,    0,  711,  709,
      711,  709,    0,  710,  712,  710,  712,  712,  711,  714,
      711,  714,    0,  713,  712,  713,  712,    0,  711,  714,

      715,  714,  715,  713,  716,  713,  716,    0,    0,  708,
      715,  718,  715,  718,  716,  719,  716,  719,  715,  717,
      717,  718,  717,  718,  720,  719,  720,  719,    0,  721,
      717,  721,  717,  723,  720,  723,  720,  722,  722,  721,
      722,  721,    0,  723,  725,  723,  725,  726,  722,  726,
      722,  724,  724,  724,  725,    0,  725,  726,    0,  726,
      726,  724,    0,  724,  727,  727,  727,  728,  729,  728,
      729,    0,    0,  728,  727,    0,  727,  728,  729,  728,
      729,  729,  730,  731,  730,  731,  732,    0,  732,  732,
        0,    0,  730,  731,  730,  731,  732,    0,  732,  731,

      733,  737,  733,  737,  733,  734,  734,  734,    0,    0,
      733,  737,  733,  737,    0,  734,  738,  734,  738,  739,
      740,  739,  740,  741,  737,  741,  738,    0,  738,  739,
      740,  739,  740,  741,    0,  741,  739,  742,  740,  742,
      741,  743,    0,  743,    0,    0,  744,  742,  744,  742,
        0,  743,    0,  743,  743,  746,  744,  746,  744,  745,
      745,  745,  747,    0,  747,  746,    0,  746,  746,  745,
        0,  745,  747,  748,  747,  748,  749,    0,  749,    0,
      750,  750,    0,  748,    0,  748,  749,    0,  749,  750,
      751,  752,  751,  752,  750,    0,  753,    0,  753,  753,

      751,  752,  751,  752,  755,  755,  753,  752,  753,  754,
      756,  754,  756,  755,  757,  758,  757,  758,  755,  754,
      756,  754,  756,    0,  757,  758,  757,  758,  756,  759,
        0,  759,  750,  758,  760,  760,  760,    0,  762,  759,
      762,  759,    0,  761,  760,  761,  760,    0,  762,  761,
      762,    0,  763,  761,  763,  761,    0,    0,  763,  755,
        0,  764,  763,  764,  763,  765,    0,  765,  766,    0,
      766,  764,  767,  764,  767,  765,  765,  765,  766,  768,
      766,  768,  767,  772,  767,  772,  769,    0,  769,  768,
        0,  768,  769,  772,    0,  772,  769,  773,  769,  773,

      774,  775,  774,  775,  776,    0,  776,  773,    0,  773,
      774,  775,  774,  775,  776,    0,  776,  777,  775,  777,
      778,  779,  778,  779,    0,  776,  777,  777,    0,  777,
      778,  779,  778,  779,  780,  780,    0,  781,    0,  781,
      782,    0,  782,  780,  783,  783,    0,  781,  780,  781,
      782,    0,  782,  783,  784,  785,  784,  785,  783,  786,
        0,  786,  786,    0,  784,  785,  784,  785,  787,  786,
      787,  786,    0,  788,    0,  788,  780,  789,  787,  789,
      787,    0,  783,  788,  790,  788,  790,  789,  791,  789,
      791,  794,    0,  794,  790,  795,  790,  795,  791,    0,

      791,  794,  796,  794,  796,  795,  797,  795,  797,    0,
      798,  798,  796,  800,  796,  800,  797,    0,  797,  798,
      799,  799,    0,  800,  798,  800,  804,  804,    0,  799,
      807,  807,  809,  809,  799,  804,  810,  810,    0,  807,
      804,  809,  811,  811,  807,  810,  809,    0,    0,    0,
      810,  811,    0,    0,    0,    0,  811,    0,  798,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  799,  807,    0,    0,    0,    0,    0,  804,    0,
      809,    0,    0,  810,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  815,  815,  815,  815,  815,  815,  815,  815,
      815,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  819,  819,
        0,  819,  819,  820,  820,  820,  820,  820,  821,    0,
      821,  821,  821,  821,  821,  821,  821,  822,  822,    0,
      822,  822,  823,    0,  823,  823,  823,  823,  823,  823,
      823,  824,  824,    0,  824,  824,  824,  824,  824,  824,
      825,  825,  825,    0,  825,  825,  825,  825,  825,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  828,  828,    0,
      828,  829,  829,  829,  829,  831,    0,  831,  831,  831,
      831,  831,  831,  831,  832,  832,    0,  832,  833,    0,
      833,  834,    0,  834,  834,  834,  834,  834,  834,  834,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
      812,  812,  812
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[205] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 
    0, 0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() (yyg->yy_more_flag = 1)
#define YY_MORE_ADJ yyg->yy_more_len
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ITL.l"
#line 10 "ITL.l"

//#include <stdio.h>
#include <iostream>
#include "IMessage.h"
#include "ITLparser.h"
#include "ITLparse.hpp"

using namespace std;

#define YY_EXTRA_TYPE inscore::ITLparser*
#define YY_USER_ACTION yylloc->last_line = yylineno; yylloc->first_column += strlen(yytext);

#define YY_INPUT(buf,result,max_size)   \
   {                                       \
	  char c;                              \
      yyextra->fStream->get( c );                 \
	  if (yyextra->fStream->eof())               \
         result = YY_NULL;                 \
      else {                               \
         buf[0] = c;                       \
         result = 1;                       \
      }                                    \
   }

static int nested;

#define YY_NO_UNISTD_H
// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
static  char* unescape (char * str) {
	int n = strlen(str);
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (int r=0, w=0; r <= n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			char next = str[r+1];
			if ((next != '\'') && (next != '"')) 	// escape only ' and "
				str[w++] = str[r];		// output the escape char 
		}
		else str[w++] = str[r];			// no escape: put the current char at write location 
	}
	return str;
}

// ----------------------------------------------------------------------------------------







#line 1806 "ITLlex.cpp"

#define INITIAL 0
#define CMNTLN 1
#define COMMENT 2
#define DQSTR 3
#define QSTR 4
#define LUASECTION 5
#define JSECTION 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int ITLlex_init (yyscan_t* scanner);

int ITLlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int ITLlex_destroy (yyscan_t yyscanner );

int ITLget_debug (yyscan_t yyscanner );

void ITLset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ITLget_extra (yyscan_t yyscanner );

void ITLset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ITLget_in (yyscan_t yyscanner );

void ITLset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ITLget_out (yyscan_t yyscanner );

void ITLset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t ITLget_leng (yyscan_t yyscanner );

char *ITLget_text (yyscan_t yyscanner );

int ITLget_lineno (yyscan_t yyscanner );

void ITLset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * ITLget_lval (yyscan_t yyscanner );

void ITLset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *ITLget_lloc (yyscan_t yyscanner );
    
        void ITLset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ITLwrap (yyscan_t yyscanner );
#else
extern int ITLwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int ITLlex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int ITLlex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 76 "ITL.l"


 /* ----------------------------------------- */
 /*	digits */
 /* ----------------------------------------- */
#line 2057 "ITLlex.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ITLensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		ITL_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yyg->yy_more_len = 0;
		if ( yyg->yy_more_flag )
			{
			yyg->yy_more_len = yyg->yy_c_buf_p - yyg->yytext_ptr;
			yyg->yy_more_flag = 0;
			}
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 813 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 812 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = yyg->yy_more_len; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 81 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 82 "ITL.l"
yyextra->fInt = atoi(yytext); return UINT;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 83 "ITL.l"
yyextra->fInt = atoi(yytext); return INT;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 85 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 86 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "ITL.l"
yyextra->fFloat = atof(yytext); return FLOAT;
	YY_BREAK
/* ----------------------------------------- */
/*	basic delimiters and markers */
/* ----------------------------------------- */
case 7:
YY_RULE_SETUP
#line 92 "ITL.l"
return EQUAL;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "ITL.l"
return LPAR;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "ITL.l"
return RPAR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 95 "ITL.l"
return SEP;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 96 "ITL.l"
return PATHSEP;			/* OSC address and path separator */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 97 "ITL.l"
return ENDEXPR;			/* end of expression */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "ITL.l"
return VARSTART;
	YY_BREAK
/* ----------------------------------------- */
/*	application messages */
/* ----------------------------------------- */
case 14:
YY_RULE_SETUP
#line 103 "ITL.l"
return HELLO;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 104 "ITL.l"
return LOAD;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 105 "ITL.l"
return REQUIRE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 106 "ITL.l"
return QUIT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 107 "ITL.l"
return MOUSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 108 "ITL.l"
return ROOTPATH;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 109 "ITL.l"
return DEFAULTSHOW;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 111 "ITL.l"
return PORT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 112 "ITL.l"
return OUTPORT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 113 "ITL.l"
return ERRPORT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 114 "ITL.l"
return RATE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "ITL.l"
return STARTBENCH;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "ITL.l"
return STOPBENCH;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "ITL.l"
return RESETBENCH;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "ITL.l"
return WRITEBENCH;
	YY_BREAK
/* ----------------------------------------- */
/*	boolean */
/* ----------------------------------------- */
case 29:
YY_RULE_SETUP
#line 124 "ITL.l"
return YES;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 125 "ITL.l"
return NO;
	YY_BREAK
/* ----------------------------------------- */
/*	application vnode (debug) */
/* ----------------------------------------- */
case 31:
YY_RULE_SETUP
#line 130 "ITL.l"
return OSCDBG;
	YY_BREAK
/* ----------------------------------------- */
/*	(file) watcher messages (should become obsolete) */
/* ----------------------------------------- */
case 32:
YY_RULE_SETUP
#line 135 "ITL.l"
return ADD;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 136 "ITL.l"
return REMOVE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 137 "ITL.l"
return CLEAR;
	YY_BREAK
/* ----------------------------------------- */
/*	mapping messages */
/* ----------------------------------------- */
case 35:
YY_RULE_SETUP
#line 142 "ITL.l"
return MAP;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "ITL.l"
return MAPPLUS;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "ITL.l"
return MAPFILE;
	YY_BREAK
/* ----------------------------------------- */
/*	IGrid messages */
/* ----------------------------------------- */
case 38:
YY_RULE_SETUP
#line 150 "ITL.l"
return COLUMNS;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 151 "ITL.l"
return ROWS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 152 "ITL.l"
return XBORDER;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 153 "ITL.l"
return YBORDER;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 154 "ITL.l"
return ORDER;
	YY_BREAK
/* ----------------------------------------- */
/* guido specific messages */
/* ----------------------------------------- */
case 43:
YY_RULE_SETUP
#line 159 "ITL.l"
return PAGE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 160 "ITL.l"
return DPAGE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 161 "ITL.l"
return PAGEFORMAT;
	YY_BREAK
/* ----------------------------------------- */
/*	common messages */
/* ----------------------------------------- */
case 46:
YY_RULE_SETUP
#line 167 "ITL.l"
return ALIAS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 168 "ITL.l"
return SET;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 169 "ITL.l"
return GET;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 170 "ITL.l"
return DEL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 171 "ITL.l"
return EXPORT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 172 "ITL.l"
return RENAME;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 173 "ITL.l"
return SAVE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 174 "ITL.l"
return WATCH;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 175 "ITL.l"
return WATCHPLUS;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 176 "ITL.l"
return PUSH;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 177 "ITL.l"
return POP;
	YY_BREAK
/* ----------------------------------------- */
/*	common color messages */
/* ----------------------------------------- */
case 57:
YY_RULE_SETUP
#line 182 "ITL.l"
return RGB;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 183 "ITL.l"
return RED;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 184 "ITL.l"
return GREEN;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 185 "ITL.l"
return BLUE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 186 "ITL.l"
return ALPHA;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 187 "ITL.l"
return HSB;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 188 "ITL.l"
return HUE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 189 "ITL.l"
return SATURATION;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 190 "ITL.l"
return BRIGHTNESS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 191 "ITL.l"
return DRGB;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 192 "ITL.l"
return DRED;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 193 "ITL.l"
return DGREEN;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 194 "ITL.l"
return DBLUE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 195 "ITL.l"
return DALPHA;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 196 "ITL.l"
return DHSB;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 197 "ITL.l"
return DHUE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 198 "ITL.l"
return DSATURATION;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 199 "ITL.l"
return DBRIGHTNESS;
	YY_BREAK
/* ----------------------------------------- */
/*	common position messages */
/* ----------------------------------------- */
case 75:
YY_RULE_SETUP
#line 204 "ITL.l"
return X;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 205 "ITL.l"
return Y;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 206 "ITL.l"
return Z;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 207 "ITL.l"
return ANGLE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 208 "ITL.l"
return SCALE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 209 "ITL.l"
return XORIGIN;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 210 "ITL.l"
return YORIGIN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 211 "ITL.l"
return DX;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 212 "ITL.l"
return DY;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 213 "ITL.l"
return DZ;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 214 "ITL.l"
return DANGLE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 215 "ITL.l"
return DSCALE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 216 "ITL.l"
return DXORIGIN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 217 "ITL.l"
return DYORIGIN;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 219 "ITL.l"
return SHEAR;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 220 "ITL.l"
return ROTATEX;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 221 "ITL.l"
return ROTATEY;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 222 "ITL.l"
return ROTATEZ;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 223 "ITL.l"
return SHOW;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 224 "ITL.l"
return EFFECT;
	YY_BREAK
/* ----------------------------------------- */
/*	common date messages */
/* ----------------------------------------- */
case 95:
YY_RULE_SETUP
#line 229 "ITL.l"
return DATE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 230 "ITL.l"
return DURATION;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 231 "ITL.l"
return DDATE;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 232 "ITL.l"
return DDURATION;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 233 "ITL.l"
return CLOCK;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 234 "ITL.l"
return DURCLOCK;
	YY_BREAK
/* ----------------------------------------- */
/*	common debug messages */
/* ----------------------------------------- */
case 101:
YY_RULE_SETUP
#line 239 "ITL.l"
return NAME;
	YY_BREAK
/* ----------------------------------------- */
/*	common rect shaped messages */
/* ----------------------------------------- */
case 102:
YY_RULE_SETUP
#line 244 "ITL.l"
return WIDTH;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 245 "ITL.l"
return HEIGHT;
	YY_BREAK
/* ----------------------------------------- */
/*	common shape messages */
/* ----------------------------------------- */
case 104:
YY_RULE_SETUP
#line 250 "ITL.l"
return PENCOLOR;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 251 "ITL.l"
return PENALPHA;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 252 "ITL.l"
return PENDALPHA
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 253 "ITL.l"
return PENWIDTH;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 254 "ITL.l"
return PENSTYLE;
	YY_BREAK
/* ----------------------------------------- */
/*	scene messages */
/* ----------------------------------------- */
case 109:
YY_RULE_SETUP
#line 259 "ITL.l"
return NEW;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 260 "ITL.l"
return RESET;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 261 "ITL.l"
return FULLSCREEN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 262 "ITL.l"
return FRAMELESS;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 263 "ITL.l"
return ABSOLUTEXY; 
	YY_BREAK
/* ----------------------------------------- */
/*	sync node messages */
/* ----------------------------------------- */
case 114:
YY_RULE_SETUP
#line 268 "ITL.l"
return WILDCARD;
	YY_BREAK
/* ----------------------------------------- */
/*	signals messages */
/* ----------------------------------------- */
case 115:
YY_RULE_SETUP
#line 273 "ITL.l"
return DEFAULT;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 274 "ITL.l"
return SIZE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 275 "ITL.l"
return SIGSELECT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 276 "ITL.l"
return SIGSELECTMOD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 277 "ITL.l"
return DEBUG;
	YY_BREAK
/* ----------------------------------------- */
/*	video mapping */
/* ----------------------------------------- */
case 120:
YY_RULE_SETUP
#line 282 "ITL.l"
return VIDEOMAP;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 283 "ITL.l"
return VIDEOMAPFILE;
	YY_BREAK
/* ----------------------------------------- */
/*	objects types */
/* ----------------------------------------- */
case 122:
YY_RULE_SETUP
#line 289 "ITL.l"
return TLINE;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 290 "ITL.l"
return TPOLYGON;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 291 "ITL.l"
return TRECT;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 292 "ITL.l"
return TCURVE;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 293 "ITL.l"
return TELLIPSE;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 295 "ITL.l"
return TGRAPH;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 296 "ITL.l"
return TFASTGRAPH;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 297 "ITL.l"
return TGRID;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 299 "ITL.l"
return TGMN;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 300 "ITL.l"
return TGMNFILE;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 301 "ITL.l"
return THTML;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 302 "ITL.l"
return THTMLFILE;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 303 "ITL.l"
return TSVG;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 304 "ITL.l"
return TSVGFILE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 305 "ITL.l"
return TTXT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 306 "ITL.l"
return TTXTFILE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 308 "ITL.l"
return TIMG;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 309 "ITL.l"
return TVIDEO;
	YY_BREAK
/* ----------------------------------------- */
/*	special get forms */
/* ----------------------------------------- */
case 140:
YY_RULE_SETUP
#line 316 "ITL.l"
return VERSION;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 317 "ITL.l"
return GUIDOVERSION;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 318 "ITL.l"
return MXMLVERSION;
	YY_BREAK
/* special gmn get forms */
case 143:
YY_RULE_SETUP
#line 321 "ITL.l"
return PAGECOUNT;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 322 "ITL.l"
return PAGEDATE;
	YY_BREAK
/* special signal get forms */
case 145:
YY_RULE_SETUP
#line 325 "ITL.l"
return DIMENSION;
	YY_BREAK
/* special faust plugin get forms */
case 146:
YY_RULE_SETUP
#line 328 "ITL.l"
return IN;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 329 "ITL.l"
return OUT;
	YY_BREAK
/* ----------------------------------------- */
/*	effects */
/* ----------------------------------------- */
case 148:
YY_RULE_SETUP
#line 334 "ITL.l"
return NONE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 335 "ITL.l"
return BLUR;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 336 "ITL.l"
return COLORIZE; 
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 337 "ITL.l"
return SHADOW;
	YY_BREAK
/* ----------------------------------------- */
/*	blur hint */
/* ----------------------------------------- */
case 152:
YY_RULE_SETUP
#line 342 "ITL.l"
return BPERFORMANCE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 343 "ITL.l"
return BQUALITY;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 344 "ITL.l"
return BANIMATION;
	YY_BREAK
/* ----------------------------------------- */
/*	pen styles */
/* ----------------------------------------- */
case 155:
YY_RULE_SETUP
#line 349 "ITL.l"
return PENSOLID;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 350 "ITL.l"
return PENDASH;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 351 "ITL.l"
return PENDOT;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 352 "ITL.l"
return PENDASHDOT;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 353 "ITL.l"
return PENDASHDOTDOT;
	YY_BREAK
/* ----------------------------------------- */
/*	sync align and stretch */
/* ----------------------------------------- */
case 160:
YY_RULE_SETUP
#line 358 "ITL.l"
return SYNCOVER;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 359 "ITL.l"
return SYNCTOP;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 360 "ITL.l"
return SYNCBOTTOM;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 361 "ITL.l"
return HSTRETCH;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 362 "ITL.l"
return VSTRETCH;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 363 "ITL.l"
return HVSTRETCH;
	YY_BREAK
/* ----------------------------------------- */
/*	interaction messages */
/* ----------------------------------------- */
case 166:
YY_RULE_SETUP
#line 368 "ITL.l"
return MOUSEDOWN;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 369 "ITL.l"
return MOUSEUP;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 370 "ITL.l"
return MOUSEENTER;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 371 "ITL.l"
return MOUSELEAVE;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 372 "ITL.l"
return MOUSEMOVE;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 373 "ITL.l"
return DOUBLECLICK;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 375 "ITL.l"
return TIMEENTER;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 376 "ITL.l"
return TIMELEAVE;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 377 "ITL.l"
return DURENTER;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 378 "ITL.l"
return DURLEAVE;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 380 "ITL.l"
return NEWELEMENT;
	YY_BREAK
/* ----------------------------------------- */
/*	comments */
/* ----------------------------------------- */
case 177:
YY_RULE_SETUP
#line 386 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 387 "ITL.l"
BEGIN CMNTLN;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 388 "ITL.l"

	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 389 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 391 "ITL.l"

	YY_BREAK
case 182:
YY_RULE_SETUP
#line 392 "ITL.l"
nested++; 
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 393 "ITL.l"
if (--nested==0) BEGIN INITIAL;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 394 "ITL.l"
nested=1; BEGIN COMMENT;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 396 "ITL.l"
yyextra->fText = yytext; return IDENTIFIER;		/* identifiers */
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 397 "ITL.l"
yyextra->fText = yytext; return MAPIDENTIFIER;	/* identifiers with map name */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 399 "ITL.l"
BEGIN DQSTR;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 400 "ITL.l"
BEGIN QSTR;
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 401 "ITL.l"
yyextra->fText = unescape(yytext); return STRING;
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 402 "ITL.l"
yyextra->fText = unescape(yytext); return STRING;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 403 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 404 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 406 "ITL.l"
BEGIN LUASECTION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 407 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 408 "ITL.l"
yyextra->fText = unescape(yytext); return LUASCRIPT;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 410 "ITL.l"
BEGIN JSECTION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 411 "ITL.l"
BEGIN INITIAL;
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 412 "ITL.l"
yyextra->fText = unescape(yytext); return JSCRIPT;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 415 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 416 "ITL.l"
yyextra->fText = yytext; return REGEXP;			/* regular expression */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 418 "ITL.l"
;   /* eat up space */
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 420 "ITL.l"
yylloc->first_column=0; /* ignore */
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 422 "ITL.l"
yyextra->fText = yytext; return ERR;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 424 "ITL.l"
ECHO;
	YY_BREAK
#line 3269 "ITLlex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CMNTLN):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DQSTR):
case YY_STATE_EOF(QSTR):
case YY_STATE_EOF(LUASECTION):
case YY_STATE_EOF(JSECTION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * ITLlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ITLwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of ITLlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					ITLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			ITLrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) ITLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 813 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 813 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 812);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					ITLrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ITLwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void ITLrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ITLensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            ITL_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	ITL_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	ITL_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void ITL_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		ITLpop_buffer_state();
	 *		ITLpush_buffer_state(new_buffer);
     */
	ITLensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	ITL_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ITLwrap()) processing, but the only time this flag
	 * is looked at is after ITLwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void ITL_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE ITL_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ITLalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_create_buffer()" );

	b->yy_is_our_buffer = 1;

	ITL_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with ITL_create_buffer()
 * @param yyscanner The scanner object.
 */
    void ITL_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ITLfree((void *) b->yy_ch_buf ,yyscanner );

	ITLfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a ITLrestart() or at EOF.
 */
    static void ITL_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	ITL_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then ITL_init_buffer was _probably_
     * called from ITLrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void ITL_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		ITL_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void ITLpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ITLensure_buffer_stack(yyscanner);

	/* This block is copied from ITL_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from ITL_switch_to_buffer. */
	ITL_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void ITLpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		ITL_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ITLensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ITLrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ITLensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE ITL_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ITLalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	ITL_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to ITLlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       ITL_scan_bytes() instead.
 */
YY_BUFFER_STATE ITL_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return ITL_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to ITLlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE ITL_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ITLalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in ITL_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = ITL_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in ITL_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ITLget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ITLget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ITLget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ITLget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t ITLget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ITLget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ITLset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ITLset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ITLset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ITLset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see ITL_switch_to_buffer
 */
void ITLset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ITLset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ITLget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ITLset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ITLget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ITLset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *ITLget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void ITLset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* ITLlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int ITLlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* ITLlex_init_extra has the same functionality as ITLlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ITLalloc in
 * the yyextra field.
 */

int ITLlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ITLset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ITLalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ITLset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from ITLlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * ITLlex_init()
     */
    return 0;
}

/* ITLlex_destroy is for both reentrant and non-reentrant scanners. */
int ITLlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		ITL_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		ITLpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ITLfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ITLfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * ITLlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ITLfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ITLalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *ITLrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ITLfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see ITLrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 424 "ITL.l"



namespace inscore 
{

void ITLparser::initScanner()
{
	ITLlex_init(&fScanner);
	ITLset_extra(this,fScanner);
}

void ITLparser::destroyScanner()
{
	ITLlex_destroy(fScanner);
}

} // end namespace


