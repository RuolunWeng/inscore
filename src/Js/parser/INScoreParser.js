/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var INScoreParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,9],$V2=[1,10],$V3=[1,14],$V4=[1,16],$V5=[1,17],$V6=[1,13],$V7=[1,9,10,13,16,20,21,24],$V8=[1,25],$V9=[1,32],$Va=[1,33],$Vb=[1,31],$Vc=[1,24],$Vd=[1,26],$Ve=[1,28],$Vf=[1,29],$Vg=[6,10,19,24,25,28,29,30,31,32],$Vh=[6,10,19,24,25,29,30,31,32];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"inscore":3,"expr":4,"message":5,"ENDEXPR":6,"variabledecl":7,"script":8,"ENDSCRIPT":9,"JSCRIPT":10,"address":11,"params":12,"OSCADDRESS":13,"relativeaddress":14,"urlprefix":15,"POINT":16,"hostname":17,"COLON":18,"UINT":19,"IPNUM":20,"HOSTNAME":21,"varname":22,"identifier":23,"IDENTIFIER":24,"REGEXP":25,"param":26,"variable":27,"VARSTART":28,"INT":29,"FLOAT":30,"STRING":31,"expression":32,"EQUAL":33,"$accept":0,"$end":1},
terminals_: {2:"error",6:"ENDEXPR",9:"ENDSCRIPT",10:"JSCRIPT",13:"OSCADDRESS",16:"POINT",18:"COLON",19:"UINT",20:"IPNUM",21:"HOSTNAME",24:"IDENTIFIER",25:"REGEXP",28:"VARSTART",29:"INT",30:"FLOAT",31:"STRING",32:"expression",33:"EQUAL"},
productions_: [0,[3,1],[3,2],[4,2],[4,2],[4,1],[4,1],[8,1],[5,1],[5,2],[11,1],[11,1],[11,2],[14,2],[15,3],[15,3],[17,1],[17,1],[23,1],[23,1],[12,1],[12,1],[12,2],[27,2],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[7,3],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
 debugmsg("expr message: "); parser.msgs.push($$[$0-1]); 
break;
case 4:
 debugmsg("expr variabledecl: "); 
break;
case 5:
 debugmsg("expr script: "); 
break;
case 6:
 debugmsg("expr ENDSCRIPT "); this.done = true; 
break;
case 7:
 if ($$[$0].length) debugmsg("expr script: " + $$[$0]);
break;
case 8:
 this.$ = new Message($$[$0], new Array()); 
break;
case 9:
 debugmsg("message: address + params : " + $$[$0-1] + " params " + $$[$0].toString());
								  this.$ = new Message($$[$0-1], $$[$0]); 
break;
case 10: case 11:
 this.$ = new Address("", 0, $$[$0]);
break;
case 12:
 $$[$0-1].osc = $$[$0]; this.$ = $$[$0-1]; 
break;
case 13:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 14: case 15:
 this.$ = new Address($$[$0-2], parseInt($$[$0]), ""); 
break;
case 16: case 17: case 18: case 19: case 21: case 27: case 28: case 29: case 30: case 32:
 this.$ = $$[$0]; 
break;
case 20:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 22:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 23:
 this.$ = parser.vars[$$[$0]]; 
break;
case 24: case 25:
 this.$ = parseInt($$[$0]); 
break;
case 26:
 this.$ = parseFloat($$[$0]); 
break;
case 31:
 debugmsg("variabledecl: " + $$[$0-2] + " = " + $$[$0]); parser.vars[$$[$0-2]] = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:5,9:$V0,10:$V1,11:7,13:$V2,14:11,15:12,16:$V3,17:15,20:$V4,21:$V5,22:8,24:$V6},{1:[3],4:18,5:3,7:4,8:5,9:$V0,10:$V1,11:7,13:$V2,14:11,15:12,16:$V3,17:15,20:$V4,21:$V5,22:8,24:$V6},o($V7,[2,1]),{6:[1,19]},{6:[1,20]},o($V7,[2,5]),o($V7,[2,6]),{6:[2,8],8:30,10:$V1,12:21,19:$V8,23:27,24:$V9,25:$Va,26:22,27:23,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf},{18:[2,17],33:[1,34]},o([1,6,9,10,13,16,19,20,21,24,25,29,30,31,32],[2,7]),o($Vg,[2,10]),o($Vg,[2,11]),{13:[1,35]},o([6,10,18,19,24,25,29,30,31,32,33],[2,32]),{13:[1,36]},{18:[1,37]},{18:[1,38]},{18:[2,16]},o($V7,[2,2]),o($V7,[2,3]),o($V7,[2,4]),{6:[2,9],8:30,10:$V1,19:$V8,23:27,24:$V9,25:$Va,26:39,29:$Vc,30:$Vd,31:$Ve,32:$Vf},o($Vh,[2,20]),o($Vh,[2,21]),o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o($Vh,[2,27]),o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),{22:40,24:$V6},o($Vh,[2,18]),o($Vh,[2,19]),{8:30,10:$V1,12:41,19:$V8,23:27,24:$V9,25:$Va,26:22,27:23,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf},o($Vg,[2,12]),o($Vg,[2,13]),{19:[1,42]},{19:[1,43]},o($Vh,[2,22]),o($Vh,[2,23]),{6:[2,31],8:30,10:$V1,19:$V8,23:27,24:$V9,25:$Va,26:39,29:$Vc,30:$Vd,31:$Ve,32:$Vf},{13:[2,14]},{13:[2,15]}],
defaultActions: {17:[2,16],42:[2,14],43:[2,15]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	function debugmsg(str){
		typeof console !== 'undefined' ? console.log(str) : print(str);
	}

parser.msgs = new Array;
parser.vars = new Array;

function Message (addr, params) {
	this.address = addr;
	this.params = params;
}

function Address (ip, port, osc) {
	this.ip = ip;				// a string
	this.port = port;			// an integer
	this.osc = osc;				// a string
}

parser.parseError = function(str, hash) {
	typeof console !== 'undefined' ? console.log(str) : print(str);
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
function debugmsg(str){
//	typeof console !== 'undefined' ? console.log("  lex: " + str) : print("  lex: " + str);
}

// ----------------------------------------------------------------------------------------
// strip escape char '\' from escaped characters
function unescape (str) {
	var n = str.length;
	var outStr = "";
	// browse the string:  'r' is an index to the current read location
	//                     'w' is an index to the current write location
	for (r=0, w=0; r < n; r++) {		
		if (str[r] == '\\') {			// escape char '\' is found
			var next = str[r+1];
			if ((next != '\'') && (next != '"')) {	// escape only ' and "
				outStr += str[r];		// output the escape char 
			}
		}
		else outStr += str[r];			// no escape: put the current char at write location 
	}
 	return outStr;
}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 19;
break;
case 1:return 19;
break;
case 2:return 29;
break;
case 3:return 30;
break;
case 4:return 30;
break;
case 5:return 30;
break;
case 6:debugmsg("ENDSCRIPT : " + yy_.yytext); return 9;
break;
case 7:debugmsg("IDENTIFIER: " + yy_.yytext); return 24;
break;
case 8:debugmsg("HOSTNAME: " + yy_.yytext); return 21;
break;
case 9:debugmsg("IPNUM: " + yy_.yytext); return 20;
break;
case 10:return 'EVAL';
break;
case 11:this.begin('DQSTR');
break;
case 12: debugmsg ("STRING: " + unescape(yy_.yytext)); return 31; 
break;
case 13:this.popState();
break;
case 14:this.begin('QSTR');
break;
case 15: debugmsg ("STRING: " + unescape(yy_.yytext)); return 31; 
break;
case 16:this.popState();
break;
case 17: debugmsg ("FILE STRING: " + yy_.yytext);	return 31; 
break;
case 18:this.begin('JSECTION');
break;
case 19:this.popState();
break;
case 20: debugmsg ("JAVASCRIPT: " + yy_.yytext); return 10; 
break;
case 21: debugmsg ("REGEXP: " + yy_.yytext); return 25; 
break;
case 22: debugmsg ("REGEXP: " + yy_.yytext); return 25; 
break;
case 23: debugmsg ("REGEXP: " + yy_.yytext); return 25; 
break;
case 24: this.more(); this.begin('EXPRSECTION'); 
break;
case 25: this.more(); this.popState(); 
							if (this.topState() == 'INITIAL') {
							debugmsg("EXPRESSION " + yy_.yytext);
							return 'EXPRESSION'; 
							}
						
break;
case 26: this.more(); 
break;
case 27: this.begin('EXPRSECTION'); this.more(); 
break;
case 28: this.more(); this.begin('OSCSECTION'); 
break;
case 29: this.more(); 
break;
case 30: this.more(); 
break;
case 31: this.more(); 
break;
case 32: this.more(); 
break;
case 33: this.more(); 
break;
case 34: debugmsg("OSCADDRESS " + yy_.yytext); this.popState(); return 13; 
break;
case 35:debugmsg ("COMMENTLINE: " + yy_.yytext); 
break;
case 36:debugmsg ("COMMENTLINE: " + yy_.yytext); 
break;
case 37:;
break;
case 38: debugmsg ("BEGIN NESTED COMMENT"); this.begin('COMMENT'); 
break;
case 39: debugmsg ("END COMMENT"); this.popState(); 
break;
case 40: debugmsg ("BEGIN COMMENT"); this.begin('COMMENT'); 
break;
case 41:return 33;
break;
case 42:return 'BACKPATH';
break;
case 43:return 'PATHSEP';			/* OSC address and path separator */
break;
case 44:return 6;			/* end of expression */
break;
case 45:return 28;
break;
case 46:return 18;
break;
case 47:return 'COMMA';
break;
case 48:return 16;
break;
case 49:return 'LEFTPAR';
break;
case 50:return 'RIGHTPAR';
break;
case 51:;   /* eat up space */
break;
case 52:;	/* yy_.yylloc->first_column=0; ignore */
break;
case 53:return 9;
break;
case 54:return 9;
break;
case 55: debugmsg("ERR: " + yy_.yytext); return 'ERR'; 
break;
case 56:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:([0-9])+)/,/^(?:\+([0-9])+)/,/^(?:-([0-9])+)/,/^(?:[+-]*([0-9])+\.([0-9])*)/,/^(?:[+-]*([0-9])+\.([0-9])+e[-+]?([0-9])+)/,/^(?:[+-]*([0-9])+e[-+]?([0-9])+)/,/^(?:__END__)/,/^(?:([_a-zA-Z])([_a-zA-Z0-9])*)/,/^(?:(([-a-zA-Z0-9])(([-a-zA-Z0-9])*|\.))+)/,/^(?:([0-9])+\.([0-9])+\.([0-9])+\.([0-9])+)/,/^(?:eval)/,/^(?:")/,/^(?:(\\"|[^"])*)/,/^(?:")/,/^(?:')/,/^(?:(\\'|[^'])*)/,/^(?:')/,/^(?:(\/|(\.\.?\/)*)(([^ \t\\/?:*><|"';=])+\/?)+\.[a-zA-Z]+)/,/^(?:<\?([ \t])*javascript)/,/^(?:\?>)/,/^(?:(([\x0a\x0d])|\?[^>]|[^?])*)/,/^(?:([-_a-zA-Z0-9?+*])+)/,/^(?:([-_a-zA-Z0-9?+*])*\[([-_a-zA-Z0-9^])+\]([-_a-zA-Z0-9?+*])*)/,/^(?:([-_a-zA-Z0-9?+*])*\{[_a-zA-Z0-9,]+\}([-_a-zA-Z0-9?+*])*)/,/^(?:\()/,/^(?:\))/,/^(?:[^()"']*)/,/^(?:expr([ \t])*\()/,/^(?:\/)/,/^(?:\/)/,/^(?:([_a-zA-Z])([_a-zA-Z0-9])*)/,/^(?:([-_a-zA-Z0-9?+*])+)/,/^(?:([-_a-zA-Z0-9?+*])*\[([-_a-zA-Z0-9^])+\]([-_a-zA-Z0-9?+*])*)/,/^(?:([-_a-zA-Z0-9?+*])*\{[_a-zA-Z0-9,]+\}([-_a-zA-Z0-9?+*])*)/,/^(?:([ \t])|([\x0a\x0d]))/,/^(?:([ \t])*#.*)/,/^(?:([ \t])*!.*)/,/^(?:.|([\x0a\x0d])*)/,/^(?:\(\*)/,/^(?:\*\))/,/^(?:\(\*)/,/^(?:=)/,/^(?:\.\.\/)/,/^(?:\/)/,/^(?:;)/,/^(?:\$)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:([ \t])+)/,/^(?:([\x0a\x0d]))/,/^(?:__END__)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"OSCSECTION":{"rules":[29,30,31,32,33,34],"inclusive":false},"EXPRSECTION":{"rules":[24,25,26],"inclusive":false},"JSECTION":{"rules":[19,20],"inclusive":false},"COMMENT":{"rules":[37,38,39],"inclusive":false},"QSTR":{"rules":[15,16],"inclusive":false},"DQSTR":{"rules":[12,13],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,14,17,18,21,22,23,27,28,35,36,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = INScoreParser;
exports.Parser = INScoreParser.Parser;
exports.parse = function () { return INScoreParser.parse.apply(INScoreParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}